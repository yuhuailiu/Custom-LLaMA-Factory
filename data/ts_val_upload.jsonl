{"path": "src/api/__tests__/passwordCheckHandler.test.ts", "project_name": "next-password-protect", "text": "import { EventEmitter } from 'events';\nimport jwt from 'jsonwebtoken';\nimport { createMocks } from 'node-mocks-http';\n\nimport { passwordCheckHandler } from '../passwordCheckHandler';\n\ndescribe('[api] passwordCheckHandler', () => {\n  it('should succeed with correct cookie', async () => {\n    const { req, res } = createMocks(\n      {\n        method: 'GET',\n        headers: {\n          cookie: `next-password-protect=${jwt.sign(\n            {},\n            'password',\n          )}; Path=/; HttpOnly`,\n        },\n      },\n      { eventEmitter: EventEmitter },\n    );\n\n    await passwordCheckHandler('password')(req as any, res as any);\n\n    expect(res._getStatusCode()).toBe(200);\n    expect(res._getHeaders()).toHaveProperty(\n      'cache-control',\n      'no-cache, no-store, must-revalidate',\n    );\n\n    jest.restoreAllMocks();\n  });\n\n  it('should fail without cookie', async () => {\n    const { req, res } = createMocks(\n      {\n        method: 'GET',\n        headers: {},\n      },\n      { eventEmitter: EventEmitter },\n    );\n\n    await passwordCheckHandler('password')(req as any, res as any);\n\n    expect(res._getStatusCode()).toBe(401);\n\n    jest.restoreAllMocks();\n  });\n\n  it('should fail with incorrect JWT', async () => {\n    const { req, res } = createMocks(\n      {\n        method: 'GET',\n        headers: {\n          cookie: `next-password-protect=${jwt.sign(\n            {},\n            'incorrect',\n          )}; Path=/; HttpOnly`,\n        },\n      },\n      { eventEmitter: EventEmitter },\n    );\n\n    await passwordCheckHandler('password')(req as any, res as any);\n\n    expect(res._getStatusCode()).toBe(401);\n\n    jest.restoreAllMocks();\n  });\n\n  it('should fail on incorrect method', async () => {\n    const { req, res } = createMocks(\n      { method: 'POST' },\n      { eventEmitter: EventEmitter },\n    );\n\n    await passwordCheckHandler('password')(req as any, res as any);\n\n    expect(res._getStatusCode()).toBe(500);\n\n    jest.restoreAllMocks();\n  });\n\n  it('should gracefully error', async () => {\n    const { req, res } = createMocks(\n      {\n        method: 'GET',\n        headers: {\n          cookie: `next-password-protect=${jwt.sign(\n            {},\n            'password',\n          )}; Path=/; HttpOnly`,\n        },\n      },\n      { eventEmitter: EventEmitter },\n    );\n\n    jest.spyOn(Buffer, 'from').mockImplementation(() => {\n      throw new Error();\n    });\n\n    await passwordCheckHandler('password')(req as any, res as any);\n\n    expect(res._getStatusCode()).toBe(500);\n    expect(res._getData()).toBe(\n      JSON.stringify({ message: 'An error has occured.' }),\n    );\n\n    jest.restoreAllMocks();\n  });\n});\n", "id": "next-password-protect:src/api/__tests__/passwordCheckHandler.test.ts:9ba4f918-e57b-4fa4-86fb-1ad49ac1b12c"}
{"path": "src/core/Intl/InjectIntlContext.tsx", "project_name": "CpDesign", "text": "  \nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { IntlContext } from './IntlContext';\n\nexport const InjectIntlContext = injectIntl(({ intl, children }) => (\n  <IntlContext.Provider value={intl}>{children}</IntlContext.Provider>\n));", "id": "CpDesign:src/core/Intl/InjectIntlContext.tsx:20520d28-b775-44c4-8047-5702900161eb"}
{"path": "libs/akita/src/lib/query.ts", "project_name": "akita", "text": "import { Store } from './store';\nimport { Observable } from 'rxjs';\nimport { queryConfigKey, QueryConfigOptions } from './queryConfig';\nimport { isString } from './isString';\nimport { isFunction } from './isFunction';\nimport { isDev } from './env';\nimport { __queries__ } from './stores';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { compareKeys } from './compareKeys';\nimport { ReturnTypes } from './types';\n\nexport class Query<S> {\n  // @internal\n  __store__: Store<S>;\n\n  constructor(protected store: Store<S>) {\n    this.__store__ = store;\n    if (isDev()) {\n      // @internal\n      __queries__[store.storeName] = this;\n    }\n  }\n\n  /**\n   * Select a slice from the store\n   *\n   * @example\n   *\n   * this.query.select()\n   * this.query.select(state => state.entities)\n   * this.query.select('token');\n   * this.query.select(['name', 'email'])\n   * this.query.select([state => state.name, state => state.age])\n   *\n   */\n  select<K extends keyof S>(key: K): Observable<S[K]>;\n  select<R>(project: (store: S) => R): Observable<R>;\n  select<K extends keyof S>(stateKeys: K[]): Observable<Pick<S, K>>;\n  select<R extends [(state: S) => any] | Array<(state: S) => any>>(selectorFns: R): Observable<ReturnTypes<R>>;\n  select(): Observable<S>;\n  select<R>(project?: ((store: S) => R) | keyof S | (keyof S)[] | ((state: S) => any)[]): Observable<R | S | any[]> {\n    let mapFn;\n    if (isFunction(project)) {\n      mapFn = project;\n    } else if (isString(project)) {\n      mapFn = state => state[project];\n    } else if (Array.isArray(project)) {\n      return this.store\n        ._select(state => state)\n        .pipe(\n          distinctUntilChanged(compareKeys(project)),\n          map(state => {\n            if (isFunction(project[0])) {\n              return (project as ((state: S) => any)[]).map(func => func(state));\n            }\n\n            return (project as (keyof S)[]).reduce((acc, k) => {\n              acc[k as any] = state[k];\n              return acc;\n            }, {});\n          })\n        ) as any;\n    } else {\n      mapFn = state => state;\n    }\n\n    return this.store._select(mapFn);\n  }\n\n  /**\n   * Select the loading state\n   *\n   * @example\n   *\n   * this.query.selectLoading().subscribe(isLoading => {})\n   */\n  selectLoading() {\n    return this.select(state => (state as S & { loading: boolean }).loading);\n  }\n\n  /**\n   * Select the error state\n   *\n   * @example\n   *\n   * this.query.selectError().subscribe(error => {})\n   */\n  selectError<ErrorType = any>(): Observable<ErrorType> {\n    return this.select(state => (state as S & { error: ErrorType }).error);\n  }\n\n  /**\n   * Get the store's value\n   *\n   * @example\n   *\n   * this.query.getValue()\n   *\n   */\n  getValue(): S {\n    return this.store._value();\n  }\n\n  /**\n   * Select the cache state\n   *\n   * @example\n   *\n   * this.query.selectHasCache().pipe(\n   *   switchMap(hasCache => {\n   *     return hasCache ? of() : http().pipe(res => store.set(res))\n   *   })\n   * )\n   */\n  selectHasCache(): Observable<boolean> {\n    return this.store._cache().asObservable();\n  }\n\n  /**\n   * Whether we've cached data\n   *\n   * @example\n   *\n   * this.query.getHasCache()\n   *\n   */\n  getHasCache(): boolean {\n    return this.store._cache().value;\n  }\n\n  // @internal\n  get config(): QueryConfigOptions {\n    return this.constructor[queryConfigKey];\n  }\n}\n", "id": "akita:libs/akita/src/lib/query.ts:8389af58-115f-4ab0-a746-f74ba28f35fa"}
{"path": "packages/react/src/hooks/use-adapter-context/index.ts", "project_name": "flopflip", "text": "export { default } from './use-adapter-context';\n", "id": "flopflip:packages/react/src/hooks/use-adapter-context/index.ts:d9d7e438-9319-4222-8f3f-2cc06ea36315"}
{"path": "firebase/functions/src/user/add-plan.ts", "project_name": "machinelabs", "text": "import * as admin from 'firebase-admin';\n\nexport const setBetaPlan = userId =>\n  admin\n    .database()\n    .ref(`/users/${userId}/plan`)\n    .update({ plan_id: 'beta', created_at: Date.now() });\n", "id": "machinelabs:firebase/functions/src/user/add-plan.ts:5579c90d-851c-448e-a573-dbe6e81ee9c5"}
{"path": "src/opcodes/sar.ts", "project_name": "evm", "text": "import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class SAR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SAR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' >> ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.shiftRight(right));\n    } else {\n        state.stack.push(new SAR(left, right));\n    }\n};\n", "id": "evm:src/opcodes/sar.ts:926a7d8a-cb3a-47f2-9bf1-225e1541e91d"}
{"path": "packages/api-page-builder-so-ddb/src/types.ts", "project_name": "webiny-js", "text": "import { PageBuilderStorageOperations as BasePageBuilderStorageOperations } from \"@webiny/api-page-builder/types\";\nimport { Entity, Table } from \"dynamodb-toolbox\";\nimport { DocumentClient } from \"aws-sdk/clients/dynamodb\";\nimport { Plugin } from \"@webiny/plugins/types\";\nimport { DynamoDBTypes, TableConstructor } from \"dynamodb-toolbox/dist/classes/Table\";\nimport {\n    EntityAttributeConfig,\n    EntityCompositeAttributes\n} from \"dynamodb-toolbox/dist/classes/Entity\";\n\nexport type AttributeDefinition = DynamoDBTypes | EntityAttributeConfig | EntityCompositeAttributes;\n\nexport type Attributes = Record<string, AttributeDefinition>;\n\nexport enum ENTITIES {\n    SYSTEM = \"PbSystem\",\n    SETTINGS = \"PbSettings\",\n    CATEGORIES = \"PbCategories\",\n    MENUS = \"PbMenus\",\n    PAGE_ELEMENTS = \"PbPageElements\",\n    PAGES = \"PbPages\"\n}\n\nexport interface TableModifier {\n    (table: TableConstructor): TableConstructor;\n}\n\nexport interface PageBuilderStorageOperations extends BasePageBuilderStorageOperations {\n    getTable: () => Table;\n    getEntities: () => Record<\n        \"system\" | \"settings\" | \"categories\" | \"menus\" | \"pageElements\" | \"pages\",\n        Entity<any>\n    >;\n}\n\nexport interface StorageOperationsFactoryParams {\n    documentClient: DocumentClient;\n    table?: TableModifier;\n    attributes?: Record<ENTITIES, Attributes>;\n    plugins?: Plugin[] | Plugin[][];\n}\n\nexport interface StorageOperationsFactory {\n    (params: StorageOperationsFactoryParams): PageBuilderStorageOperations;\n}\n", "id": "webiny-js:packages/api-page-builder-so-ddb/src/types.ts:347fc69b-e437-4183-a27f-3cfe2a3c1ca7"}
{"path": "src/plugins/data/server/search/routes/call_msearch.ts", "project_name": "OpenSearch-Dashboards", "text": "/*\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n */\n\n/*\n * Licensed to Elasticsearch B.V. under one or more contributor\n * license agreements. See the NOTICE file distributed with\n * this work for additional information regarding copyright\n * ownership. Elasticsearch B.V. licenses this file to you under\n * the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n * Modifications Copyright OpenSearch Contributors. See\n * GitHub history for details.\n */\n\nimport { Observable } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { ApiResponse } from '@elastic/elasticsearch';\nimport { SearchResponse } from 'elasticsearch';\nimport { IUiSettingsClient, IScopedClusterClient, SharedGlobalConfig } from 'src/core/server';\n\nimport { MsearchRequestBody, MsearchResponse } from '../../../common/search/search_source';\nimport { shimHitsTotal } from './shim_hits_total';\nimport { getShardTimeout, getDefaultSearchParams, toSnakeCase, shimAbortSignal } from '..';\n\n/** @internal */\nexport function convertRequestBody(\n  requestBody: MsearchRequestBody,\n  { timeout }: { timeout?: string }\n): string {\n  return requestBody.searches.reduce((req, curr) => {\n    const header = JSON.stringify({\n      ignore_unavailable: true,\n      ...curr.header,\n    });\n    const body = JSON.stringify({\n      timeout,\n      ...curr.body,\n    });\n    return `${req}${header}\\n${body}\\n`;\n  }, '');\n}\n\ninterface CallMsearchDependencies {\n  opensearchClient: IScopedClusterClient;\n  globalConfig$: Observable<SharedGlobalConfig>;\n  uiSettings: IUiSettingsClient;\n}\n\n/**\n * Helper for the `/internal/_msearch` route, exported separately here\n * so that it can be reused elsewhere in the data plugin on the server,\n * e.g. SearchSource\n *\n * @internal\n */\nexport function getCallMsearch(dependencies: CallMsearchDependencies) {\n  return async (params: {\n    body: MsearchRequestBody;\n    signal?: AbortSignal;\n  }): Promise<MsearchResponse> => {\n    const { opensearchClient, globalConfig$, uiSettings } = dependencies;\n\n    // get shardTimeout\n    const config = await globalConfig$.pipe(first()).toPromise();\n    const timeout = getShardTimeout(config);\n\n    // trackTotalHits is not supported by msearch\n    const { trackTotalHits, ...defaultParams } = await getDefaultSearchParams(uiSettings);\n\n    const body = convertRequestBody(params.body, timeout);\n\n    const promise = shimAbortSignal(\n      opensearchClient.asCurrentUser.msearch(\n        {\n          body,\n        },\n        {\n          querystring: toSnakeCase(defaultParams),\n        }\n      ),\n      params.signal\n    );\n    const response = (await promise) as ApiResponse<{ responses: Array<SearchResponse<any>> }>;\n\n    return {\n      body: {\n        ...response,\n        body: {\n          responses: response.body.responses?.map((r: SearchResponse<any>) => shimHitsTotal(r)),\n        },\n      },\n    };\n  };\n}\n", "id": "OpenSearch-Dashboards:src/plugins/data/server/search/routes/call_msearch.ts:244f8e5d-179b-4af8-a056-5e9b24025a96"}
{"path": "src/mutable-is-unsafe-in-typescript.ts", "project_name": "functional-programming", "text": "const xs: Array<string> = ['a', 'b', 'b']\nconst ys: Array<string | undefined> = xs\nys.push(undefined)\nxs.map((s) => s.trim()) // explosion at runtime\n", "id": "functional-programming:src/mutable-is-unsafe-in-typescript.ts:33b1d404-7d4c-476b-87d8-faac0db59068"}
{"path": "projects/truly-ui/src/components/progressbar/progressbar.ts", "project_name": "truly", "text": "/*\n MIT License\n\n Copyright (c) 2019 <NAME>\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\nimport {\n  Component, OnInit, Input, SimpleChanges, OnChanges,\n} from '@angular/core';\n\n@Component( {\n  selector: 'tl-progressbar',\n  templateUrl: './progressbar.html',\n  styleUrls: [ './progressbar.scss' ],\n} )\nexport class TlProgressBar implements OnInit, OnChanges {\n\n  @Input() min = 0;\n\n  @Input() max = 100;\n\n  @Input() position = 0;\n\n  @Input() unit = '';\n\n  @Input() height = '15px';\n\n  @Input() shape: 'default' | 'rounded' = 'rounded';\n\n  @Input() progressInfo: 'none' | 'percentage' | 'detailed' = 'percentage';\n\n  @Input() mode: 'determinate' | 'indeterminate' = 'determinate';\n\n  @Input() color: 'basic' | 'primary' | 'success' | 'danger' | 'warning' | 'information' = 'primary';\n\n  constructor() {}\n\n  ngOnInit() {}\n\n  getProgressDescription() {\n    return Math.round( ((this.position - this.min) / (this.max - this.min)) * 100 );\n  }\n\n  ngOnChanges( change: SimpleChanges ) {\n    if ( change.progress ) {\n      if (this.position < this.min) {\n        this.position = this.min;\n      }\n      if ( (!change.progress.firstChange) && isNaN( change.progress.currentValue ) ) {\n        this.position = 0;\n      }\n    }\n  }\n\n}\n\n", "id": "truly:projects/truly-ui/src/components/progressbar/progressbar.ts:5fafea27-f4ae-4667-a9cc-35d4e87ed013"}
{"path": "lib/components/result-view/display.tsx", "project_name": "atom-ipython", "text": "import React from \"react\";\nimport { toJS } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport {\n  DisplayData,\n  ExecuteResult,\n  StreamText,\n  KernelOutputError,\n  Output,\n  Media,\n  RichMedia,\n} from \"@nteract/outputs\";\nimport Plotly from \"./plotly\";\nimport {\n  VegaLite1,\n  VegaLite2,\n  VegaLite3,\n  VegaLite4,\n  Vega2,\n  Vega3,\n  Vega4,\n  Vega5,\n} from \"@nteract/transform-vega\";\nimport Markdown from \"./markdown\";\n// All supported media types for output go here\nexport const supportedMediaTypes = (\n  <RichMedia>\n    <Vega5 />\n    <Vega4 />\n    <Vega3 />\n    <Vega2 />\n    <Plotly />\n    <VegaLite4 />\n    <VegaLite3 />\n    <VegaLite2 />\n    <VegaLite1 />\n    <Media.Json />\n    <Media.JavaScript />\n    <Media.HTML />\n    <Markdown />\n    <Media.LaTeX />\n    <Media.SVG />\n    <Media.Image mediaType=\"image/gif\" />\n    <Media.Image mediaType=\"image/jpeg\" />\n    <Media.Image mediaType=\"image/png\" />\n    <Media.Plain />\n  </RichMedia>\n);\nexport function isTextOutputOnly(data: Record<string, any>) {\n  const supported = React.Children.map(\n    supportedMediaTypes.props.children,\n    (mediaComponent) => mediaComponent.props.mediaType\n  );\n  const bundleMediaTypes = [...Object.keys(data)].filter((mediaType) =>\n    supported.includes(mediaType)\n  );\n  return bundleMediaTypes.length === 1 && bundleMediaTypes[0] === \"text/plain\"\n    ? true\n    : false;\n}\n\n@observer\nclass Display extends React.Component<{\n  output: any;\n}> {\n  render() {\n    return (\n      <Output output={toJS(this.props.output)}>\n        <ExecuteResult expanded>{supportedMediaTypes}</ExecuteResult>\n        <DisplayData expanded>{supportedMediaTypes}</DisplayData>\n        <StreamText expanded />\n        <KernelOutputError expanded />\n      </Output>\n    );\n  }\n}\n\nexport default Display;\n", "id": "atom-ipython:lib/components/result-view/display.tsx:225ae6f5-47da-4376-96bf-4991c867a84b"}
{"path": "editor/src/sample-projects/sample-project-utils.spec.ts", "project_name": "utopia", "text": "import { defaultProject } from './sample-project-utils'\nimport * as fs from 'fs'\n\ndescribe('Project model integrity check', () => {\n  xit('ensures that the server tests use the most recent project model structure', () => {\n    const stringifiedProject = JSON.stringify(defaultProject())\n    fs.writeFileSync('../server/test/Test/Utopia/Web/SampleProject.json', stringifiedProject)\n  })\n})\n", "id": "utopia:editor/src/sample-projects/sample-project-utils.spec.ts:bdd86445-bb77-48ea-95a9-ab6f6090ef30"}
{"path": "examples/more-plots/bidirectional-bar/demo/vertical-label.ts", "project_name": "G2Plot", "text": "import { BidirectionalBar } from '@antv/g2plot';\n\nexport const data = [\n  { country: '乌拉圭', '2016年耕地总面积': 13.4, '2016年转基因种植面积': 12.3 },\n  { country: '巴拉圭', '2016年耕地总面积': 14.4, '2016年转基因种植面积': 6.3 },\n  { country: '南非', '2016年耕地总面积': 18.4, '2016年转基因种植面积': 8.3 },\n  { country: '巴基斯坦', '2016年耕地总面积': 34.4, '2016年转基因种植面积': 13.8 },\n  { country: '阿根廷', '2016年耕地总面积': 44.4, '2016年转基因种植面积': 19.5 },\n  { country: '巴西', '2016年耕地总面积': 24.4, '2016年转基因种植面积': 18.8 },\n  { country: '加拿大', '2016年耕地总面积': 54.4, '2016年转基因种植面积': 24.7 },\n  { country: '中国', '2016年耕地总面积': 104.4, '2016年转基因种植面积': 5.3 },\n  { country: '美国', '2016年耕地总面积': 165.2, '2016年转基因种植面积': 72.9 },\n];\n\nconst BidirectionalBarPlot = new BidirectionalBar('container', {\n  data,\n  layout: 'vertical',\n  xField: 'country',\n  yField: ['2016年耕地总面积', '2016年转基因种植面积'],\n  tooltip: {\n    shared: true,\n    showMarkers: false,\n  },\n  appendPadding: [20, 0],\n  // 开启 label 展示\n  label: {\n    // 默认居中, 'middle'\n    position: 'top',\n    // 默认为: 2\n    // offset: 4,\n  },\n});\n\nBidirectionalBarPlot.render();\n", "id": "G2Plot:examples/more-plots/bidirectional-bar/demo/vertical-label.ts:b94b4e33-1a77-4c45-b657-e179f85c9e0f"}
{"path": "web/src/App/components/App.test.tsx", "project_name": "hongbomiao.com", "text": "import { render } from '@testing-library/react';\nimport React from 'react';\nimport HmApp from './App';\n\ndescribe('App', () => {\n  test('render App', () => {\n    render(<HmApp />);\n  });\n});\n", "id": "hongbomiao.com:web/src/App/components/App.test.tsx:919e8e3c-a00a-4cac-9ec7-a9731dbdb5d1"}
{"path": "src/scripts/content-types.ts", "project_name": "burdy", "text": "import PathUtil from \"@scripts/util/path.util\";\nimport rimraf from \"rimraf\";\nimport {webpackServerConfigure} from \"../webpack.config\";\nimport config from \"@shared/features/config\";\nimport webpack from \"webpack\";\nimport {compilerRun} from \"@scripts/util/webpack.util\";\nimport glob from 'fast-glob';\nimport path from 'path';\n\nconst scriptContentTypes = async (subcommand = 'export', pattern: string[] = []) => {\n  const ctBuildDirectory = PathUtil.cache('ct-build');\n\n  await rimraf(ctBuildDirectory, (error) => error && console.log(error));\n\n  if (pattern.length === 0) {\n    pattern = [\n      'components/**/*.ts',\n      'components/**/*.tsx',\n      'components/**/*.js',\n      'components/**/*.jsx',\n      'templates/**/*.ts',\n      'templates/**/*.tsx',\n      'templates/**/*.js',\n      'templates/**/*.jsx',\n    ]\n  }\n\n  console.log('Scanning with: ', pattern.join(' '), ' patterns.');\n\n  const componentFiles = await glob(pattern);\n  const requireComponentFiles = componentFiles.map(\n    file => `./${path.relative(PathUtil.processRoot(), PathUtil.processRoot(file))}`\n  );\n\n  const requireStatements = componentFiles.map(file => (\n    `\n    { \n      require: () => __webpack_require__('./${path.relative(PathUtil.processRoot(), PathUtil.processRoot(file))}'), \n      file: '${file}' \n    }\n    `\n  )).join(',\\n');\n\n  const webpackServerConfig = webpackServerConfigure((webpackConfig) => {\n    webpackConfig.entry = [\n      PathUtil.root('scripts', 'entry', 'content-types'),\n      ...requireComponentFiles\n    ];\n    webpackConfig.devtool = false;\n    webpackConfig.output.path = ctBuildDirectory;\n    webpackConfig.module.rules = [{\n      test: /\\.[jt]sx?$/,\n      exclude: /node_modules/,\n      use: [\n        {\n          loader: require.resolve('babel-loader'),\n          options: {\n            cacheDirectory: true,\n            cacheCompression: true,\n            presets: [\n              [\n                require.resolve('@babel/preset-env'),\n                {\n                  modules: 'cjs',\n                  loose: true,\n                },\n              ],\n              require.resolve('@babel/preset-react'),\n              require.resolve('@babel/preset-typescript'),\n            ],\n            plugins: [\n              require.resolve('babel-plugin-transform-typescript-metadata'),\n              [\n                require.resolve('@babel/plugin-proposal-decorators'),\n                {\n                  legacy: true,\n                },\n              ],\n              [\n                require.resolve('babel-plugin-module-resolver'),\n                {\n                  root: ['./src/'],\n                  alias: {\n                    '@admin': './src/admin',\n                    '@drivers': './src/drivers',\n                    '@features': './src/features',\n                    '@interfaces': './src/interfaces',\n                    '@listeners': './src/listeners',\n                    '@models': './src/models',\n                    '@scripts': './src/scripts',\n                    '@server': './src/server',\n                    '@shared': './src/shared',\n                  },\n                },\n              ],\n              [\n                require.resolve('@babel/plugin-transform-runtime'),\n                {\n                  helpers: true,\n                  regenerator: true,\n                },\n              ],\n            ],\n          },\n        },\n      ],\n    }]\n    webpackConfig.plugins.push(\n      new webpack.DefinePlugin({\n        REQUIRE_STATEMENTS: `[${requireStatements}]`,\n        COMMAND: JSON.stringify(subcommand)\n      })\n    )\n    return webpackConfig;\n  }, config?.webpack?.server);\n\n  const serverCompiler = webpack(webpackServerConfig);\n  await compilerRun(serverCompiler);\n};\n\nexport default scriptContentTypes;\n", "id": "burdy:src/scripts/content-types.ts:d49e4eb9-dd79-41f2-bb20-18a221b07dd9"}
{"path": "diboot-admin-ui/src/router/index.ts", "project_name": "diboot-v2", "text": "import { createRouter, createWebHashHistory, RouteRecordRaw, RouterView } from 'vue-router'\nimport { createRouterGuard } from '@/router/router-guards'\n\n/**\n * constantRoutes\n * a base page that does not have permission requirements\n * all roles can be accessed\n */\nexport const constantRoutes: RouteRecordRaw[] = [\n  {\n    path: '/redirect/:path(.*)*',\n    name: 'Redirect',\n    meta: { hidden: true, ignoreAuth: true },\n    redirect: to => {\n      const path = to.params.path\n      return { path: `/${Array.isArray(path) ? path.join('/') : path}`, query: to.query, replace: true }\n    }\n  },\n  {\n    path: '/exception',\n    name: 'Exception',\n    redirect: '/exception/404',\n    component: RouterView,\n    meta: { title: 'Exception', hidden: true, ignoreAuth: true },\n    children: [\n      {\n        path: '404',\n        name: '404',\n        component: () => import('@/views/exception/404.vue'),\n        meta: { title: '404', ignoreAuth: true }\n      },\n      {\n        path: '500',\n        name: '500',\n        component: () => import('@/views/exception/500.vue'),\n        meta: { title: '500', ignoreAuth: true }\n      }\n    ]\n  },\n  {\n    path: '/:path(.*)*',\n    name: 'ErrorPage',\n    meta: { hidden: true, ignoreAuth: true },\n    redirect: to => {\n      return { name: '404', query: { path: to.path }, replace: true }\n    }\n  },\n  {\n    path: '/login',\n    name: 'Login',\n    component: () => import('@/views/login/index.vue'),\n    meta: { hidden: true, ignoreAuth: true }\n  },\n  {\n    path: '/',\n    name: 'Home',\n    redirect: '/dashboard',\n    component: () => import('@/layout/index.vue'),\n    children: [\n      {\n        path: 'dashboard',\n        name: 'Dashboard',\n        component: () => import('@/views/dashboard/index.vue'),\n        meta: { title: '仪表盘', affixTab: true, sort: -1 }\n      }\n    ]\n  }\n]\n\n/**\n * 创建路由\n */\nconst createAppRouter = () =>\n  createRouter({\n    history: createWebHashHistory(import.meta.env.BASE_URL), // hash 模式\n    // history: createWebHistory(import.meta.env.BASE_URL), // HTML5 模式\n    routes: constantRoutes\n  })\n\nconst router = createAppRouter()\n\n// 添加路由守卫等\ncreateRouterGuard(router)\n\nexport default router\n\n// 重置路由\nexport const resetRouter = () => {\n  router.currentRoute.value.matched = createAppRouter().currentRoute.value.matched\n  router.go(0)\n}\n", "id": "diboot-v2:diboot-admin-ui/src/router/index.ts:352abe49-cd75-4189-8eda-fe3fbc162a43"}
{"path": "lib/build/recipe/thirdpartyemailpassword/components/features/signInAndUp/index.d.ts", "project_name": "supertokens-auth-react", "text": "import { PureComponent } from \"react\";\nimport { FeatureBaseProps } from \"../../../../../types\";\nimport Recipe from \"../../../recipe\";\ndeclare type PropType = FeatureBaseProps & {\n    recipe: Recipe;\n};\ndeclare class SignInAndUp extends PureComponent<\n    PropType,\n    {\n        status: \"LOADING\" | \"READY\";\n    }\n> {\n    getIsEmbedded: () => boolean;\n    render: () => JSX.Element;\n}\nexport default SignInAndUp;\n", "id": "supertokens-auth-react:lib/build/recipe/thirdpartyemailpassword/components/features/signInAndUp/index.d.ts:c6ab5ca0-741a-4dfe-963f-60bedbf6ba1e"}
{"path": "ui/client/containers/ProcessesList/UseFilteredProcesses.tsx", "project_name": "nussknacker", "text": "import {isEqual} from \"lodash\"\nimport {useCallback, useMemo} from \"react\"\nimport {useDebounce} from \"use-debounce\"\nimport {normalizeParams} from \"../../common/VisualizationUrl\"\nimport HttpService from \"../../http/HttpService\"\nimport {useFetch} from \"../hooks/useFetch\"\nimport {FiltersState} from \"../TableFilters\"\nimport {Queries} from \"./types\"\n\nexport function useFilteredProcesses(filters: FiltersState & Queries) {\n  const normalizedFilters = useMemo(() => filters && normalizeParams(filters), [filters])\n  const [params] = useDebounce(normalizedFilters, 200, {equalityFn: isEqual})\n\n  const fetchAction = useCallback(() => {\n    if (params) {\n      const {isCustom, ...rest} = params\n      return isCustom ? HttpService.fetchCustomProcesses() : HttpService.fetchProcesses(rest)\n    }\n  }, [params])\n\n  const [processes, getProcesses, isLoading] = useFetch(fetchAction, [])\n  return {processes, getProcesses, isLoading}\n}\n", "id": "nussknacker:ui/client/containers/ProcessesList/UseFilteredProcesses.tsx:96f7379a-fe71-45d3-9c39-11dcaccaf981"}
{"path": "packages/remax-one/src/__tests__/components/Image.test.tsx", "project_name": "remax", "text": "import * as React from 'react';\nimport TestRenderer from 'react-test-renderer';\nimport { Image } from '../../hostComponents';\n\ndescribe('Image', () => {\n  it('render correctly in ali', () => {\n    process.env.REMAX_PLATFORM = 'ali';\n    const testRenderer = TestRenderer.create(\n      <Image\n        className=\"class\"\n        onError={() => {\n          // ignore\n        }}\n        onLoad={() => {\n          // ignore\n        }}\n      />\n    );\n\n    expect(testRenderer.toJSON()).toMatchSnapshot();\n  });\n\n  it('render correctly in wechat', () => {\n    process.env.REMAX_PLATFORM = 'wechat';\n    const testRenderer = TestRenderer.create(\n      <Image\n        className=\"class\"\n        onError={() => {\n          // ignore\n        }}\n        onLoad={() => {\n          // ignore\n        }}\n      />\n    );\n\n    expect(testRenderer.toJSON()).toMatchSnapshot();\n  });\n\n  it('render correctly in toutiao', () => {\n    process.env.REMAX_PLATFORM = 'toutiao';\n    const testRenderer = TestRenderer.create(\n      <Image\n        className=\"class\"\n        onError={() => {\n          // ignore\n        }}\n        onLoad={() => {\n          // ignore\n        }}\n      />\n    );\n\n    expect(testRenderer.toJSON()).toMatchSnapshot();\n  });\n});\n", "id": "remax:packages/remax-one/src/__tests__/components/Image.test.tsx:96403d83-37c0-4c10-a0d4-ba6752e92657"}
{"path": "apps/chart/src/message.ts", "project_name": "tui.chart", "text": "export const message = {\n  SELECT_SERIES_API_SELECTABLE_ERROR: 'It works only when the selectable option is true.',\n  SELECT_SERIES_API_INDEX_ERROR: 'The index value is invalid.',\n  ALREADY_OBSERVABLE_ERROR: 'Source object is observable already',\n  CIRCLE_LEGEND_RENDER_ERROR: 'circleLegend is only possible when bubble series is present',\n  noDataError: (chartName: string) => `There's no ${chartName} data!`,\n  noBrushError: (brushName: string) => `Brush don't exist in painter: ${brushName}`,\n  DASH_SEGMENTS_UNAVAILABLE_ERROR: 'DashSegments option is available from IE11 and above.',\n  SERIES_INDEX_ERROR: 'The seriesIndex value is invalid',\n  AUTO_LAYOUT_CONTAINER_SIZE_ERROR:\n    'To use auto layout, the width or height of the container must be specified as a value such as \"%\" or \"vh\", \"vw\".',\n};\n", "id": "tui.chart:apps/chart/src/message.ts:bf6c15c5-ef7f-460b-98c1-4e1301868921"}
{"path": "tests/cases/fourslash/completionListInTypedObjectLiteralsWithPartialPropertyNames2.ts", "project_name": "ArrowScript", "text": "/// <reference path=\"fourslash.ts\" />\r\n\r\n////interface MyPoint {\r\n////    x1: number;\r\n////    y1: number;\r\n////}\r\n////var p15: MyPoint = {\r\n////    /**/x1: 0,\r\n////};\r\n\r\ngoTo.marker();\r\nverify.memberListContains(\"x1\");\r\nverify.memberListContains(\"y1\");\r\nverify.memberListCount(2);\r\n", "id": "ArrowScript:tests/cases/fourslash/completionListInTypedObjectLiteralsWithPartialPropertyNames2.ts:2bdb47a2-112c-430a-9a5f-4613977985da"}
{"path": "packages/ariakit/src/menu/menu-description.ts", "project_name": "ariakit", "text": "import {\n  createComponent,\n  createElement,\n  createHook,\n} from \"ariakit-utils/system\";\nimport { As, Props } from \"ariakit-utils/types\";\nimport {\n  HovercardDescriptionOptions,\n  useHovercardDescription,\n} from \"../hovercard/hovercard-description\";\nimport { MenuState } from \"./menu-state\";\n\n/**\n * A component hook that returns props that can be passed to `Role` or any other\n * Ariakit component to render a description element for a menu. This hook must\n * be used in a component that's wrapped with `Menu` so the `aria-describedby`\n * prop is properly set on the menu element.\n * @see https://ariakit.org/components/menu\n * @example\n * ```jsx\n * // This component must be wrapped with Menu\n * const props = useMenuDescription();\n * <Role {...props}>Description</Role>\n * ```\n */\nexport const useMenuDescription = createHook<MenuDescriptionOptions>(\n  (props) => {\n    props = useHovercardDescription(props);\n    return props;\n  }\n);\n\n/**\n * A component that renders a description in a menu. This component must be\n * wrapped with `Menu` so the `aria-describedby` prop is properly set on the\n * menu element.\n * @see https://ariakit.org/components/menu\n * @example\n * ```jsx\n * const menu = useMenuState();\n * <Menu state={menu}>\n *   <MenuDescription>Description</MenuDescription>\n * </Menu>\n * ```\n */\nexport const MenuDescription = createComponent<MenuDescriptionOptions>(\n  (props) => {\n    const htmlProps = useMenuDescription(props);\n    return createElement(\"p\", htmlProps);\n  }\n);\n\nexport type MenuDescriptionOptions<T extends As = \"p\"> = Omit<\n  HovercardDescriptionOptions<T>,\n  \"state\"\n> & {\n  /**\n   * Object returned by the `useMenuState` hook. If not provided, the parent\n   * `Menu` component's context will be used.\n   */\n  state?: MenuState;\n};\n\nexport type MenuDescriptionProps<T extends As = \"p\"> = Props<\n  MenuDescriptionOptions<T>\n>;\n", "id": "ariakit:packages/ariakit/src/menu/menu-description.ts:dac3ebfc-b072-4c92-805b-66d2fda664e6"}
{"path": "src/lib/types/definitions/ArgumentTypes.ts", "project_name": "AR-APEX-ZONE", "text": "export const enum Scope {\n\tLocal,\n\tGlobal\n}\n", "id": "AR-APEX-ZONE:src/lib/types/definitions/ArgumentTypes.ts:3668964f-d8e9-4d3a-a93d-67a9b1ed416a"}
{"path": "src/core/client/framework/lib/storage/PostMessageStorage.ts", "project_name": "talk", "text": "import { v1 as uuid } from \"uuid\";\n\nimport { globalErrorReporter } from \"../errors\";\nimport { PostMessageService } from \"../postMessage\";\nimport { PromisifiedStorage } from \"./PromisifiedStorage\";\n\ninterface Request {\n  resolve: (v: any) => void;\n  reject: (v: any) => void;\n}\n\nclass PostMessageStorage implements PromisifiedStorage {\n  /** Instance to postMessage */\n  private postMessage: PostMessageService;\n\n  /** Requested storage type */\n  private type: string;\n\n  /** A Map of requestID => Request */\n  private requests: Record<string, Request> = {};\n\n  /** Requests method with parameters over postMessage. */\n  private call<T>(\n    method: string,\n    parameters: Record<string, any> = {}\n  ): Promise<T> {\n    const id = uuid();\n    return new Promise((resolve, reject) => {\n      this.requests[id] = { resolve, reject };\n\n      if (process.env.NODE_ENV === \"development\") {\n        // eslint-disable-next-line no-console\n        console.debug(`postMessageStorage.${this.type}.request`, {\n          id,\n          method,\n          parameters,\n        });\n      }\n\n      this.postMessage.send(`postMessageStorage.${this.type}.request`, {\n        id,\n        method,\n        parameters,\n      });\n    });\n  }\n\n  /** Listen to postMessage responses */\n  private listen() {\n    // Receive successful responses.\n    this.postMessage.on(\n      `postMessageStorage.${this.type}.response`,\n      ({ id, result }) => {\n        if (process.env.NODE_ENV === \"development\") {\n          // eslint-disable-next-line no-console\n          console.debug(`postMessageStorage.${this.type}.response`, {\n            id,\n            result,\n          });\n        }\n\n        if (id in this.requests) {\n          this.requests[id].resolve(result);\n          delete this.requests[id];\n        } else {\n          // eslint-disable-next-line no-console\n          globalErrorReporter.report(\n            `postMessageStorage.${this.type}.response for missing request: ${id}`\n          );\n        }\n      }\n    );\n\n    // Receive error responses.\n    this.postMessage.on(\n      `postMessageStorage.${this.type}.error`,\n      ({ id, error }) => {\n        if (process.env.NODE_ENV === \"development\") {\n          // eslint-disable-next-line no-console\n          console.debug(`postMessageStorage.${this.type}.error`, { id, error });\n        }\n\n        if (id in this.requests) {\n          this.requests[id].reject(new Error(error));\n          delete this.requests[id];\n        } else {\n          globalErrorReporter.report(\n            `postMessageStorage.${this.type}.error for missing request: ${id}`\n          );\n        }\n      }\n    );\n  }\n\n  constructor(postMessage: PostMessageService, type: string) {\n    this.postMessage = postMessage;\n    this.type = type;\n    this.listen();\n  }\n\n  public get length() {\n    return this.call<number>(\"length\");\n  }\n  public key(n: number) {\n    return this.call<string | null>(\"key\", { n });\n  }\n  public clear() {\n    return this.call<void>(\"clear\");\n  }\n  public setItem(key: string, value: string) {\n    return this.call<void>(\"setItem\", { key, value });\n  }\n  public getItem(key: string) {\n    return this.call<string | null>(\"getItem\", { key });\n  }\n  public removeItem(key: string) {\n    return this.call<void>(\"removeItem\", { key });\n  }\n}\n\n/**\n * Creates a storage that put requests onto postmessage.\n *\n * @param  {string} postMessage PostMessageService\n * @returns {object} storage\n */\nexport default function createPostMessageStorage(\n  postMessage: PostMessageService,\n  type: \"localStorage\" | \"sessionStorage\" | \"indexedDB\"\n): PostMessageStorage {\n  return new PostMessageStorage(postMessage, type);\n}\n", "id": "talk:src/core/client/framework/lib/storage/PostMessageStorage.ts:994e7cfb-bc26-4745-b86a-5ccf4895c174"}
{"path": "projects/intersection-observer/src/services/tests/intersection-observer.service.spec.ts", "project_name": "intersection-observer", "text": "import {take} from 'rxjs/operators';\nimport {IntersectionObserverService} from '../intersection-observer.service';\n\ndescribe('IntersectionObserverService', () => {\n    it('works', done => {\n        let called = false;\n\n        const nativeElement = document.createElement('div');\n        const service = new IntersectionObserverService(\n            {\n                nativeElement,\n            },\n            true,\n            '0px 0px 0px 0px',\n            0,\n            {\n                nativeElement: document.body,\n            },\n        );\n\n        service.pipe(take(1)).subscribe({\n            next: () => {\n                called = true;\n            },\n        });\n\n        document.body.appendChild(nativeElement);\n\n        setTimeout(() => {\n            expect(called).toBe(true);\n            done();\n        });\n    });\n\n    it('throws when not supported', () => {\n        let error = false;\n        const service = new IntersectionObserverService(\n            {\n                nativeElement: document.createElement('DIV'),\n            },\n            false,\n            '0px 0px 0px 0px',\n            0,\n            null,\n        );\n\n        service.subscribe({\n            error: () => {\n                error = true;\n            },\n        });\n\n        expect(error).toBe(true);\n    });\n});\n", "id": "intersection-observer:projects/intersection-observer/src/services/tests/intersection-observer.service.spec.ts:8d44b0d7-b8b0-402b-82f3-c398d2756d6a"}
{"path": "packages/expo-facebook/plugin/src/__tests__/withSKAdNetworkIdentifiers-test.ts", "project_name": "expo", "text": "import { withSKAdNetworkIdentifiers } from '../withSKAdNetworkIdentifiers';\n\ndescribe(withSKAdNetworkIdentifiers, () => {\n  it(`adds ids to the Info.plist`, () => {\n    // @ts-ignore: ExpoConfig name and slug\n    expect(withSKAdNetworkIdentifiers({}, ['FOOBAR', 'other'])).toStrictEqual({\n      ios: {\n        infoPlist: {\n          SKAdNetworkItems: [\n            {\n              SKAdNetworkIdentifier: 'foobar',\n            },\n            {\n              SKAdNetworkIdentifier: 'other',\n            },\n          ],\n        },\n      },\n    });\n  });\n  it(`prevents adding duplicate ids to the Info.plist`, () => {\n    expect(\n      withSKAdNetworkIdentifiers(\n        // @ts-ignore: ExpoConfig name and slug\n        {\n          ios: {\n            infoPlist: {\n              SKAdNetworkItems: [\n                {\n                  SKAdNetworkIdentifier: 'foobar',\n                },\n              ],\n            },\n          },\n        },\n        ['foobar', 'other']\n      )\n    ).toStrictEqual({\n      ios: {\n        infoPlist: {\n          SKAdNetworkItems: [\n            {\n              SKAdNetworkIdentifier: 'foobar',\n            },\n            {\n              SKAdNetworkIdentifier: 'other',\n            },\n          ],\n        },\n      },\n    });\n  });\n});\n", "id": "expo:packages/expo-facebook/plugin/src/__tests__/withSKAdNetworkIdentifiers-test.ts:cac40396-10de-4c55-99f3-9f6dc1384154"}
{"path": "packages/vantui-cli/src/config/webpack.pro.config.ts", "project_name": "vantui", "text": "import getBase from './webpack.base.config.js'\n\nexport default async function getPro() {\n  const baseConfig = await getBase('production')\n\n  const proConfig = Object.assign(baseConfig, {\n    mode: 'production',\n    devtool: 'hidden-source-map',\n  })\n\n  return proConfig\n}\n", "id": "vantui:packages/vantui-cli/src/config/webpack.pro.config.ts:76cdd9cb-1f20-4177-b77c-e72734f29a38"}
{"path": "src/app/shared/theme-picker/index.ts", "project_name": "material.angular.io", "text": "export * from './theme-picker';\n", "id": "material.angular.io:src/app/shared/theme-picker/index.ts:77b1f1fa-4e95-4076-9d3e-828ab8fce541"}
{"path": "src/vs/editor/browser/viewParts/viewCursors/viewCursor.ts", "project_name": "vscode", "text": "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { FastDomNode, createFastDomNode } from 'vs/base/browser/fastDomNode';\nimport * as strings from 'vs/base/common/strings';\nimport { Configuration } from 'vs/editor/browser/config/configuration';\nimport { TextEditorCursorStyle, EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { RenderingContext, RestrictedRenderingContext } from 'vs/editor/common/view/renderingContext';\nimport { ViewContext } from 'vs/editor/common/view/viewContext';\nimport * as viewEvents from 'vs/editor/common/view/viewEvents';\nimport { MOUSE_CURSOR_TEXT_CSS_CLASS_NAME } from 'vs/base/browser/ui/mouseCursor/mouseCursor';\n\nexport interface IViewCursorRenderData {\n\tdomNode: HTMLElement;\n\tposition: Position;\n\tcontentLeft: number;\n\twidth: number;\n\theight: number;\n}\n\nclass ViewCursorRenderData {\n\tconstructor(\n\t\tpublic readonly top: number,\n\t\tpublic readonly left: number,\n\t\tpublic readonly width: number,\n\t\tpublic readonly height: number,\n\t\tpublic readonly textContent: string,\n\t\tpublic readonly textContentClassName: string\n\t) { }\n}\n\nexport class ViewCursor {\n\tprivate readonly _context: ViewContext;\n\tprivate readonly _domNode: FastDomNode<HTMLElement>;\n\n\tprivate _cursorStyle: TextEditorCursorStyle;\n\tprivate _lineCursorWidth: number;\n\tprivate _lineHeight: number;\n\tprivate _typicalHalfwidthCharacterWidth: number;\n\n\tprivate _isVisible: boolean;\n\n\tprivate _position: Position;\n\n\tprivate _lastRenderedContent: string;\n\tprivate _renderData: ViewCursorRenderData | null;\n\n\tconstructor(context: ViewContext) {\n\t\tthis._context = context;\n\t\tconst options = this._context.configuration.options;\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\n\t\tthis._cursorStyle = options.get(EditorOption.cursorStyle);\n\t\tthis._lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n\t\tthis._lineCursorWidth = Math.min(options.get(EditorOption.cursorWidth), this._typicalHalfwidthCharacterWidth);\n\n\t\tthis._isVisible = true;\n\n\t\t// Create the dom node\n\t\tthis._domNode = createFastDomNode(document.createElement('div'));\n\t\tthis._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME}`);\n\t\tthis._domNode.setHeight(this._lineHeight);\n\t\tthis._domNode.setTop(0);\n\t\tthis._domNode.setLeft(0);\n\t\tConfiguration.applyFontInfo(this._domNode, fontInfo);\n\t\tthis._domNode.setDisplay('none');\n\n\t\tthis._position = new Position(1, 1);\n\n\t\tthis._lastRenderedContent = '';\n\t\tthis._renderData = null;\n\t}\n\n\tpublic getDomNode(): FastDomNode<HTMLElement> {\n\t\treturn this._domNode;\n\t}\n\n\tpublic getPosition(): Position {\n\t\treturn this._position;\n\t}\n\n\tpublic show(): void {\n\t\tif (!this._isVisible) {\n\t\t\tthis._domNode.setVisibility('inherit');\n\t\t\tthis._isVisible = true;\n\t\t}\n\t}\n\n\tpublic hide(): void {\n\t\tif (this._isVisible) {\n\t\t\tthis._domNode.setVisibility('hidden');\n\t\t\tthis._isVisible = false;\n\t\t}\n\t}\n\n\tpublic onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tconst options = this._context.configuration.options;\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\n\t\tthis._cursorStyle = options.get(EditorOption.cursorStyle);\n\t\tthis._lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis._typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n\t\tthis._lineCursorWidth = Math.min(options.get(EditorOption.cursorWidth), this._typicalHalfwidthCharacterWidth);\n\t\tConfiguration.applyFontInfo(this._domNode, fontInfo);\n\n\t\treturn true;\n\t}\n\n\tpublic onCursorPositionChanged(position: Position): boolean {\n\t\tthis._position = position;\n\t\treturn true;\n\t}\n\n\tprivate _prepareRender(ctx: RenderingContext): ViewCursorRenderData | null {\n\t\tlet textContent = '';\n\n\t\tif (this._cursorStyle === TextEditorCursorStyle.Line || this._cursorStyle === TextEditorCursorStyle.LineThin) {\n\t\t\tconst visibleRange = ctx.visibleRangeForPosition(this._position);\n\t\t\tif (!visibleRange || visibleRange.outsideRenderedLine) {\n\t\t\t\t// Outside viewport\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tlet width: number;\n\t\t\tif (this._cursorStyle === TextEditorCursorStyle.Line) {\n\t\t\t\twidth = dom.computeScreenAwareSize(this._lineCursorWidth > 0 ? this._lineCursorWidth : 2);\n\t\t\t\tif (width > 2) {\n\t\t\t\t\tconst lineContent = this._context.model.getLineContent(this._position.lineNumber);\n\t\t\t\t\tconst nextCharLength = strings.nextCharLength(lineContent, this._position.column - 1);\n\t\t\t\t\ttextContent = lineContent.substr(this._position.column - 1, nextCharLength);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twidth = dom.computeScreenAwareSize(1);\n\t\t\t}\n\n\t\t\tlet left = visibleRange.left;\n\t\t\tif (width >= 2 && left >= 1) {\n\t\t\t\t// try to center cursor\n\t\t\t\tleft -= 1;\n\t\t\t}\n\n\t\t\tconst top = ctx.getVerticalOffsetForLineNumber(this._position.lineNumber) - ctx.bigNumbersDelta;\n\t\t\treturn new ViewCursorRenderData(top, left, width, this._lineHeight, textContent, '');\n\t\t}\n\n\t\tconst lineContent = this._context.model.getLineContent(this._position.lineNumber);\n\t\tconst nextCharLength = strings.nextCharLength(lineContent, this._position.column - 1);\n\t\tconst visibleRangeForCharacter = ctx.linesVisibleRangesForRange(new Range(this._position.lineNumber, this._position.column, this._position.lineNumber, this._position.column + nextCharLength), false);\n\t\tif (!visibleRangeForCharacter || visibleRangeForCharacter.length === 0) {\n\t\t\t// Outside viewport\n\t\t\treturn null;\n\t\t}\n\n\t\tconst firstVisibleRangeForCharacter = visibleRangeForCharacter[0];\n\t\tif (firstVisibleRangeForCharacter.outsideRenderedLine || firstVisibleRangeForCharacter.ranges.length === 0) {\n\t\t\t// Outside viewport\n\t\t\treturn null;\n\t\t}\n\n\t\tconst range = firstVisibleRangeForCharacter.ranges[0];\n\t\tconst width = range.width < 1 ? this._typicalHalfwidthCharacterWidth : range.width;\n\n\t\tlet textContentClassName = '';\n\t\tif (this._cursorStyle === TextEditorCursorStyle.Block) {\n\t\t\tconst lineData = this._context.model.getViewLineData(this._position.lineNumber);\n\t\t\ttextContent = lineContent.substr(this._position.column - 1, nextCharLength);\n\t\t\tconst tokenIndex = lineData.tokens.findTokenIndexAtOffset(this._position.column - 1);\n\t\t\ttextContentClassName = lineData.tokens.getClassName(tokenIndex);\n\t\t}\n\n\t\tlet top = ctx.getVerticalOffsetForLineNumber(this._position.lineNumber) - ctx.bigNumbersDelta;\n\t\tlet height = this._lineHeight;\n\n\t\t// Underline might interfere with clicking\n\t\tif (this._cursorStyle === TextEditorCursorStyle.Underline || this._cursorStyle === TextEditorCursorStyle.UnderlineThin) {\n\t\t\ttop += this._lineHeight - 2;\n\t\t\theight = 2;\n\t\t}\n\n\t\treturn new ViewCursorRenderData(top, range.left, width, height, textContent, textContentClassName);\n\t}\n\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tthis._renderData = this._prepareRender(ctx);\n\t}\n\n\tpublic render(ctx: RestrictedRenderingContext): IViewCursorRenderData | null {\n\t\tif (!this._renderData) {\n\t\t\tthis._domNode.setDisplay('none');\n\t\t\treturn null;\n\t\t}\n\n\t\tif (this._lastRenderedContent !== this._renderData.textContent) {\n\t\t\tthis._lastRenderedContent = this._renderData.textContent;\n\t\t\tthis._domNode.domNode.textContent = this._lastRenderedContent;\n\t\t}\n\n\t\tthis._domNode.setClassName(`cursor ${MOUSE_CURSOR_TEXT_CSS_CLASS_NAME} ${this._renderData.textContentClassName}`);\n\n\t\tthis._domNode.setDisplay('block');\n\t\tthis._domNode.setTop(this._renderData.top);\n\t\tthis._domNode.setLeft(this._renderData.left);\n\t\tthis._domNode.setWidth(this._renderData.width);\n\t\tthis._domNode.setLineHeight(this._renderData.height);\n\t\tthis._domNode.setHeight(this._renderData.height);\n\n\t\treturn {\n\t\t\tdomNode: this._domNode.domNode,\n\t\t\tposition: this._position,\n\t\t\tcontentLeft: this._renderData.left,\n\t\t\theight: this._renderData.height,\n\t\t\twidth: 2\n\t\t};\n\t}\n}\n", "id": "vscode:src/vs/editor/browser/viewParts/viewCursors/viewCursor.ts:cb56fc19-3f47-4d3f-a71e-87c2098a6c0d"}
{"path": "libs/platform/src/lib/table/models/table-rows-rearrange-event.model.ts", "project_name": "fundamental-ngx", "text": "export class TableRowsRearrangeEvent<T> {\n    constructor(public row: T, public previousIndex: number, public newIndex: number, public rows: T[]) {}\n}\n", "id": "fundamental-ngx:libs/platform/src/lib/table/models/table-rows-rearrange-event.model.ts:c5135551-e9e7-44ba-b9ac-3f715bca2759"}
{"path": "lib/ModelHelpers.ts", "project_name": "Iridium", "text": "﻿import * as MongoDB from \"mongodb\";\nimport {Model} from \"./Model\";\nimport * as Skmatc from \"skmatc\";\nimport {Omnom} from \"./utils/Omnom\";\nimport * as _ from \"lodash\";\nimport * as Bluebird from \"bluebird\";\n\n/**\n * A number of helper methods used commonly within Iridium, they provide a means to transform,\n * validate, wrap and diff instances and documents. By keeping these methods in one place we\n * help to improve testability and reduce code duplication (mouse abuse) throughout the codebase.\n * @internal\n */\nexport class ModelHelpers<TDocument extends { _id?: any }, TInstance> {\n    constructor(public model: Model<TDocument, TInstance>) {\n        this._validator = Skmatc.scope(model.schema);\n        model.validators.forEach(validator => this._validator.register(validator));\n    }\n\n    private _validator: Skmatc.Skmatc;\n\n    /**\n     * Validates a document to ensure that it matches the model's ISchema requirements\n     * @param {any} document The document to validate against the ISchema\n     * @returns {SkmatcCore.IResult} The result of the validation\n     */\n    validate(document: TDocument): Skmatc.Result {\n        return this._validator.validate(document);\n    }\n\n    /**\n     * Wraps the given document in an instance wrapper for use throughout the application\n     * @param {any} document The document to be wrapped as an instance\n     * @param {Boolean} isNew Whether the instance originated from the database or was created by the application\n     * @param {Boolean} isPartial Whether the document supplied contains all information present in the database\n     * @returns {any} An instance which wraps this document\n     */\n    wrapDocument(document: TDocument, isNew?: boolean, isPartial?: boolean): TInstance {\n        return new this.model.Instance(document, isNew, isPartial);\n    }\n\n    /**\n     * Converts the given document to its database form into a form\n     * using the transforms defined on the model.\n     * @param {any} document The document to be converted\n     * @returns {any} The result of having transformed the document.\n     * @remarks This is only really called from insert/create - as \n     */\n    transformToDB<T>(document: T, options: TransformOptions = { properties: true }): T {\n        if(options.document && this.model.transforms.$document)\n            document = <any>this.model.transforms.$document.toDB(document, \"$document\", this.model);\n        \n        if(!options.properties) return document;\n        \n        for (let property in this.model.transforms) {\n            if (property === \"$document\") continue;\n\n            const transform = this.model.transforms[property];\n            if (!transform) continue;\n\n            if(document.hasOwnProperty(property)) {\n                (<T & { [prop: string]: any }>document)[property]\n                    = transform.toDB((<T & { [prop: string]: any }>document)[property], property, this.model);\n            }\n        }\n            \n        return document;\n    }\n    \n    /**\n     * Converts the given document from its database form using the\n     * transforms defined on the model.\n     * @param document The document to be converted.\n     * @returns The result of having transformed the document.\n     * @remarks Unlike the transformToDB function - this method only applies\n     * document level transforms, as property level transforms are applied in\n     * their relevant instance setters.\n     */\n    transformFromDB(document: TDocument, options: TransformOptions = { properties: true }): TDocument {\n        if(options.document && this.model.transforms.$document)\n            document = this.model.transforms.$document.fromDB(document, \"$document\", this.model);\n        \n        if(!options.properties) return document;\n        \n        for (let property in this.model.transforms) {\n            if(property === \"$document\") continue;\n\n            const transform = this.model.transforms[property];\n            if (!transform) continue;\n\n            if(document.hasOwnProperty(property)) {\n                (<TDocument & { [prop: string]: any }>document)[property]\n                    = transform.fromDB((<TDocument & { [prop: string]: any }>document)[property], property, this.model);\n            }\n        }\n            \n        return document;\n    }\n\n    /**\n     * Converts the given document to its database form into a form\n     * using the transforms defined on the model.\n     * @param document The document to be converted\n     * @param processProperties Whether or not to process properties in addition\n     * document level transforms.\n     * @returns {any} A new document cloned from the original and transformed\n     */\n    convertToDB<T>(document: T, options: TransformOptions = { properties: true }): T {\n        let doc: T = this.cloneDocument(document);\n        return this.transformToDB(doc, options);\n    }\n\n    /**\n     * Performs a diff operation between two documents and creates a MongoDB changes object to represent the differences\n     * @param {any} original The original document prior to changes being made\n     * @param {any} modified The document after changes were made\n     */\n    diff(original: TDocument, modified: TDocument): any {\n        let omnom = new Omnom();\n        omnom.diff(original, modified);\n        return omnom.changes;\n    }\n    \n    /**\n     * Clones the given document recursively, taking into account complex types like\n     * Buffers correctly.\n     * \n     * @param {any} The document you wish to clone deeply.\n     */\n    cloneDocument<T>(original: T): T {\n        return _.cloneDeepWith<T, any>(original, (value) => {\n           if(Buffer.isBuffer(value)) {\n               return value;\n           }\n           \n           if(value instanceof MongoDB.Binary) {\n               return value;\n           }\n           \n           if(value instanceof MongoDB.ObjectID) {\n               return value;\n           }\n        });\n    }\n    \n    /**\n     * Clones the given document recursively, taking into account complex types like\n     * Buffers correctly. Optimized for working with query documents instead of true\n     * documents.\n     * \n     * @param {any} The document you wish to clone deeply.\n     */\n    cloneConditions<T>(original: T): T {\n        return this.cloneDocument(original);\n    }\n}\n\nexport interface TransformOptions {\n    properties?: boolean;\n    document?: boolean;\n}", "id": "Iridium:lib/ModelHelpers.ts:9e4b5a41-9d45-4843-814f-40f29465a281"}
{"path": "HristoHT-e-commerce.v2/backend/node_modules/lorem-ipsum/src/bin/constants/errors.ts", "project_name": "training-projects", "text": "export const CANNOT_DETERMINE_PLATFORM =\n  \"Could not determine host operating system.\";\n", "id": "training-projects:HristoHT-e-commerce.v2/backend/node_modules/lorem-ipsum/src/bin/constants/errors.ts:c308d538-2f8c-4048-8f0d-1cf9f5bc1dac"}
{"path": "src/components/combo-box/ComboBox.tsx", "project_name": "lens", "text": "import React, { Key, useRef, useState, forwardRef } from \"react\"\nimport cn from \"classnames\"\nimport { useComboBox } from \"@react-aria/combobox\"\nimport { useComboBoxState } from \"@react-stately/combobox\"\nimport { useFilter } from \"@react-aria/i18n\"\nimport { useButton } from \"@react-aria/button\"\nimport {\n  Item as ReactAriaItem,\n  Section as ReactAriaSection,\n} from \"@react-stately/collections\"\nimport { CollectionChildren } from \"@react-types/shared\"\nimport { useId, mergeProps, chain } from \"@react-aria/utils\"\nimport { useFocus, useHover } from \"@react-aria/interactions\"\nimport { Tooltip } from \"../tooltip/Tooltip\"\n\nimport { useCollectionComponents } from \"../../hooks/useCollectionComponents\"\nimport {\n  ListBoxFooter,\n  ListBoxOverlay,\n  ListBoxOption,\n} from \"../internal/ListBox\"\nimport { Label } from \"../label/Label\"\nimport { Icon } from \"../icon/Icon\"\nimport { FocusRing } from \"../focus-ring/FocusRing\"\nimport { Hint } from \"../internal/Hint\"\n\nexport type ComboBoxOption<OptionKey extends Key = string> =\n  ListBoxOption<OptionKey>\n\nexport type ComboBoxContainerProps<OptionKey extends Key> = {\n  /** An HTML ID attribute that will be attached to the the rendered component. Useful for targeting it from tests */\n  id?: string\n  /** Controls if this ComboBox should steal focus when first rendered */\n  autoFocus?: boolean\n  /** A list of Options to render inside this ComboBox */\n  children?: CollectionChildren<ComboBoxOption<OptionKey>>\n  /** Value to be pre-populated in the input when this ComboBox is first rendered */\n  defaultInputValue?: string\n  /** Key of the Option that is selected when this ComboBox is first rendered */\n  defaultSelectedKey?: OptionKey\n  /** An optional hint to show next to the ComboBox that describes what this ComboBox expects */\n  hint?: string\n  /** An optional error to show next to the ComboBox. If a `validator` is also supplied, the `validator` takes precendence */\n  error?: string\n  /** Controls if this ComboBox is disabled */\n  isDisabled?: boolean\n  /** A string describing what this ComboBox represents */\n  label: string\n  /** A (dynamic) list of options to render within this ComboBox.\n   * This may be provided upfront instead of providing static children.\n   */\n  options?: ComboBoxOption<OptionKey>[]\n  /** Controls if this ComboBox's options are not yet available, but will be in the future */\n  isLoading?: boolean\n  /** Name of the value held by this ComboBox when placed inside a form */\n  name?: string\n  /** A value to display in the TextField when it is empty */\n  placeholder?: string\n  /** The current selection */\n  selectedKey?: OptionKey\n  /** Callback invoked when the ComboBox's selection changes */\n  onSelectionChange?: (key: OptionKey) => void\n}\n\n/**\n * A ComboBox is a specialized text field that only allows you its value to be one of the pre-provided options.\n * It displays a list of options below the text field. This list keeps getting shorter as you type, since fewer options match the text field's value.\n */\nfunction ComboBoxContainer<OptionKey extends Key = string>({\n  id,\n  autoFocus,\n  children,\n  defaultInputValue,\n  defaultSelectedKey,\n  error,\n  hint,\n  isDisabled = false,\n  isLoading = false,\n  options,\n  label,\n  name,\n  placeholder = \"Select an option\",\n  selectedKey,\n  onSelectionChange,\n}: ComboBoxContainerProps<OptionKey>) {\n  const { body, footer } = useCollectionComponents({\n    children,\n    footerType: ListBoxFooter,\n  })\n\n  const _hintId = useId()\n  const hintId = id ? `${id}-hint` : _hintId\n\n  const { contains } = useFilter({ sensitivity: \"base\" })\n  const state = useComboBoxState({\n    id,\n    autoFocus,\n    children: body,\n    allowsEmptyCollection: true,\n    menuTrigger: \"focus\",\n    defaultInputValue,\n    defaultSelectedKey,\n    isDisabled,\n    isReadOnly: isDisabled,\n    defaultItems: options, // `defaultFilter` only works when `items` is undefined\n    defaultFilter: contains,\n    placeholder,\n    selectedKey,\n    onSelectionChange: onSelectionChange as (k: Key) => void,\n  })\n\n  const containerRef = useRef<HTMLDivElement>(null)\n  const inputRef = useRef<HTMLInputElement>(null)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n  const overlayRef = useRef<HTMLDivElement>(null)\n  const listBoxRef = useRef<HTMLUListElement>(null)\n  const {\n    inputProps,\n    buttonProps: triggerProps,\n    labelProps,\n    listBoxProps,\n  } = useComboBox(\n    {\n      id,\n      autoFocus,\n      children: body,\n      menuTrigger: \"focus\",\n      defaultInputValue,\n      defaultSelectedKey,\n      isDisabled,\n      isReadOnly: isDisabled,\n      defaultItems: options,\n      placeholder,\n      selectedKey,\n      label,\n      onSelectionChange: onSelectionChange as (k: React.Key) => void,\n      inputRef,\n      buttonRef,\n      popoverRef: overlayRef,\n      listBoxRef,\n    },\n    state\n  )\n  const { buttonProps } = useButton({ ...triggerProps, isDisabled }, buttonRef)\n\n  const { hoverProps, isHovered } = useHover({}) // deliberately not passing `isDisabled` because we want it to ignore that\n\n  return (\n    <div className=\"w-full flex flex-col space-y-3\">\n      <Label labelProps={labelProps}>{label}</Label>\n      <section className=\"w-full relative mt-3\">\n        <FocusRing autoFocus={autoFocus} within>\n          <div\n            {...hoverProps}\n            ref={containerRef}\n            className={cn(\n              \"flex items-center w-full relative space-x-2\",\n              \"rounded border border-gray-300 dark:border-gray-700\",\n              \"px-3 py-2.5\",\n              \"text-sm\",\n              {\n                \"text-gray-400 dark:text-gray-400\": isDisabled,\n                \"bg-gray-100 dark:bg-gray-800\": isDisabled,\n                \"bg-white dark:bg-gray-900\": !isDisabled,\n                \"cursor-not-allowed\": isDisabled,\n              }\n            )}\n          >\n            {state.selectedItem && state.selectedItem.props.leadingImageSrc && (\n              <img\n                src={state.selectedItem.props.leadingImageSrc}\n                className=\"rounded-full w-4\"\n              />\n            )}\n            {state.selectedItem && state.selectedItem.props.leadingIcon && (\n              <Icon name={state.selectedItem.props.leadingIcon} size=\"sm\" />\n            )}\n            <input\n              ref={inputRef}\n              type=\"text\"\n              lens-role=\"input\"\n              {...inputProps}\n              aria-describedby={hintId}\n              name={name}\n              className={cn(\"flex-1 min-w-0\", \"mr-4\", {\n                \"bg-white dark:bg-gray-900\": !isDisabled,\n                \"bg-gray-100 dark:bg-gray-800\": isDisabled,\n                \"text-gray-800 dark:text-gray-100\": !isDisabled,\n                \"text-gray-400 dark:text-gray-400\": isDisabled,\n                \"cursor-not-allowed\": isDisabled,\n              })}\n            />\n            <button lens-role=\"chevron\" ref={buttonRef} {...buttonProps}>\n              <Icon\n                name=\"triangle-down\"\n                size=\"xxs\"\n                className=\"text-gray-500 dark:text-gray-500\"\n              />\n            </button>\n          </div>\n        </FocusRing>\n\n        {isDisabled && isHovered && (\n          <Tooltip target={containerRef}>This ComboBox is disabled</Tooltip>\n        )}\n\n        <Hint id={hintId} text={hint} error={error} />\n\n        {state.isOpen && (\n          <ListBoxOverlay\n            listBoxProps={listBoxProps}\n            id={id}\n            label={label}\n            containerRef={containerRef}\n            listBoxRef={listBoxRef}\n            overlayRef={overlayRef}\n            state={state}\n            footer={footer}\n            loading={isLoading}\n          />\n        )}\n      </section>\n    </div>\n  )\n}\n\nexport const ComboBox = {\n  Container: ComboBoxContainer,\n  Section: ReactAriaSection,\n  Option: ReactAriaItem as <Key extends string>(props: {\n    key: Key\n    children: string\n    leadingIcon?: string\n    trailingIcon?: string\n    leadingImageSrc?: string\n    description?: string\n  }) => JSX.Element,\n  Footer: ListBoxFooter,\n}\n", "id": "lens:src/components/combo-box/ComboBox.tsx:ece0adc4-b26c-403a-9040-0baba9f738fd"}
{"path": "src/main/utils/form-fill.ts", "project_name": "wexond", "text": "import { parse } from 'url';\n\nimport { IFormFillData } from '~/interfaces';\nimport { getFormFillValue, getFormFillSubValue } from '~/utils/form-fill';\nimport { Application } from '../application';\n\nconst getType = (name: string) => {\n  return name === 'username' || name === 'login' || name === 'password'\n    ? 'password'\n    : 'address';\n};\n\nexport const getFormFillMenuItems = async (name: string, value: string) => {\n  const dataType = getType(name);\n  const { url } = Application.instance.windows.current.viewManager.selected;\n  const { hostname } = parse(url);\n\n  const items = await Application.instance.storage.find<IFormFillData>({\n    scope: 'formfill',\n    query: {\n      type: dataType,\n    },\n  });\n\n  return items\n    .map((item: IFormFillData) => {\n      const text = getFormFillValue(name, item, true);\n      const subtext = getFormFillSubValue(name, item);\n\n      if (dataType === 'password' && item.url !== hostname) {\n        return null;\n      }\n\n      if (\n        text &&\n        (name !== 'password' ? text.startsWith(value) : !value.length)\n      ) {\n        return {\n          _id: item._id,\n          text,\n          subtext,\n        };\n      }\n\n      return null;\n    })\n    .filter((r) => r);\n};\n", "id": "wexond:src/main/utils/form-fill.ts:99145109-fb01-4139-ad68-3190a7832477"}
{"path": "packages/modulizer/custom_typings/ast-types.d.ts", "project_name": "polymer-tools", "text": "\ndeclare module 'ast-types' {\nimport * as estree from 'estree';\nimport {Node} from 'estree';\n  export interface NodePath<N = Node> {\n    node: N;\n    parent?: NodePath;\n\n    get<NKey extends keyof N>(name: NKey): NodePath<N[NKey]>|undefined;\n\n    canBeFirstInStatement(): boolean;\n    firstInStatement(): boolean;\n\n    insertAt(index: number, node: Node): this;\n\n    /** Remove this node from the AST. */\n    prune(): void;\n    insertBefore(node: Node): this;\n    insertAfter(node: Node): this;\n    replace<R extends Node>(replacement: R): NodePath<R>[];\n\n    /**\n     * The value encapsulated by this Path, generally equal to\n     * parentPath.value[name] if we have a parentPath.\n     */\n    value: N;\n\n    /** The immediate parent Path of this Path. */\n    parentPath: NodePath;\n\n    /**\n     * The name of the property of parentPath.value through which this Path's\n     * value was reached.\n     */\n    name?: string;\n  }\n\n  interface VisitorContext {\n    abort(): void;\n    traverse(nodePath: NodePath): void;\n  }\n\n  interface Visitor {\n    visitNode?(this: VisitorContext, path: NodePath<estree.Node>): void|boolean;\n    visitProgram?\n        (this: VisitorContext, path: NodePath<estree.Program>): void|boolean;\n    visitEmptyStatement?\n        (this: VisitorContext, path: NodePath<estree.EmptyStatement>):\n            void|boolean;\n    visitCallExpression?\n        (this: VisitorContext, path: NodePath<estree.CallExpression>):\n            void|boolean;\n    visitBlockStatement?\n        (this: VisitorContext, path: NodePath<estree.BlockStatement>):\n            void|boolean;\n    visitExpressionStatement?\n        (this: VisitorContext, path: NodePath<estree.ExpressionStatement>):\n            void|boolean;\n    visitIfStatement?(this: VisitorContext, path: NodePath<estree.IfStatement>):\n        void|boolean;\n    visitLabeledStatement?\n        (this: VisitorContext, path: NodePath<estree.LabeledStatement>):\n            void|boolean;\n    visitBreakStatement?\n        (this: VisitorContext, path: NodePath<estree.BreakStatement>):\n            void|boolean;\n    visitContinueStatement?\n        (this: VisitorContext, path: NodePath<estree.ContinueStatement>):\n            void|boolean;\n    visitWithStatement?\n        (this: VisitorContext, path: NodePath<estree.WithStatement>):\n            void|boolean;\n    visitSwitchStatement?\n        (this: VisitorContext, path: NodePath<estree.SwitchStatement>):\n            void|boolean;\n    visitReturnStatement?\n        (this: VisitorContext, path: NodePath<estree.ReturnStatement>):\n            void|boolean;\n    visitThrowStatement?\n        (this: VisitorContext, path: NodePath<estree.ThrowStatement>):\n            void|boolean;\n    visitTryStatement?\n        (this: VisitorContext, path: NodePath<estree.TryStatement>):\n            void|boolean;\n    visitWhileStatement?\n        (this: VisitorContext, path: NodePath<estree.WhileStatement>):\n            void|boolean;\n    visitDoWhileStatement?\n        (this: VisitorContext, path: NodePath<estree.DoWhileStatement>):\n            void|boolean;\n    visitForStatement?\n        (this: VisitorContext, path: NodePath<estree.ForStatement>):\n            void|boolean;\n    visitForInStatement?\n        (this: VisitorContext, path: NodePath<estree.ForInStatement>):\n            void|boolean;\n    visitDebuggerStatement?\n        (this: VisitorContext, path: NodePath<estree.DebuggerStatement>):\n            void|boolean;\n    visitFunctionDeclaration?\n        (this: VisitorContext, path: NodePath<estree.FunctionDeclaration>):\n            void|boolean;\n    visitVariableDeclaration?\n        (this: VisitorContext, path: NodePath<estree.VariableDeclaration>):\n            void|boolean;\n    visitVariableDeclarator?\n        (this: VisitorContext, path: NodePath<estree.VariableDeclarator>):\n            void|boolean;\n    visitThisExpression?\n        (this: VisitorContext, path: NodePath<estree.ThisExpression>):\n            void|boolean;\n    visitArrayExpression?\n        (this: VisitorContext, path: NodePath<estree.ArrayExpression>):\n            void|boolean;\n    visitObjectExpression?\n        (this: VisitorContext, path: NodePath<estree.ObjectExpression>):\n            void|boolean;\n    visitProperty?\n        (this: VisitorContext, path: NodePath<estree.Property>): void|boolean;\n    visitFunctionExpression?\n        (this: VisitorContext, path: NodePath<estree.FunctionExpression>):\n            void|boolean;\n    visitSequenceExpression?\n        (this: VisitorContext, path: NodePath<estree.SequenceExpression>):\n            void|boolean;\n    visitUnaryExpression?\n        (this: VisitorContext, path: NodePath<estree.UnaryExpression>):\n            void|boolean;\n    visitBinaryExpression?\n        (this: VisitorContext, path: NodePath<estree.BinaryExpression>):\n            void|boolean;\n    visitAssignmentExpression?\n        (this: VisitorContext, path: NodePath<estree.AssignmentExpression>):\n            void|boolean;\n    visitUpdateExpression?\n        (this: VisitorContext, path: NodePath<estree.UpdateExpression>):\n            void|boolean;\n    visitLogicalExpression?\n        (this: VisitorContext, path: NodePath<estree.LogicalExpression>):\n            void|boolean;\n    visitConditionalExpression?\n        (this: VisitorContext, path: NodePath<estree.ConditionalExpression>):\n            void|boolean;\n    visitSimpleCallExpression?\n        (this: VisitorContext, path: NodePath<estree.SimpleCallExpression>):\n            void|boolean;\n    visitNewExpression?\n        (this: VisitorContext, path: NodePath<estree.NewExpression>):\n            void|boolean;\n    visitMemberExpression?\n        (this: VisitorContext, path: NodePath<estree.MemberExpression>):\n            void|boolean;\n    visitSwitchCase?\n        (this: VisitorContext, path: NodePath<estree.SwitchCase>): void|boolean;\n    visitCatchClause?(this: VisitorContext, path: NodePath<estree.CatchClause>):\n        void|boolean;\n    visitIdentifier?\n        (this: VisitorContext, path: NodePath<estree.Identifier>): void|boolean;\n    visitLiteral?(this: VisitorContext, path: NodePath<estree.SimpleLiteral>):\n        void|boolean;\n    visitForOfStatement?\n        (this: VisitorContext, path: NodePath<estree.ForOfStatement>):\n            void|boolean;\n    visitSuper?\n        (this: VisitorContext, path: NodePath<estree.Super>): void|boolean;\n    visitSpreadElement?\n        (this: VisitorContext, path: NodePath<estree.SpreadElement>):\n            void|boolean;\n    visitArrowFunctionExpression?\n        (this: VisitorContext, path: NodePath<estree.ArrowFunctionExpression>):\n            void|boolean;\n    visitYieldExpression?\n        (this: VisitorContext, path: NodePath<estree.YieldExpression>):\n            void|boolean;\n    visitTemplateLiteral?\n        (this: VisitorContext, path: NodePath<estree.TemplateLiteral>):\n            void|boolean;\n    visitTaggedTemplateExpression?\n        (this: VisitorContext, path: NodePath<estree.TaggedTemplateExpression>):\n            void|boolean;\n    visitTemplateElement?\n        (this: VisitorContext, path: NodePath<estree.TemplateElement>):\n            void|boolean;\n    visitAssignmentProperty?\n        (this: VisitorContext, path: NodePath<estree.AssignmentProperty>):\n            void|boolean;\n    visitObjectPattern?\n        (this: VisitorContext, path: NodePath<estree.ObjectPattern>):\n            void|boolean;\n    visitArrayPattern?\n        (this: VisitorContext, path: NodePath<estree.ArrayPattern>):\n            void|boolean;\n    visitRestElement?(this: VisitorContext, path: NodePath<estree.RestElement>):\n        void|boolean;\n    visitAssignmentPattern?\n        (this: VisitorContext, path: NodePath<estree.AssignmentPattern>):\n            void|boolean;\n    visitClassBody?\n        (this: VisitorContext, path: NodePath<estree.ClassBody>): void|boolean;\n    visitMethodDefinition?\n        (this: VisitorContext, path: NodePath<estree.MethodDefinition>):\n            void|boolean;\n    visitClassDeclaration?\n        (this: VisitorContext, path: NodePath<estree.ClassDeclaration>):\n            void|boolean;\n    visitClassExpression?\n        (this: VisitorContext, path: NodePath<estree.ClassExpression>):\n            void|boolean;\n    visitMetaProperty?\n        (this: VisitorContext, path: NodePath<estree.MetaProperty>):\n            void|boolean;\n    visitImportDeclaration?\n        (this: VisitorContext, path: NodePath<estree.ImportDeclaration>):\n            void|boolean;\n    visitImportSpecifier?\n        (this: VisitorContext, path: NodePath<estree.ImportSpecifier>):\n            void|boolean;\n    visitImportDefaultSpecifier?\n        (this: VisitorContext, path: NodePath<estree.ImportDefaultSpecifier>):\n            void|boolean;\n    visitImportNamespaceSpecifier?\n        (this: VisitorContext, path: NodePath<estree.ImportNamespaceSpecifier>):\n            void|boolean;\n    visitExportNamedDeclaration?\n        (this: VisitorContext, path: NodePath<estree.ExportNamedDeclaration>):\n            void|boolean;\n    visitExportSpecifier?\n        (this: VisitorContext, path: NodePath<estree.ExportSpecifier>):\n            void|boolean;\n    visitExportDefaultDeclaration?\n        (this: VisitorContext, path: NodePath<estree.ExportDefaultDeclaration>):\n            void|boolean;\n    visitExportAllDeclaration?\n        (this: VisitorContext, path: NodePath<estree.ExportAllDeclaration>):\n            void|boolean;\n    visitAwaitExpression?\n        (this: VisitorContext, path: NodePath<estree.AwaitExpression>):\n            void|boolean;\n  }\n\n  export function visit(node: Node, visitor: Visitor): void;\n}\n", "id": "polymer-tools:packages/modulizer/custom_typings/ast-types.d.ts:874689d4-a256-40e3-b96e-6dc595031ee8"}
{"path": "src/lualib/StringAccess.ts", "project_name": "TypeScriptToLua", "text": "export function __TS__StringAccess(this: string, index: number) {\n    if (index >= 0 && index < this.length) {\n        return string.sub(this, index + 1, index + 1);\n    }\n}\n", "id": "TypeScriptToLua:src/lualib/StringAccess.ts:f2a1dd2a-7594-4b68-b4dd-8dc9514b2e62"}
{"path": "test/unit/switch.spec.ts", "project_name": "TypeScriptToLua", "text": "import * as util from \"../util\";\n\ntest.each([0, 1, 2, 3])(\"switch (%p)\", inp => {\n    util.testFunction`\n        let result: number = -1;\n\n        switch (<number>${inp}) {\n            case 0:\n                result = 0;\n                break;\n            case 1:\n                result = 1;\n                break;\n            case 2:\n                result = 2;\n                break;\n        }\n        return result;\n    `.expectToMatchJsResult();\n});\n\ntest.each([0, 1, 2, 3])(\"switchdefault (%p)\", inp => {\n    util.testFunction`\n        let result: number = -1;\n\n        switch (<number>${inp}) {\n            case 0:\n                result = 0;\n                break;\n            case 1:\n                result = 1;\n                break;\n            case 2:\n                result = 2;\n                break;\n            default:\n                result = -2;\n                break;\n        }\n        return result;\n    `.expectToMatchJsResult();\n});\n\ntest.each([0, 0, 2, 3, 4, 5, 7])(\"switchfallthrough (%p)\", inp => {\n    util.testFunction`\n        let result: number = -1;\n\n        switch (<number>${inp}) {\n            case 0:\n                result = 0;\n            case 1:\n                result = 1;\n                break;\n            case 2:\n                result = 2;\n            case 3:\n            case 4:\n                result = 4;\n                break;\n            case 5:\n                result = 5;\n            case 6:\n                result += 10;\n                break;\n            case 7:\n                result = 7;\n            default:\n                result = -2;\n                break;\n        }\n\n        return result;\n    `.expectToMatchJsResult();\n});\n\ntest.each([0, 1, 2, 3])(\"nestedSwitch (%p)\", inp => {\n    util.testFunction`\n        let result: number = -1;\n\n        switch (${inp} as number) {\n            case 0:\n                result = 0;\n                break;\n            case 1:\n                switch(${inp} as number) {\n                    case 0:\n                        result = 0;\n                        break;\n                    case 1:\n                        result = 1;\n                        break;\n                    default:\n                        result = -3;\n                        break;\n                }\n                break;\n            case 2:\n                result = 2;\n                break;\n            default:\n                result = -2;\n                break;\n        }\n        return result;\n    `.expectToMatchJsResult();\n});\n\ntest(\"switch cases scope\", () => {\n    util.testFunction`\n        switch (0 as number) {\n            case 0:\n                let foo: number | undefined = 1;\n            case 1:\n                foo = 2;\n            case 2:\n                return foo;\n        }\n    `.expectToMatchJsResult();\n});\n\ntest(\"variable in nested scope does not interfere with case scope\", () => {\n    util.testFunction`\n        let foo: number = 0;\n        switch (foo) {\n            case 0: {\n                let foo = 1;\n            }\n\n            case 1:\n                return foo;\n        }\n    `.expectToMatchJsResult();\n});\n\ntest(\"switch using variable re-declared in cases\", () => {\n    util.testFunction`\n        let foo: number = 0;\n        switch (foo) {\n            case 0:\n                let foo = true;\n            case 1:\n                return foo;\n        }\n    `.expectToMatchJsResult();\n});\n\ntest.each([0, 1, 2])(\"switch with block statement scope (%p)\", inp => {\n    util.testFunction`\n        let result: number = -1;\n\n        switch (<number>${inp}) {\n            case 0: {\n                let x = 0;\n                result = 0;\n                break;\n            }\n            case 1: {\n                let x = 1;\n                result = x;\n            }\n            case 2: {\n                let x = 2;\n                result = x;\n                break;\n            }\n        }\n        return result;\n    `.expectToMatchJsResult();\n});\n\ntest.each([0, 1, 2, 3])(\"switchReturn (%p)\", inp => {\n    util.testFunction`\n        switch (<number>${inp}) {\n            case 0:\n                return 0;\n                break;\n            case 1:\n                return 1;\n            case 2:\n                return 2;\n                break;\n        }\n\n        return -1;\n    `.expectToMatchJsResult();\n});\n\ntest.each([0, 1, 2, 3])(\"switchWithBrackets (%p)\", inp => {\n    util.testFunction`\n        let result: number = -1;\n\n        switch (<number>${inp}) {\n            case 0: {\n                result = 0;\n                break;\n            }\n            case 1: {\n                result = 1;\n                break;\n            }\n            case 2: {\n                result = 2;\n                break;\n            }\n        }\n        return result;\n    `.expectToMatchJsResult();\n});\n\ntest.each([0, 1, 2, 3, 4])(\"switchWithBracketsBreakInConditional (%p)\", inp => {\n    util.testFunction`\n        let result: number = -1;\n\n        switch (<number>${inp}) {\n            case 0: {\n                result = 0;\n                break;\n            }\n            case 1: {\n                result = 1;\n\n                if (result == 1) break;\n            }\n            case 2: {\n                result = 2;\n\n                if (result != 2) break;\n            }\n            case 3: {\n                result = 3;\n                break;\n            }\n        }\n        return result;\n    `.expectToMatchJsResult();\n});\n\ntest.each([0, 1, 2, 3])(\"switchWithBracketsBreakInInternalLoop (%p)\", inp => {\n    util.testFunction`\n        let result: number = -1;\n\n        switch (${inp} as number) {\n            case 0: {\n                result = 0;\n\n                for (let i = 0; i < 5; i++) {\n                    result++;\n\n                    if (i >= 2) {\n                        break;\n                    }\n                }\n            }\n            case 1: {\n                result++;\n                break;\n            }\n            case 2: {\n                result = 2;\n                break;\n            }\n        }\n        return result;\n    `.expectToMatchJsResult();\n});\n\ntest(\"switch executes only one clause\", () => {\n    util.testFunction`\n        let result: number = -1;\n        switch (2 as number) {\n            case 0: {\n                result = 200;\n                break;\n            }\n\n            case 1: {\n                result = 100;\n                break;\n            }\n\n            case 2: {\n                result = 1;\n                break;\n            }\n        }\n        return result;\n    `.expectToMatchJsResult();\n});\n\n// https://github.com/TypeScriptToLua/TypeScriptToLua/issues/967\ntest(\"switch default case not last - first\", () => {\n    util.testFunction`\n        switch (3 as number) {\n            default:\n                return \"wrong\";\n            case 3:\n                return \"right\";\n        }\n    `.expectToMatchJsResult();\n});\n\ntest(\"switch default case not last - second\", () => {\n    util.testFunction`\n        switch (3 as number) {\n            case 4:\n                return \"also wrong\";\n            default:\n                return \"wrong\";\n            case 3:\n                return \"right\";\n        }\n    `.expectToMatchJsResult();\n});\n\ntest(\"switch default case only\", () => {\n    util.testFunction`\n        let out = 0;\n        switch (4 as number) {\n            default:\n                out = 1\n        }\n        return out;\n    `.expectToMatchJsResult();\n});\n\ntest(\"switch fallthrough enters default\", () => {\n    util.testFunction`\n        const out = [];\n        switch (3 as number) {\n            case 3:\n                out.push(\"3\");\n            default:\n                out.push(\"default\");\n        }\n        return out;\n    `.expectToMatchJsResult();\n});\n\ntest(\"switch fallthrough does not enter earlier default\", () => {\n    util.testFunction`\n        const out = [];\n        switch (3 as number) {\n            default:\n                out.push(\"default\");\n            case 3:\n                out.push(\"3\");\n        }\n        return out;\n    `.expectToMatchJsResult();\n});\n\ntest(\"switch fallthrough stops after default\", () => {\n    util.testFunction`\n        const out = [];\n        switch (4 as number) {\n            default:\n                out.push(\"default\");\n            case 3:\n                out.push(\"3\");\n        }\n        return out;\n    `.expectToMatchJsResult();\n});\n\ntest.each([0, 1])(\"switch empty fallthrough to default (%p)\", inp => {\n    util.testFunction`\n        const out = [];\n        switch (${inp} as number) {\n            case 1:\n            default:\n                out.push(\"default\");\n\n        }\n        return out;\n    `\n        .expectLuaToMatchSnapshot()\n        .expectToMatchJsResult();\n});\n\ntest(\"switch does not pollute parent scope\", () => {\n    util.testFunction`\n        let x: number = 0;\n        let y = 1;\n        switch (x) {\n            case 0:\n                let y = 2;\n        }\n        return y;\n    `.expectToMatchJsResult();\n});\n\ntest.each([0, 1, 2, 3, 4])(\"switch handles side-effects (%p)\", inp => {\n    util.testFunction`\n        const out = [];\n\n        let y = 0;\n        function foo() {\n            return y++;\n        }\n\n        let x = ${inp} as number;\n        switch (x) {\n            case foo():\n                out.push(1);\n            case foo():\n                out.push(2);\n            case foo():\n                out.push(3);\n            default:\n                out.push(\"default\");\n            case foo():\n        }\n\n        out.push(y);\n        return out;\n    `.expectToMatchJsResult();\n});\n\ntest.each([1, 2])(\"switch handles side-effects with empty fallthrough (%p)\", inp => {\n    util.testFunction`\n        const out = [];\n\n        let y = 0;\n        function foo() {\n            return y++;\n        }\n\n        let x = 0 as number;\n        switch (x) {\n            // empty fallthrough 1 or many times\n            ${new Array(inp).fill(\"case foo():\").join(\"\\n\")}\n            default:\n                out.push(\"default\");\n\n        }\n\n        out.push(y);\n        return out;\n    `.expectToMatchJsResult();\n});\n\ntest.each([1, 2])(\"switch handles side-effects with empty fallthrough (preceding clause) (%p)\", inp => {\n    util.testFunction`\n        const out = [];\n\n        let y = 0;\n        function foo() {\n            return y++;\n        }\n\n        let x = 0 as number;\n        switch (x) {\n            case 1:\n                out.push(1);\n            // empty fallthrough 1 or many times\n            ${new Array(inp).fill(\"case foo():\").join(\"\\n\")}\n            default:\n                out.push(\"default\");\n\n        }\n\n        out.push(y);\n        return out;\n    `.expectToMatchJsResult();\n});\n\ntest.each([0, 1, 2, 3, 4])(\"switch handles async side-effects (%p)\", inp => {\n    util.testFunction`\n        (async () => {\n            const out = [];\n\n            let y = 0;\n            async function foo() {\n                return new Promise<number>((resolve) => y++ && resolve(0));\n            }\n\n            let x = ${inp} as number;\n            switch (x) {\n                case await foo():\n                    out.push(1);\n                case await foo():\n                    out.push(2);\n                case await foo():\n                    out.push(3);\n                default:\n                    out.push(\"default\");\n                case await foo():\n            }\n\n            out.push(y);\n            return out;\n        })();\n    `.expectToMatchJsResult();\n});\n\nconst optimalOutput = (c: number) => util.testFunction`\n    let x: number = 0;\n    const out = [];\n    switch (${c} as number) {\n        case 0:\n        case 1:\n        case 2:\n            out.push(\"0,1,2\");\n            break;\n        default:\n            x++;\n            out.push(\"default = \" + x);\n        case 3: {\n            out.push(\"3\");\n            break;\n        }\n        case 4:\n    }\n    out.push(x.toString());\n    return out;\n`;\n\ntest(\"switch produces optimal output\", () => {\n    optimalOutput(0).expectLuaToMatchSnapshot();\n});\n\ntest.each([0, 1, 2, 3, 4, 5])(\"switch produces valid optimal output (%p)\", inp => {\n    optimalOutput(inp).expectToMatchJsResult();\n});\n\ndescribe(\"switch hoisting\", () => {\n    test(\"hoisting between cases\", () => {\n        util.testFunction`\n            let x = 1;\n            let result = \"\";\n            switch (x) {\n                case 1:\n                    result = hoisted();\n                    break;\n                case 2:\n                    function hoisted() {\n                        return \"hoisted\";\n                    }\n                    break;\n            }\n            return result;\n        `.expectToMatchJsResult();\n    });\n\n    test(\"indirect hoisting between cases\", () => {\n        util.testFunction`\n            let x = 1;\n            let result = \"\";\n            switch (x) {\n                case 1:\n                    function callHoisted() {\n                        return hoisted();\n                    }\n                    result = callHoisted();\n                    break;\n                case 2:\n                    function hoisted() {\n                        return \"hoisted\";\n                    }\n                    break;\n            }\n            return result;\n        `.expectToMatchJsResult();\n    });\n\n    test(\"hoisting in case expression\", () => {\n        util.testFunction`\n            let x = 1;\n            let result = \"\";\n            switch (x) {\n                case hoisted():\n                    result = \"hoisted\";\n                    break;\n                case 2:\n                    function hoisted() {\n                        return 1;\n                    }\n                    break;\n            }\n            return result;\n        `.expectToMatchJsResult();\n    });\n\n    test(\"hoisting from default clause\", () => {\n        util.testFunction`\n            let x = 1;\n            let result = \"\";\n            switch (x) {\n                case 1:\n                    result = hoisted();\n                    break;\n                default:\n                    function hoisted() {\n                        return \"hoisted\";\n                    }\n                    break;\n            }\n            return result;\n        `.expectToMatchJsResult();\n    });\n\n    test(\"hoisting from default clause is not duplicated when falling through\", () => {\n        util.testFunction`\n            let x = 1;\n            let result = \"\";\n            switch (x) {\n                case 1:\n                    result = hoisted();\n                    break;\n                case 2:\n                    result = \"2\";\n                default:\n                    function hoisted() {\n                        return \"hoisted\";\n                    }\n                    result = \"default\";\n                case 3:\n                    result = \"3\";\n                }\n            return result;\n        `\n            .expectToMatchJsResult()\n            .expectLuaToMatchSnapshot();\n    });\n\n    test(\"hoisting from fallthrough clause after default is not duplicated\", () => {\n        util.testFunction`\n            let x = 1;\n            let result = \"\";\n            switch (x) {\n                case 1:\n                    result = hoisted();\n                    break;\n                case 2:\n                    result = \"2\";\n                default:\n                    result = \"default\";\n                case 3:\n                    function hoisted() {\n                        return \"hoisted\";\n                    }\n                    result = \"3\";\n                }\n            return result;\n        `\n            .expectToMatchJsResult()\n            .expectLuaToMatchSnapshot();\n    });\n\n    test(\"hoisting in a solo default clause\", () => {\n        util.testFunction`\n            let x = 1;\n            let result = \"\";\n            switch (x) {\n                default:\n                    result = hoisted();\n                    function hoisted() {\n                        return \"hoisted\";\n                    }\n            }\n            return result;\n        `.expectToMatchJsResult();\n    });\n});\n", "id": "TypeScriptToLua:test/unit/switch.spec.ts:5e95b751-490f-412d-9bbf-6a954b15518f"}
{"path": "packages/nerv-utils/src/env.ts", "project_name": "nerv", "text": "// tslint:disable-next-line\nexport var global = (function() {\n  let local\n\n  if (typeof global !== 'undefined') {\n    local = global\n  } else if (typeof self !== 'undefined') {\n    local = self\n  } else {\n    try {\n      // tslint:disable-next-line:function-constructor\n      local = Function('return this')()\n    } catch (e) {\n      throw new Error('global object is unavailable in this environment')\n    }\n  }\n  return local\n})()\n\nexport const isBrowser = typeof window !== 'undefined'\n\n// tslint:disable-next-line:no-empty\nfunction noop () {}\n\nconst fakeDoc: any = {\n  createElement: noop,\n  createElementNS: noop,\n  createTextNode: noop\n}\n\nexport const doc: Document = isBrowser ? document : fakeDoc\n\nexport const UA = isBrowser && window.navigator.userAgent.toLowerCase()\n\nexport const isMacSafari = isBrowser && UA && window.navigator.platform &&\n  /mac/i.test(window.navigator.platform) && /^((?!chrome|android).)*safari/i.test(UA)\n\nexport const isTaro = isBrowser && !document.scripts\n\nexport const isIE9 = UA && UA.indexOf('msie 9.0') > 0\n\nexport const isiOS = (UA && /iphone|ipad|ipod|ios/.test(UA))\n", "id": "nerv:packages/nerv-utils/src/env.ts:09f180a2-7ce4-485f-86bb-0e2d8095933c"}
{"path": "packages/core/src/testing/utils/mineBlock.ts", "project_name": "useDApp", "text": "import { MockProvider } from '@ethereum-waffle/provider'\nimport { AddressZero } from '@ethersproject/constants'\nimport { getAdminWallet } from './getAdminWallet'\n\nexport const mineBlock = async (provider: MockProvider) => {\n  const wallet = await getAdminWallet(provider)\n  const tx = await wallet.sendTransaction({ to: AddressZero, value: 0 })\n  await tx.wait()\n}\n", "id": "useDApp:packages/core/src/testing/utils/mineBlock.ts:c39335fb-f33b-4b12-8f27-75b4c91997cb"}
{"path": "src/components/profileHeader/index.ts", "project_name": "react-social-network", "text": "import ProfileHeaderComponent from './ProfileHeaderComponent'\nexport default ProfileHeaderComponent\n", "id": "react-social-network:src/components/profileHeader/index.ts:8e6b93f8-d057-4fc7-bafa-9f614e820428"}
{"path": "examples/basic-with-dependency-injection/src/modules/user/resolvers/user.ts", "project_name": "graphql-modules", "text": "export default {\n  User: {\n    id: (user: any) => user._id,\n    username: (user: any) => user.username,\n  },\n};\n", "id": "graphql-modules:examples/basic-with-dependency-injection/src/modules/user/resolvers/user.ts:36223123-c129-4273-b97f-7f8a5885d2d4"}
{"path": "src/scope/network/exceptions/ssh-invalid-response.ts", "project_name": "bit", "text": "import AbstractError from '../../../error/abstract-error';\n\nexport default class SSHInvalidResponse extends AbstractError {\n  response: string;\n  showDoctorMessage: boolean;\n\n  constructor(response: string) {\n    super();\n    this.response = response;\n    this.showDoctorMessage = true;\n  }\n}\n", "id": "bit:src/scope/network/exceptions/ssh-invalid-response.ts:9e8c36db-a720-4ab0-8f6b-2a8d9290001e"}
{"path": "types/stats-lite/index.d.ts", "project_name": "DefinitelyTyped", "text": "// Type definitions for stats-lite 2.2\n// Project: https://github.com/brycebaril/node-stats-lite\n// Definitions by: <NAME> <https://github.com/sandersn>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\nexport function sum(ns: number[]): number;\nexport function mean(ns: number[]): number;\nexport function median(ns: number[]): number;\nexport function mode(ns: number[]): number;\nexport function variance(ns: number[]): number;\nexport function stdev(ns: number[]): number;\nexport function sampleStdev(ns: number[]): number;\nexport function percentile(ns: number[], percentile: number): number;\nexport function histogram(ns: number[], percentile: number): number;\n", "id": "DefinitelyTyped:types/stats-lite/index.d.ts:1cfa15cc-f946-4227-961b-e6c6d2c6b687"}
{"path": "packages/react/src/toggle/index.test.tsx", "project_name": "clarity", "text": "import * as React from 'react';\nimport { mount, shallow } from 'enzyme';\nimport { CdsToggle, CdsToggleGroup } from './index';\nimport { CdsControlMessage } from '../forms/index';\n\ndescribe('CdsToggle', () => {\n  it('renders', () => {\n    const wrapper = shallow(\n      <div>\n        <CdsToggleGroup>\n          <label>A toggle group</label>\n          <CdsToggle>\n            <label>Toggle 1</label>\n            <input type=\"checkbox\" />\n          </CdsToggle>\n          <CdsToggle>\n            <label>Toggle 2</label>\n            <input type=\"checkbox\" />\n          </CdsToggle>\n          <CdsControlMessage>group message text</CdsControlMessage>\n        </CdsToggleGroup>\n\n        <CdsToggle>\n          <label>Toggle</label>\n          <input type=\"checkbox\" />\n          <CdsControlMessage>message text</CdsControlMessage>\n        </CdsToggle>\n      </div>\n    );\n    const renderedComponent = wrapper.find(CdsToggle);\n    expect(renderedComponent.at(0).html()).toMatch(/Toggle 1/);\n    expect(renderedComponent.at(1).html()).toMatch(/Toggle 2/);\n    expect(renderedComponent.at(2).html()).toMatch(/Toggle/);\n  });\n\n  it('snapshot', () => {\n    const wrapper = mount(\n      <div>\n        <CdsToggleGroup>\n          <label>A toggle group</label>\n          <CdsToggle>\n            <label>Toggle 1</label>\n            <input type=\"checkbox\" />\n          </CdsToggle>\n          <CdsToggle>\n            <label>Toggle 2</label>\n            <input type=\"checkbox\" />\n          </CdsToggle>\n          <CdsControlMessage>group message text</CdsControlMessage>\n        </CdsToggleGroup>\n\n        <CdsToggle>\n          <label>Toggle</label>\n          <input type=\"checkbox\" />\n          <CdsControlMessage>message text</CdsControlMessage>\n        </CdsToggle>\n      </div>\n    );\n    expect(wrapper).toMatchSnapshot();\n  });\n});\n", "id": "clarity:packages/react/src/toggle/index.test.tsx:788202c0-5c83-481f-af39-5310b2829505"}
{"path": "src/utils/math-eval.ts", "project_name": "darkreader", "text": "// evalMath is a function that's able to evaluates a mathematical expression and return it's ouput.\n//\n// Internally it uses the Shunting Yard algoritm. First it produces a reverse polish notation(RPN) stack.\n// Example: 1 + 2 * 3 -> [1, 2, 3, *, +] which with parentheses means 1 (2 3 *) +\n//\n// Then it evaluates the RPN stack and returns the output.\nexport function evalMath(expression: string): number {\n    // Stack where operators & numbers are stored in RPN.\n    const rpnStack: string[] = [];\n    // The working stack where new tokens are pushed.\n    const workingStack: string[] = [];\n\n    let lastToken: string;\n    // Iterate over the expression.\n    for (let i = 0, len = expression.length; i < len; i++) {\n        const token = expression[i];\n\n        // Skip if the token is empty or a whitespace.\n        if (!token || token === ' ') {\n            continue;\n        }\n\n        // Is the token a operator?\n        if (operators.has(token)) {\n            const op = operators.get(token);\n\n            // Go trough the workingstack and determine it's place in the workingStack\n            while (workingStack.length) {\n                const currentOp = operators.get(workingStack[0]);\n                if (!currentOp) {\n                    break;\n                }\n\n                // Is the current operation equal or less than the current operation?\n                // Then move that operation to the rpnStack.\n                if (op.lessOrEqualThan(currentOp)) {\n                    rpnStack.push(workingStack.shift());\n                } else {\n                    break;\n                }\n            }\n            // Add the operation to the workingStack.\n            workingStack.unshift(token);\n        // Otherwise was the last token a operator?\n        } else if (!lastToken || operators.has(lastToken)) {\n            rpnStack.push(token);\n        // Otherwise just append the result to the last token(e.g. multiple digits numbers).\n        } else {\n            rpnStack[rpnStack.length - 1] += token;\n        }\n        // Set the last token.\n        lastToken = token;\n    }\n\n    // Push the working stack on top of the rpnStack.\n    rpnStack.push(...workingStack);\n\n    // Now evaluate the rpnStack.\n    const stack: number[] = [];\n    for (let i = 0, len = rpnStack.length; i < len; i++) {\n        const op = operators.get(rpnStack[i]);\n        if (op) {\n            // Get the arguments of for the operation(first two in the stack).\n            const args = stack.splice(0, 2);\n            // Excute it, because of reverse notation we first pass second item then the first item.\n            stack.push(op.exec(args[1], args[0]));\n        } else {\n            // Add the number to the stack.\n            stack.unshift(parseFloat(rpnStack[i]));\n        }\n    }\n\n    return stack[0];\n}\n\n// Operator class  defines a operator that can be parsed & evaluated by evalMath.\nclass Operator {\n    private precendce: number;\n    private execMethod: (left: number, right: number) => number;\n\n    constructor(precedence: number, method: (left: number, right: number) => number) {\n        this.precendce = precedence;\n        this.execMethod = method;\n    }\n\n    public exec(left: number, right: number): number {\n        return this.execMethod(left, right);\n    }\n\n    public lessOrEqualThan(op: Operator) {\n        return this.precendce <= op.precendce;\n    }\n}\n\nconst operators: Map<string, Operator> = new Map([\n    ['+', new Operator(1, (left: number, right: number): number => left + right)],\n    ['-', new Operator(1, (left: number, right: number): number => left - right)],\n    ['*', new Operator(2, (left: number, right: number): number => left * right)],\n    ['/', new Operator(2, (left: number, right: number): number => left / right)],\n]);\n", "id": "darkreader:src/utils/math-eval.ts:e208e15f-439c-4c35-b6be-ef52ed89990f"}
{"path": "src/timeout.ts", "project_name": "local-history", "text": "export default class Timeout {\n\n    private startTime;\n    private duration = 0;\n\n    constructor(duration: number) {\n        this.duration = duration;\n        this.startTime = new Date();\n    }\n\n    public isTimedOut() {\n        return this.getDuration() > this.duration;\n    }\n\n    public logDuration(message = '') {\n        console.log(`${message}: ${this.getDuration()}`);\n    }\n\n    private getDuration(): number {\n        return (new Date()).getTime() - this.startTime.getTime();\n    }\n}\n", "id": "local-history:src/timeout.ts:9f874eae-3cf9-4a27-902f-e7bf16bb17ae"}
{"path": "public/app/client/ui/src/components/groups/team_tabs.tsx", "project_name": "envkey", "text": "import React, { useMemo, useCallback } from \"react\";\nimport { OrgComponentProps } from \"@ui_types\";\nimport { Model } from \"@core/types\";\nimport * as g from \"@core/lib/graph\";\nimport * as ui from \"@ui\";\nimport * as styles from \"@styles\";\n\nexport const useTeamTabs = (\n  props: OrgComponentProps<{ orgId: string }>,\n  groupId: string\n) => {\n  const team = props.core.graph[groupId] as Model.Group;\n\n  const basePathTest = useCallback(() => {\n    return team && props.location.pathname.endsWith(team.id);\n  }, [props.location.pathname, team.id]);\n\n  const tabs = [\n    {\n      label: \"Members\",\n      path: \"/members\",\n      permitted: () => true,\n    },\n\n    {\n      label: \"Apps\",\n      path: \"/apps\",\n      permitted: () => true,\n    },\n\n    {\n      label: \"Settings\",\n      path: \"/settings\",\n      permitted: () => true,\n    },\n\n    {\n      path: \"/apps-add\",\n      hidden: true,\n      permitted: () => true,\n    },\n\n    {\n      path: \"/members-add\",\n      hidden: true,\n      permitted: () => true,\n    },\n  ];\n\n  return ui.useTabs(props, {\n    tabs,\n    redirectFromBasePath: true,\n    basePathTest,\n    className: styles.SelectedObjectTabs(),\n  });\n};\n", "id": "envkey:public/app/client/ui/src/components/groups/team_tabs.tsx:9e930130-ca4e-443f-857f-220dbea266f3"}
{"path": "src/style/index.css.d.ts", "project_name": "management_system", "text": "export const loading: string;\n", "id": "management_system:src/style/index.css.d.ts:f87eeb88-54fb-4739-833a-d92857a2d913"}
{"path": "src/cdk/schematics/ng-update/test-cases/misc/method-call-checks.spec.ts", "project_name": "components", "text": "import {resolveBazelPath} from '@angular/cdk/schematics/testing';\nimport {MIGRATION_PATH} from '../../../paths';\nimport {createTestCaseSetup} from '../../../testing';\n\ndescribe('v6 method call checks', () => {\n  it('should properly report invalid method calls', async () => {\n    const {runFixers} = await createTestCaseSetup('migration-v6', MIGRATION_PATH, [\n      resolveBazelPath(__dirname, './method-call-checks_input.ts'),\n    ]);\n\n    const {logOutput} = await runFixers();\n\n    expect(logOutput).toMatch(\n      /@15:5 - Found call to \"FocusMonitor\\.monitor\".*renderer.*has been removed/,\n    );\n    expect(logOutput).toMatch(\n      /@16:5 - Found call to \"FocusMonitor\\.monitor\".*renderer.*has been removed/,\n    );\n  });\n});\n", "id": "components:src/cdk/schematics/ng-update/test-cases/misc/method-call-checks.spec.ts:7680d112-42aa-4dde-95ee-e7ece68c9e09"}
{"path": "src/components/timeline-elements/timeline-card-content/__tests__/timeline-item-content.test.tsx", "project_name": "Timeline", "text": "import { render } from '@testing-library/react';\nimport React from 'react';\nimport Content from '../timeline-card-content';\n\nconst fn = jest.fn();\n\ntest('Test Timeline Item Content', () => {\n  const { getByText } = render(\n    <Content content=\"This is a test\" onShowMore={fn} />,\n  );\n  const contentElement = getByText(/test/i);\n  expect(contentElement).toBeInTheDocument();\n});\n\ntest('Test Timeline Item Content Snapshot', () => {\n  const { getByText } = render(\n    <Content content=\"This is a test\" onShowMore={fn} />,\n  );\n  const contentElement = getByText(/test/i);\n  expect(contentElement).toMatchSnapshot();\n});", "id": "Timeline:src/components/timeline-elements/timeline-card-content/__tests__/timeline-item-content.test.tsx:dc2cc0e6-464b-45e8-9149-791034b0fc56"}
{"path": "demos/Angular/src/ribbon/scrolling/app.component.ts", "project_name": "jQWidgets", "text": "﻿import { Component, ViewChild, ViewEncapsulation } from '@angular/core';\n\nimport { jqxRibbonComponent } from 'jqwidgets-ng/jqxribbon';\n\n@Component({\n    selector: 'app-root',\n    styleUrls: ['./app.component.css'],\n    templateUrl: './app.component.html',\n    encapsulation: ViewEncapsulation.None\n})\n\nexport class AppComponent {\n    @ViewChild('jqxRibbon', { static: false }) jqxRibbon: jqxRibbonComponent;\n\n    checkedNear(event: any): void {\n        if (this.jqxRibbon) {\n            this.jqxRibbon.scrollPosition('near');\n        }\n    }\n\n    checkedFar(event: any): void {\n        if (this.jqxRibbon) {\n            this.jqxRibbon.scrollPosition('far');\n        }\n    }\n\n    checkedBoth(event: any): void {\n        if (this.jqxRibbon) {\n            this.jqxRibbon.scrollPosition('both');\n        }\n    }\n}", "id": "jQWidgets:demos/Angular/src/ribbon/scrolling/app.component.ts:292c0edb-ce34-49ed-9ee2-95060ed042e8"}
{"path": "desktop/app/screens/settings/app.settings.ts", "project_name": "Vorlonjs", "text": "var os = require('os');\nvar ipc = require('ipc');\nvar $ = <JQueryStatic>require('jquery');\nvar app = require('remote').require('app');\n\nimport config = require(\"../../vorlon.config\");\nvar userDataPath = app.getPath('userData');\n\nexport class SettingsPanel {\n\telement: HTMLElement;\n\tvorlonPort: HTMLInputElement;\n\tvorlonProxyPort: HTMLInputElement;\n\tbtnSaveConfig: HTMLElement;\n\tbtnCancelConfig: HTMLElement;\n\tbtnResetConfig: HTMLElement;\n\tvorlonscriptsample: HTMLElement;\n\tcfg : { port: string, proxyPort: string };\n\t\n\tconstructor(element) {\n\t\tvar panel = this;\n\t\tthis.element = element;\n\t\tthis.vorlonPort = <HTMLInputElement>element.querySelector(\"#vorlonPort\");\n\t\tthis.vorlonProxyPort = <HTMLInputElement>element.querySelector(\"#vorlonProxyPort\");\n\t\tthis.btnSaveConfig = <HTMLElement>element.querySelector(\"#btnSaveConfig\");\n\t\tthis.btnCancelConfig = <HTMLElement>element.querySelector(\"#btnCancelConfig\");\n\t\tthis.btnResetConfig = <HTMLElement>element.querySelector(\"#btnResetConfig\");\n\t\tthis.vorlonscriptsample = <HTMLElement>element.querySelector(\"#vorlonscriptsample\");\n\n\t\tthis.loadConfig();\n\n\t\tthis.btnResetConfig.onclick = function() {\n\t\t\tipc.send(\"stopVorlon\");\n\n\t\t\tconfig.resetConfig(userDataPath);\n\n\t\t\tsetTimeout(function() {\n\t\t\t\tipc.send(\"startVorlon\");\n\t\t\t\tpanel.configChanged();\n\t\t\t}, 1000);\n\t\t}\n\n\t\tthis.btnSaveConfig.onclick = function() {\n\t\t\tipc.send(\"stopVorlon\");\n\n\t\t\tpanel.cfg.port = panel.vorlonPort.value;\n\t\t\tpanel.cfg.proxyPort = panel.vorlonProxyPort.value;\n\n\t\t\tconfig.saveConfig(userDataPath, panel.cfg);\n\t\t\tsetTimeout(function() {\n\t\t\t\tipc.send(\"startVorlon\");\n\t\t\t\tpanel.configChanged();\n\t\t\t}, 1000);\n\t\t}\n\n\t\tthis.btnCancelConfig.onclick = function() {\n\t\t\tpanel.loadConfig();\n\t\t}\n\t}\n\n\tconfigChanged() {\n\t\tipc.send(\"configChanged\");\n\t\tthis.loadConfig();\n\t}\n\n\tloadConfig() {\n\t\tconsole.log(\"load config from \" + userDataPath);\n\t\tthis.cfg = config.getConfig(userDataPath);\n\n\t\tthis.vorlonPort.value = this.cfg.port;\n\t\tthis.vorlonProxyPort.value = this.cfg.proxyPort;\n\n\t\t$(\".vorlonscriptsample\").text(\"http://\" + os.hostname() + \":\" + this.cfg.port + \"/vorlon.js\");\n\t}\n\n}\n", "id": "Vorlonjs:desktop/app/screens/settings/app.settings.ts:17343eed-0843-4563-81ab-cd35c721b094"}
{"path": "app/src/pages/Run/RunLog/ConfirmCancelModal.tsx", "project_name": "opentrons", "text": "import * as React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { AlertModal } from '@opentrons/components'\n\nimport { actions as robotActions } from '../../../redux/robot'\nimport { Portal } from '../../../App/portal'\n\nimport type { Dispatch } from '../../../redux/types'\n\nconst HEADING = 'Are you sure you want to cancel this run?'\nconst CANCEL_TEXT = 'cancel run'\nconst BACK_TEXT = 'go back'\n\nexport interface ConfirmCancelModalProps {\n  onClose: () => unknown\n}\n\nexport function ConfirmCancelModal(\n  props: ConfirmCancelModalProps\n): JSX.Element {\n  const { onClose } = props\n  const dispatch = useDispatch<Dispatch>()\n\n  const cancel = (): void => {\n    dispatch(robotActions.cancel())\n    onClose()\n  }\n\n  return (\n    <Portal>\n      <AlertModal\n        heading={HEADING}\n        buttons={[\n          { children: BACK_TEXT, onClick: onClose },\n          { children: CANCEL_TEXT, onClick: cancel },\n        ]}\n        alertOverlay\n      >\n        <p>\n          Doing so will terminate this run, drop any attached tips in the trash\n          container and home your robot.\n        </p>\n        <p>\n          Additionally, any hardware modules used within the protocol will\n          remain active and maintain their current states until deactivated.\n        </p>\n      </AlertModal>\n    </Portal>\n  )\n}\n", "id": "opentrons:app/src/pages/Run/RunLog/ConfirmCancelModal.tsx:23bcf897-2a48-4992-9579-9b32bd7792a9"}
{"path": "client/src/model/state/IScrollPositionState.ts", "project_name": "EPGStation", "text": "export default interface IScrollPositionState {\n    isNeedRestoreHistory: boolean;\n    saveScrollData(data: any): void;\n    getScrollData<T>(): T | null;\n    updateHistoryPosition(): void;\n    emitDoneGetData(): Promise<void>;\n    onDoneGetData(timeout?: number): Promise<void>;\n}\n", "id": "EPGStation:client/src/model/state/IScrollPositionState.ts:c058fce2-7af4-49cd-b567-5406dc4a4820"}
{"path": "themes/lite/src/router/index.ts", "project_name": "blog", "text": "import Vue from 'vue';\nimport Router from 'vue-router';\n\nVue.use(Router);\n\n\nexport const router = new Router({\n  mode: 'hash',\n  routes: [\n    {\n      path: '/',\n      name: 'home-page',\n      component: () => import('@/views/pages/home/HomePage.vue')\n    },\n    {\n      path: '/archives',\n      name: 'archives-page',\n      component: () => import('@/views/pages/archives/ArchivesPage.vue')\n    },\n    {\n      path: '/categories',\n      name: 'categories-page',\n      component: () => import('@/views/pages/categories/CategoriesPage.vue')\n    },\n    {\n      path: '/tags',\n      name: 'tags-page',\n      component: () => import('@/views/pages/tags/TagsPage.vue')\n    },\n    {\n      path: '/related/:type/:slug',\n      name: 'related-posts-page',\n      component: () => import('@/views/pages/related-posts/RelatedPosts.vue')\n    },\n    {\n      path: '/posts/:slug',\n      name: 'post-page',\n      component: () => import('@/views/pages/detailable/create-detailable').then(m => m.createDetailablePage(false))\n    },\n    {\n      path: '/pages/*',\n      name: 'implicit-post-page',\n      component: () => import('@/views/pages/detailable/create-detailable').then(m => m.createDetailablePage(true))\n    },\n    {\n      path: '/404',\n      name: '404',\n      component: () => import('@/views/pages/404/page-404.page.ts')\n    },\n    {\n      path: '/*',\n      redirect: { name: '404' }\n    }\n  ]\n});\n", "id": "blog:themes/lite/src/router/index.ts:282bbb26-d5ba-48b5-9470-f8f4c3828649"}
{"path": "src/main/kittik-slide/src/animation/Animations.ts", "project_name": "kittik", "text": "import type { FocusObject, FocusOptions } from \"kittik-animation-focus\";\nimport { Focus } from \"kittik-animation-focus\";\nimport type { PrintObject, PrintOptions } from \"kittik-animation-print\";\nimport { Print } from \"kittik-animation-print\";\nimport type { SlideObject, SlideOptions } from \"kittik-animation-slide\";\nimport { Slide } from \"kittik-animation-slide\";\nimport type { Animation } from \"kittik-animation-basic\";\n\nexport type AnimationType = \"Focus\" | \"Print\" | \"Slide\";\nexport type AnimationOptions<T extends AnimationType> = TypesMap[T][\"options\"];\nexport type AnimationObject<T extends AnimationType> = TypesMap[T][\"object\"];\n\nexport const ANIMATIONS = new Map<AnimationType, typeof Animation>([\n  [\"Focus\", Focus],\n  [\"Print\", Print],\n  [\"Slide\", Slide],\n]);\n\ninterface TypesMap {\n  Focus: { options: FocusOptions; object: FocusObject };\n  Print: { options: PrintOptions; object: PrintObject };\n  Slide: { options: SlideOptions; object: SlideObject };\n}\n", "id": "kittik:src/main/kittik-slide/src/animation/Animations.ts:c169bc1c-8fc0-4fd4-8785-2868bd56cd65"}
{"path": "packages/nornj-react/src/extension/antd/grid/index.d.ts", "project_name": "nornj", "text": "import Grid from 'antd/lib/grid';\nexport default Grid;\n", "id": "nornj:packages/nornj-react/src/extension/antd/grid/index.d.ts:9762ad7d-2133-4dea-982f-d8d2115fdbc8"}
{"path": "test/test.ts", "project_name": "av-ts", "text": "import './index'\nimport './decorators'\nimport './functions'\nimport './prop'\nimport './spec'\n", "id": "av-ts:test/test.ts:bc299081-73aa-46de-8b33-ea4d6d7ab06f"}
{"path": "packages/crusher-shared/types/response/userInfoResponse.ts", "project_name": "crusher", "text": "import { iUser } from \"../db/iUser\";\n\nexport interface iUserInfoResponse extends iUser {\n\tname: string;\n\tuser_meta: any;\n}\n", "id": "crusher:packages/crusher-shared/types/response/userInfoResponse.ts:7e9dfe86-3fa8-4c74-bf6a-f8d522d0cc8a"}
{"path": "src/consumer/component/dependencies/files-dependency-builder/detectives/detective-sass/index.spec.ts", "project_name": "bit", "text": "import assert from 'assert';\n\nimport detective from './';\n\ndescribe('detective-sass', function () {\n  function test(src, deps, opts?: any) {\n    // @ts-ignore\n    assert.deepEqual(detective(src, opts), deps);\n  }\n\n  describe('throws', function () {\n    it('does not throw for empty files', function () {\n      assert.doesNotThrow(function () {\n        detective('');\n      });\n    });\n\n    it('throws if the given content is not a string', function () {\n      assert.throws(function () {\n        detective(function () {});\n      });\n    });\n\n    it('throws if called with no arguments', function () {\n      assert.throws(function () {\n        // @ts-ignore\n        detective();\n      });\n    });\n\n    it.skip('throws on broken syntax', function () {\n      assert.throws(function () {\n        detective('@');\n      });\n    });\n  });\n\n  it('dangles the parsed AST', function () {\n    detective('@import _foo');\n    // @ts-ignore\n    assert.ok(detective.ast);\n  });\n\n  describe('sass', function () {\n    it('returns the dependencies of the given .sass file content', function () {\n      test('@import _foo', ['_foo']);\n      test('@import        _foo', ['_foo']);\n      test('@import reset', ['reset']);\n    });\n  });\n\n  describe('use keyword', function () {\n    it('returns the dependencies of the given .sass file content', function () {\n      test('@use _foo', ['_foo']);\n      test('@use        _foo', ['_foo']);\n      test('@use reset', ['reset']);\n    });\n  });\n\n  describe('use as syntax', function () {\n    it('returns the dependencies of the given .sass file content', function () {\n      test('@use \"foo\" as f', ['foo']);\n      test('@use \"_foo\" as *', ['_foo']);\n    });\n  });\n\n  describe('forward keyword', function () {\n    it('returns the dependencies of the given .sass file content', function () {\n      test('@forward _foo', ['_foo']);\n      test('@forward        _foo', ['_foo']);\n      test('@forward reset', ['reset']);\n    });\n  });\n\n  describe('use syntax with colon', function () {\n    it('should return only the package name (the part before the colon)', function () {\n      test('@use \"pkg:math\"', ['pkg']);\n    });\n    it('should return an empty array when it is a built-in module', function () {\n      test('@use \"sass:math\"', []);\n    });\n  });\n});\n", "id": "bit:src/consumer/component/dependencies/files-dependency-builder/detectives/detective-sass/index.spec.ts:b3e787bd-f270-4926-a5e9-2d10261ea734"}
{"path": "src/js/Enumerations/SearchPageDirection.ts", "project_name": "ews-javascript-api", "text": "\r\n/**\r\n * Defines the page direction for mailbox search.\r\n */\r\nexport enum SearchPageDirection {\r\n    \r\n    /**\r\n     * Navigate to next page.\r\n     */\r\n    Next = 0,\r\n    \r\n    /**\r\n     * Navigate to previous page.\r\n     */\r\n    Previous = 1\r\n}", "id": "ews-javascript-api:src/js/Enumerations/SearchPageDirection.ts:e7bb2b64-c60c-4e8b-ac1c-8dc847c99bd1"}
{"path": "types/carbon__pictograms-react/es/scale/index.d.ts", "project_name": "DefinitelyTyped", "text": "export { Scale as default } from \"../../\";\n", "id": "DefinitelyTyped:types/carbon__pictograms-react/es/scale/index.d.ts:7fbeb25d-69bd-48be-9070-0f7fda6b5fed"}
{"path": "types/data-api-client/index.d.ts", "project_name": "DefinitelyTyped", "text": "// Type definitions for data-api-client 1.2\n// Project: https://github.com/jeremydaly/data-api-client\n// Definitions by: <NAME> <https://github.com/idanlo>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\n// Minimum TypeScript Version: 3.8\n\n// This is added because aws-sdk depends on @types/node\n/// <reference types=\"node\" />\n\nimport type { ClientConfiguration, Types } from 'aws-sdk/clients/rdsdataservice';\n\ntype OmittedValues = 'database' | 'resourceArn' | 'secretArn' | 'schema';\n\ninterface iParams {\n    secretArn: string;\n    resourceArn: string;\n    database?: string | undefined;\n    keepAlive?: boolean | undefined;\n    hydrateColumnNames?: boolean | undefined;\n    sslEnabled?: boolean | undefined;\n    options?: ClientConfiguration | undefined;\n    region?: string | undefined;\n    engine?: 'mysql' | 'pg' | undefined;\n    formatOptions?: {\n        deserializeDate?: boolean | undefined;\n        treatAsLocalDate?: boolean | undefined;\n    } | undefined;\n}\n\ninterface Transaction {\n    query(sql: string, params?: [] | unknown): Transaction; // params can be [] or {};\n    query(\n        obj:\n            | {\n                  sql: string;\n                  parameters: [] | unknown;\n                  database?: string | undefined;\n                  hydrateColumnNames?: boolean | undefined;\n              }\n            | ((prevResult: { insertId?: any }) => any),\n    ): Transaction;\n\n    rollback: (error: Error, status: any) => void;\n    commit: () => Promise<void>;\n}\n\ninterface iDataAPIClient {\n    /* tslint:disable:no-unnecessary-generics */\n    query<T = any>(sql: string, params?: [] | unknown): Promise<iDataAPIQueryResult<T>>; // params can be [] or {};\n    query<T = any>(obj: {\n        sql: string;\n        parameters?: [] | unknown | undefined;\n        transactionId?: string | undefined;\n        database?: string | undefined;\n        hydrateColumnNames?: boolean | undefined;\n    }): Promise<iDataAPIQueryResult<T>>;\n    transaction(): Transaction; // needs to return an interface with\n\n    // promisified versions of the RDSDataService methods\n    batchExecuteStatement: (params: Omit<Types.BatchExecuteStatementRequest, OmittedValues>) => Promise<any>;\n    beginTransaction: () => Promise<Types.BeginTransactionResponse>;\n    commitTransaction: (params: Omit<Types.CommitTransactionRequest, OmittedValues>) => Promise<any>;\n    executeStatement: (params: Omit<Types.ExecuteStatementRequest, OmittedValues>) => Promise<any>;\n    rollbackTransaction: (params: Omit<Types.RollbackTransactionRequest, OmittedValues>) => Promise<any>;\n}\n\ninterface iDataAPIQueryResult<T = any> {\n    records: T[];\n}\n\ndeclare function Client(params: iParams): iDataAPIClient;\n\nexport = Client;\n", "id": "DefinitelyTyped:types/data-api-client/index.d.ts:449d8cf4-f67c-4c58-b635-576e97f62e60"}
{"path": "server/tinylicious/src/routes/ordering/index.ts", "project_name": "FluidFramework", "text": "/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    IDocumentStorage,\n    MongoManager,\n} from \"@fluidframework/server-services-core\";\nimport { Router } from \"express\";\nimport { Provider } from \"nconf\";\nimport * as deltas from \"./deltas\";\nimport * as documents from \"./documents\";\n\nexport function create(\n    config: Provider,\n    storage: IDocumentStorage,\n    mongoManager: MongoManager,\n): Router {\n    const router: Router = Router();\n    const deltasRoute = deltas.create(config, mongoManager);\n    const documentsRoute = documents.create(storage);\n\n    router.use(\"/deltas\", deltasRoute);\n    router.use(\"/documents\", documentsRoute);\n\n    return router;\n}\n", "id": "FluidFramework:server/tinylicious/src/routes/ordering/index.ts:e2508c72-598b-444d-a339-de177e4c9bc3"}
{"path": "lib/append/index.d.ts", "project_name": "nanoutils", "text": "import { CurriedFunction2 } from '../../misc/types/fn';\n\nexport default function append<T>(): CurriedFunction2<T, T[], T[]>", "id": "nanoutils:lib/append/index.d.ts:965ecf38-0dc6-4d38-9df7-b806107434f8"}
{"path": "tests/cases/compiler/asyncImportNestedYield.ts", "project_name": "TypeScript", "text": "// @lib: esnext\r\nasync function* foo() {\r\n    import((await import(yield \"foo\")).default);\r\n}", "id": "TypeScript:tests/cases/compiler/asyncImportNestedYield.ts:2e0fc252-66fa-4dee-877f-05963ca68e6f"}
{"path": "packages/modal/src/resources/attach-focus-attribute.ts", "project_name": "ux", "text": "import { customAttribute, inject } from \"aurelia-framework\";\n\n@inject(Element)\n@customAttribute('ux-attach-focus')\nexport class AttachFocusAttribute {\n\n  public value: boolean | string;\n\n  constructor(private element: HTMLElement) {}\n\n  public attached() {\n    if (this.value === '' || (this.value && this.value !== 'false')) {\n      this.element.focus();\n    }\n  }\n}\n", "id": "ux:packages/modal/src/resources/attach-focus-attribute.ts:178d93b2-61d6-4ab7-9a9e-daf2078d9943"}
{"path": "src/__tests__/incidentFeed.test.ts", "project_name": "netlify-menubar", "text": "const firstResponse = {\n  items: [\n    { link: 'id=1', content: 'not updated' },\n    { link: 'id=2', content: 'not updated' }\n  ]\n};\nconst secondResponse = {\n  items: [\n    { link: 'id=1', content: 'not updated' },\n    { link: 'id=2', content: 'not updated' },\n    { link: 'id=3', content: 'not updated' }\n  ]\n};\nconst thirdResponse = {\n  items: [\n    { link: 'id=1', content: 'updated' },\n    { link: 'id=2', content: 'not updated' },\n    { link: 'id=3', content: 'not updated' }\n  ]\n};\nconst fourthResponse = {\n  items: [\n    { link: 'id=1', content: 'updated' },\n    { link: 'id=2', content: 'not updated' },\n    { link: 'id=3', content: 'not updated' }\n  ]\n};\n\n// TODO place this in global config somehwere\n// tslint:disable-next-line\nconsole.log = () => {};\n\njest.doMock(\n  'rss-parser',\n  () =>\n    // has to use function keyword to be called with new keyword (ie act as a constructor)\n    /* tslint:disable-line only-arrow-functions */ function() {\n      return {\n        parseURL: jest\n          .fn()\n          .mockReturnValueOnce(firstResponse)\n          .mockReturnValueOnce(secondResponse)\n          .mockReturnValueOnce(thirdResponse)\n          .mockReturnValueOnce(fourthResponse)\n      };\n    }\n);\n\nimport IncidentFeed from '../incidentFeed';\nconst incidentFeed = new IncidentFeed();\n\ndescribe('IncidentFeed', () => {\n  test('before :update is called, :getFeed returns an empty array', () => {\n    expect(incidentFeed.getFeed()).toMatchObject([]);\n    expect(incidentFeed.getFeed()).not.toMatchObject(['some value']);\n  });\n  test('first update', async () => {\n    await incidentFeed.update();\n    expect(incidentFeed.getFeed()).toBe(firstResponse.items);\n    expect(incidentFeed.newIncidents()).toMatchObject([]);\n    expect(incidentFeed.updatedIncidents()).toMatchObject([]);\n  });\n  test('second update', async () => {\n    await incidentFeed.update();\n    expect(incidentFeed.getFeed()).toBe(secondResponse.items);\n    expect(incidentFeed.newIncidents()).toMatchObject([\n      { link: 'id=3', content: 'not updated' }\n    ]);\n    expect(incidentFeed.updatedIncidents()).toMatchObject([]);\n  });\n  test('third update', async () => {\n    await incidentFeed.update();\n    expect(incidentFeed.getFeed()).toBe(thirdResponse.items);\n    expect(incidentFeed.newIncidents()).toMatchObject([]);\n    expect(incidentFeed.updatedIncidents()).toMatchObject([\n      { link: 'id=1', content: 'updated' }\n    ]);\n  });\n  test('fourth update', async () => {\n    await incidentFeed.update();\n    expect(incidentFeed.getFeed()).toBe(fourthResponse.items);\n    expect(incidentFeed.newIncidents()).toMatchObject([]);\n    expect(incidentFeed.updatedIncidents()).toMatchObject([]);\n  });\n});\n", "id": "netlify-menubar:src/__tests__/incidentFeed.test.ts:55f8f174-2ade-4179-b726-3716d69396e9"}
{"path": "test/tricks/stop-fargate-ecs-services.spec.ts", "project_name": "aws-cost-saver", "text": "import AWS from 'aws-sdk';\nimport AWSMock from 'aws-sdk-mock';\nimport { mockProcessStdout } from 'jest-mock-process';\nimport { ListrTaskWrapper } from 'listr2';\nimport nock from 'nock';\n\nimport {\n  StopFargateEcsServicesTrick,\n  StopFargateEcsServicesState,\n} from '../../src/tricks/stop-fargate-ecs-services.trick';\nimport { TrickContext } from '../../src/types/trick-context';\nimport { createMockTask } from '../util';\nimport { TrickOptionsInterface } from '../../src/types/trick-options.interface';\n\nbeforeAll(async done => {\n  nock.abortPendingRequests();\n  nock.cleanAll();\n  nock.disableNetConnect();\n\n  // AWSMock cannot mock waiters at the moment\n  AWS.ECS.prototype.waitFor = jest.fn().mockImplementation(() => ({\n    promise: jest.fn(),\n  }));\n\n  mockProcessStdout();\n  done();\n});\n\nafterEach(async () => {\n  const pending = nock.pendingMocks();\n\n  if (pending.length > 0) {\n    // eslint-disable-next-line no-console\n    console.log(pending);\n    throw new Error(`${pending.length} mocks are pending!`);\n  }\n});\n\ndescribe('stop-fargate-ecs-services', () => {\n  let task: ListrTaskWrapper<any, any>;\n\n  beforeEach(() => {\n    task = createMockTask();\n  });\n\n  it('returns correct machine name', async () => {\n    const instance = new StopFargateEcsServicesTrick();\n    expect(instance.getMachineName()).toBe(\n      StopFargateEcsServicesTrick.machineName,\n    );\n  });\n\n  it('prepares resource tags', async () => {\n    AWSMock.setSDKInstance(AWS);\n\n    AWSMock.mock(\n      'ResourceGroupsTaggingAPI',\n      'getResources',\n      (\n        params: AWS.ResourceGroupsTaggingAPI.GetResourcesInput,\n        callback: Function,\n      ) => {\n        callback(null, {\n          ResourceTagMappingList: [\n            { ResourceARN: 'arn:cluster/foo' },\n            { ResourceARN: 'arn:service/bar' },\n          ],\n        } as AWS.ResourceGroupsTaggingAPI.GetResourcesOutput);\n      },\n    );\n\n    const instance = new StopFargateEcsServicesTrick();\n    const trickContext: TrickContext = {};\n    await instance.prepareTags(task, trickContext, {} as TrickOptionsInterface);\n\n    expect(trickContext).toMatchObject({\n      resourceTagMappings: [\n        { ResourceARN: 'arn:cluster/foo' },\n        { ResourceARN: 'arn:service/bar' },\n      ],\n    });\n\n    AWSMock.restore('ResourceGroupsTaggingAPI');\n  });\n\n  it('returns an empty Listr if no clusters found', async () => {\n    AWSMock.setSDKInstance(AWS);\n\n    AWSMock.mock(\n      'ECS',\n      'listClusters',\n      (params: AWS.ECS.Types.ListClustersRequest, callback: Function) => {\n        callback(null, {\n          clusterArns: [],\n        } as AWS.ECS.Types.ListClustersResponse);\n      },\n    );\n\n    const instance = new StopFargateEcsServicesTrick();\n    const stateObject: StopFargateEcsServicesState = [];\n    const listr = await instance.getCurrentState(\n      task,\n      { resourceTagMappings: [] } as TrickContext,\n      stateObject,\n      {\n        dryRun: false,\n      },\n    );\n\n    expect(listr.tasks.length).toBe(0);\n\n    AWSMock.restore('ECS');\n  });\n\n  it('returns an empty state if no services found', async () => {\n    AWSMock.setSDKInstance(AWS);\n\n    AWSMock.mock(\n      'ECS',\n      'listClusters',\n      (params: AWS.ECS.Types.ListClustersRequest, callback: Function) => {\n        callback(null, {\n          clusterArns: ['arn:cluster/foo', 'arn:cluster/bar'],\n        } as AWS.ECS.Types.ListClustersResponse);\n      },\n    );\n\n    AWSMock.mock(\n      'ECS',\n      'listServices',\n      (params: AWS.ECS.Types.ListServicesRequest, callback: Function) => {\n        if (params.cluster === 'arn:cluster/foo') {\n          callback(null, {\n            serviceArns: [],\n          } as AWS.ECS.Types.ListServicesResponse);\n        } else if (params.cluster === 'arn:cluster/bar') {\n          callback(null, {\n            serviceArns: [],\n          } as AWS.ECS.Types.ListServicesResponse);\n        } else {\n          throw new Error(`Wrong cluster arn`);\n        }\n      },\n    );\n\n    const instance = new StopFargateEcsServicesTrick();\n    const stateObject: StopFargateEcsServicesState = [];\n    const stateListr = await instance.getCurrentState(\n      task,\n      {} as TrickContext,\n      stateObject,\n      {\n        dryRun: false,\n      },\n    );\n\n    await stateListr.run();\n\n    expect(stateObject.length).toBe(2);\n    expect(stateObject[0].services.length).toBe(0);\n    expect(stateObject[1].services.length).toBe(0);\n\n    AWSMock.restore('ECS');\n  });\n\n  it('errors if serviceArn was not returned by AWS', async () => {\n    AWSMock.setSDKInstance(AWS);\n\n    AWSMock.mock(\n      'ECS',\n      'listClusters',\n      (params: AWS.ECS.Types.ListClustersRequest, callback: Function) => {\n        callback(null, {\n          clusterArns: ['arn:cluster/foo'],\n        } as AWS.ECS.Types.ListClustersResponse);\n      },\n    );\n\n    AWSMock.mock(\n      'ECS',\n      'listServices',\n      (params: AWS.ECS.Types.ListServicesRequest, callback: Function) => {\n        if (params.cluster === 'arn:cluster/foo') {\n          callback(null, {\n            serviceArns: ['arn:service/bar'],\n          } as AWS.ECS.Types.ListServicesResponse);\n        } else {\n          throw new Error(`Wrong cluster arn`);\n        }\n      },\n    );\n\n    AWSMock.mock(\n      'ECS',\n      'describeServices',\n      (params: AWS.ECS.Types.DescribeServicesRequest, callback: Function) => {\n        if (params.services.includes('arn:service/bar')) {\n          callback(null, {\n            services: [{ desiredCount: 3 }],\n          } as AWS.ECS.Types.DescribeServicesResponse);\n        } else {\n          throw new Error(`Wrong service arn`);\n        }\n      },\n    );\n\n    const instance = new StopFargateEcsServicesTrick();\n    const stateObject: StopFargateEcsServicesState = [];\n    const listr = await instance.getCurrentState(\n      task,\n      { resourceTagMappings: [] } as TrickContext,\n      stateObject,\n      {\n        dryRun: false,\n      },\n    );\n\n    await listr.run();\n\n    expect(listr.err).toStrictEqual([\n      expect.objectContaining({\n        errors: [\n          expect.objectContaining({\n            message: expect.stringMatching(/unexpected/gi),\n          }),\n        ],\n      }),\n    ]);\n\n    AWSMock.restore('ECS');\n  });\n\n  it('generates state object for ec2 instances', async () => {\n    AWSMock.setSDKInstance(AWS);\n\n    AWSMock.mock(\n      'ECS',\n      'listClusters',\n      (params: AWS.ECS.Types.ListClustersRequest, callback: Function) => {\n        callback(null, {\n          clusterArns: [\n            'arn:cluster/foo',\n            'arn:cluster/bar',\n            'arn:cluster/bax',\n          ],\n        } as AWS.ECS.Types.ListClustersResponse);\n      },\n    );\n\n    AWSMock.mock(\n      'ECS',\n      'listServices',\n      (params: AWS.ECS.Types.ListServicesRequest, callback: Function) => {\n        if (params.cluster === 'arn:cluster/foo') {\n          callback(null, {\n            serviceArns: ['arn:service/baz', 'arn:service/qux'],\n          } as AWS.ECS.Types.ListServicesResponse);\n        } else if (params.cluster === 'arn:cluster/bar') {\n          callback(null, {\n            serviceArns: ['arn:service/quux', 'arn:service/quuz'],\n          } as AWS.ECS.Types.ListServicesResponse);\n        } else if (params.cluster === 'arn:cluster/bax') {\n          callback(null, {\n            serviceArns: [],\n          } as AWS.ECS.Types.ListServicesResponse);\n        } else {\n          throw new Error(`Wrong cluster arn`);\n        }\n      },\n    );\n\n    AWSMock.mock(\n      'ECS',\n      'describeServices',\n      (params: AWS.ECS.Types.DescribeServicesRequest, callback: Function) => {\n        const response: AWS.ECS.Types.DescribeServicesResponse = {\n          services: [],\n        };\n        const services = [];\n\n        if (params.services.includes('arn:service/baz')) {\n          services.push({\n            serviceArn: 'arn:service/baz',\n            desiredCount: 3,\n          });\n        }\n        if (params.services.includes('arn:service/qux')) {\n          services.push({\n            serviceArn: 'arn:service/qux',\n            desiredCount: 1,\n          });\n        }\n        if (params.services.includes('arn:service/quux')) {\n          services.push({\n            serviceArn: 'arn:service/quux',\n            desiredCount: 0,\n          });\n        }\n        if (params.services.includes('arn:service/quuz')) {\n          services.push({\n            serviceArn: 'arn:service/quuz',\n            desiredCount: 10,\n          });\n        }\n\n        if (services.length === 0) {\n          throw new Error(`Wrong service arn`);\n        }\n\n        response.services = services;\n\n        callback(null, response);\n      },\n    );\n\n    AWSMock.mock(\n      'ApplicationAutoScaling',\n      'describeScalableTargets',\n      (\n        params: AWS.ApplicationAutoScaling.Types.DescribeScalableTargetsRequest,\n        callback: (\n          err: any,\n          res:\n            | AWS.ApplicationAutoScaling.Types.DescribeScalableTargetsResponse\n            | any,\n        ) => {},\n      ) => {\n        if (params.ResourceIds?.includes('service/foo/baz')) {\n          callback(null, {\n            ScalableTargets: [\n              {\n                MinCapacity: 2,\n                MaxCapacity: 8,\n                ScalableDimension: 'ecs:service:DesiredCount',\n                ResourceId: 'service/foo/baz',\n              },\n            ],\n          });\n        } else if (params.ResourceIds?.includes('service/foo/qux')) {\n          callback(null, {});\n        } else if (params.ResourceIds?.includes('service/bar/quux')) {\n          callback(null, {\n            ScalableTargets: [],\n          });\n        } else if (params.ResourceIds?.includes('service/bar/quuz')) {\n          callback(null, {\n            ScalableTargets: [\n              {\n                MinCapacity: 0,\n                MaxCapacity: 20,\n                ScalableDimension: 'ecs:service:DesiredCount',\n                ResourceId: 'service/bar/quuz',\n              },\n            ],\n          });\n        } else {\n          throw new Error(`Wrong service arn when fetching scalabale targets`);\n        }\n      },\n    );\n\n    const instance = new StopFargateEcsServicesTrick();\n    const stateObject: StopFargateEcsServicesState = [];\n    const listr = await instance.getCurrentState(\n      task,\n      {\n        resourceTagMappings: [\n          { ResourceARN: 'arn:service/baz' },\n          { ResourceARN: 'arn:service/qux' },\n          { ResourceARN: 'arn:cluster/bar' },\n        ],\n      } as TrickContext,\n      stateObject,\n      {\n        dryRun: false,\n      },\n    );\n\n    await listr.run({});\n\n    expect(stateObject).toStrictEqual([\n      {\n        arn: 'arn:cluster/foo',\n        services: [\n          {\n            arn: 'arn:service/baz',\n            desired: 3,\n            scalableTargets: [\n              {\n                min: 2,\n                max: 8,\n                scalableDimension: 'ecs:service:DesiredCount',\n                resourceId: 'service/foo/baz',\n                namespace: 'ecs',\n              },\n            ],\n          },\n          {\n            arn: 'arn:service/qux',\n            desired: 1,\n            scalableTargets: [],\n          },\n        ],\n      },\n      {\n        arn: 'arn:cluster/bar',\n        services: [\n          {\n            arn: 'arn:service/quux',\n            desired: 0,\n            scalableTargets: [],\n          },\n          {\n            arn: 'arn:service/quuz',\n            desired: 10,\n            scalableTargets: [\n              {\n                min: 0,\n                max: 20,\n                scalableDimension: 'ecs:service:DesiredCount',\n                resourceId: 'service/bar/quuz',\n                namespace: 'ecs',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        arn: 'arn:cluster/bax',\n        services: [],\n      },\n    ] as StopFargateEcsServicesState);\n\n    AWSMock.restore('ECS');\n  });\n\n  it('generates state object for tagged resources', async () => {\n    AWSMock.setSDKInstance(AWS);\n\n    AWSMock.mock(\n      'ECS',\n      'listClusters',\n      (params: AWS.ECS.Types.ListClustersRequest, callback: Function) => {\n        callback(null, {\n          clusterArns: ['arn:cluster/foo', 'arn:cluster/bar'],\n        } as AWS.ECS.Types.ListClustersResponse);\n      },\n    );\n\n    AWSMock.mock(\n      'ECS',\n      'listServices',\n      (params: AWS.ECS.Types.ListServicesRequest, callback: Function) => {\n        if (params.cluster === 'arn:cluster/foo') {\n          callback(null, {\n            serviceArns: ['arn:service/baz', 'arn:service/qux'],\n          } as AWS.ECS.Types.ListServicesResponse);\n        } else if (params.cluster === 'arn:cluster/bar') {\n          callback(null, {\n            serviceArns: ['arn:service/quux', 'arn:service/quuz'],\n          } as AWS.ECS.Types.ListServicesResponse);\n        } else {\n          throw new Error(`Wrong cluster arn`);\n        }\n      },\n    );\n\n    AWSMock.mock(\n      'ECS',\n      'describeServices',\n      (params: AWS.ECS.Types.DescribeServicesRequest, callback: Function) => {\n        const response: AWS.ECS.Types.DescribeServicesResponse = {\n          services: [],\n        };\n        const services = [];\n\n        if (params.services.includes('arn:service/baz')) {\n          services.push({\n            serviceArn: 'arn:service/baz',\n            desiredCount: 3,\n          });\n        }\n        if (params.services.includes('arn:service/qux')) {\n          services.push({\n            serviceArn: 'arn:service/qux',\n            desiredCount: 1,\n          });\n        }\n        if (params.services.includes('arn:service/quux')) {\n          services.push({\n            serviceArn: 'arn:service/quux',\n            desiredCount: 0,\n          });\n        }\n        if (params.services.includes('arn:service/quuz')) {\n          services.push({\n            serviceArn: 'arn:service/quuz',\n            desiredCount: 10,\n          });\n        }\n\n        if (services.length === 0) {\n          throw new Error(`Wrong service arn`);\n        }\n\n        response.services = services;\n\n        callback(null, response);\n      },\n    );\n\n    AWSMock.mock(\n      'ApplicationAutoScaling',\n      'describeScalableTargets',\n      (\n        params: AWS.ApplicationAutoScaling.Types.DescribeScalableTargetsRequest,\n        callback: (\n          err: any,\n          res:\n            | AWS.ApplicationAutoScaling.Types.DescribeScalableTargetsResponse\n            | any,\n        ) => {},\n      ) => {\n        callback(null, {\n          ScalableTargets: [],\n        });\n      },\n    );\n\n    const instance = new StopFargateEcsServicesTrick();\n    const stateObject: StopFargateEcsServicesState = [];\n    const listr = await instance.getCurrentState(\n      task,\n      {\n        resourceTagMappings: [\n          { ResourceARN: 'arn:service/baz' },\n          { ResourceARN: 'arn:cluster/bar' },\n        ],\n      } as TrickContext,\n      stateObject,\n      {\n        dryRun: false,\n      },\n    );\n\n    await listr.run({});\n\n    expect(stateObject).toStrictEqual([\n      {\n        arn: 'arn:cluster/foo',\n        services: [\n          {\n            arn: 'arn:service/baz',\n            desired: 3,\n            scalableTargets: [\n              {\n                min: 2,\n                max: 8,\n                scalableDimension: 'ecs:service:DesiredCount',\n                resourceId: 'service/foo/baz',\n                namespace: 'ecs',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        arn: 'arn:cluster/bar',\n        services: [\n          {\n            arn: 'arn:service/quux',\n            desired: 0,\n            scalableTargets: [],\n          },\n          {\n            arn: 'arn:service/quuz',\n            desired: 10,\n            scalableTargets: [\n              {\n                min: 0,\n                max: 20,\n                scalableDimension: 'ecs:service:DesiredCount',\n                resourceId: 'service/bar/quuz',\n                namespace: 'ecs',\n              },\n            ],\n          },\n        ],\n      },\n    ] as StopFargateEcsServicesState);\n\n    AWSMock.restore('ECS');\n  });\n\n  it('conserves running ec2 instances', async () => {\n    AWSMock.setSDKInstance(AWS);\n\n    const updateServiceSpy = jest\n      .fn()\n      .mockImplementationOnce((params, callback) => {\n        callback(null, {});\n      });\n    AWSMock.mock('ECS', 'updateService', updateServiceSpy);\n\n    const registerScalableTargetSpy = jest\n      .fn()\n      .mockImplementationOnce((params, callback) => {\n        callback(null, {});\n      });\n    AWSMock.mock(\n      'ApplicationAutoScaling',\n      'registerScalableTarget',\n      registerScalableTargetSpy,\n    );\n\n    const instance = new StopFargateEcsServicesTrick();\n    const stateObject: StopFargateEcsServicesState = [\n      {\n        arn: 'arn:cluster/foo',\n        services: [\n          {\n            arn: 'arn:service/bar',\n            desired: 3,\n            scalableTargets: [\n              {\n                namespace: 'ecs',\n                resourceId: 'service/foor/bar',\n                scalableDimension: 'ecs:service:DesiredCount',\n                min: 1,\n                max: 10,\n              },\n            ],\n          },\n        ],\n      },\n      {\n        arn: 'arn:cluster/bax',\n        services: [],\n      },\n    ];\n    const conserveListr = await instance.conserve(task, stateObject, {\n      dryRun: false,\n    });\n\n    await conserveListr.run({});\n\n    expect(updateServiceSpy).toBeCalledWith(\n      expect.objectContaining({\n        cluster: 'arn:cluster/foo',\n        service: 'arn:service/bar',\n        desiredCount: 0,\n      }),\n      expect.anything(),\n    );\n\n    expect(registerScalableTargetSpy).toBeCalledWith(\n      expect.objectContaining({\n        ServiceNamespace: 'ecs',\n        ResourceId: 'service/foo/bar',\n        ScalableDimension: 'ecs:service:DesiredCount',\n        MinCapacity: 0,\n        MaxCapacity: 0,\n      }),\n      expect.anything(),\n    );\n\n    AWSMock.restore('ECS');\n    AWSMock.restore('ApplicationAutoScaling');\n  });\n\n  it('skips conserve if no clusters found', async () => {\n    AWSMock.setSDKInstance(AWS);\n\n    const instance = new StopFargateEcsServicesTrick();\n    const stateObject: StopFargateEcsServicesState = [];\n\n    const updateServiceSpy = jest\n      .fn()\n      .mockImplementationOnce((params, callback) => {\n        callback(null, {});\n      });\n    AWSMock.mock('ECS', 'updateService', updateServiceSpy);\n\n    await instance.conserve(task, stateObject, {\n      dryRun: false,\n    });\n\n    expect(updateServiceSpy).not.toBeCalled();\n    expect(task.skip).toBeCalledWith(expect.any(String));\n\n    AWSMock.restore('ECS');\n  });\n\n  it('skips conserve when desired count is already zero', async () => {\n    AWSMock.setSDKInstance(AWS);\n\n    const updateServiceSpy = jest.fn();\n    AWSMock.mock('ECS', 'updateService', updateServiceSpy);\n\n    const instance = new StopFargateEcsServicesTrick();\n    const stateObject: StopFargateEcsServicesState = [\n      {\n        arn: 'arn:cluster/foo',\n        services: [\n          {\n            arn: 'arn:service/bar',\n            desired: 0,\n            scalableTargets: [],\n          },\n        ],\n      },\n    ];\n    const conserveListr = await instance.conserve(task, stateObject, {\n      dryRun: false,\n    });\n\n    await conserveListr.run({});\n\n    expect(updateServiceSpy).not.toBeCalled();\n\n    AWSMock.restore('ECS');\n  });\n\n  it('skips conserve if dry-run option is enabled', async () => {\n    AWSMock.setSDKInstance(AWS);\n\n    const updateServiceSpy = jest.fn();\n    AWSMock.mock('ECS', 'updateService', updateServiceSpy);\n\n    const instance = new StopFargateEcsServicesTrick();\n    const stateObject: StopFargateEcsServicesState = [\n      {\n        arn: 'arn:cluster/foo',\n        services: [\n          {\n            arn: 'arn:service/bar',\n            desired: 3,\n            scalableTargets: [\n              {\n                namespace: 'ecs',\n                resourceId: 'service/foor/bar',\n                scalableDimension: 'ecs:service:DesiredCount',\n                min: 1,\n                max: 10,\n              },\n            ],\n          },\n        ],\n      },\n    ];\n\n    const conserveListr = await instance.conserve(task, stateObject, {\n      dryRun: true,\n    });\n\n    await conserveListr.run({});\n\n    expect(updateServiceSpy).not.toBeCalled();\n\n    AWSMock.restore('ECS');\n  });\n\n  it('restores stopped ecs fargate service', async () => {\n    AWSMock.setSDKInstance(AWS);\n\n    const updateServiceSpy = jest\n      .fn()\n      .mockImplementation((params, callback) => {\n        callback(null, {});\n      });\n    AWSMock.mock('ECS', 'updateService', updateServiceSpy);\n\n    const registerScalableTargetSpy = jest\n      .fn()\n      .mockImplementation((params, callback) => {\n        callback(null, {});\n      });\n    AWSMock.mock(\n      'ApplicationAutoScaling',\n      'registerScalableTarget',\n      registerScalableTargetSpy,\n    );\n\n    const instance = new StopFargateEcsServicesTrick();\n    const stateObject: StopFargateEcsServicesState = [\n      {\n        arn: 'arn:cluster/foo',\n        services: [\n          {\n            arn: 'arn:service/bar',\n            desired: 3,\n            scalableTargets: [\n              {\n                namespace: 'ecs',\n                resourceId: 'service/foor/bar',\n                scalableDimension: 'ecs:service:DesiredCount',\n                min: 1,\n                max: 10,\n              },\n            ],\n          },\n        ],\n      },\n    ];\n    const conserveListr = await instance.restore(task, stateObject, {\n      dryRun: false,\n    });\n\n    await conserveListr.run({});\n\n    expect(updateServiceSpy).toBeCalledWith(\n      expect.objectContaining({\n        cluster: 'arn:cluster/foo',\n        service: 'arn:service/bar',\n        desiredCount: 3,\n      }),\n      expect.anything(),\n    );\n\n    expect(registerScalableTargetSpy).toBeCalledWith(\n      expect.objectContaining({\n        ServiceNamespace: 'ecs',\n        ResourceId: 'service/foo/bar',\n        ScalableDimension: 'ecs:service:DesiredCount',\n        MinCapacity: 1,\n        MaxCapacity: 10,\n      }),\n      expect.anything(),\n    );\n\n    AWSMock.restore('ECS');\n    AWSMock.restore('ApplicationAutoScaling');\n  });\n\n  it('skips restore if original desired count was zero', async () => {\n    AWSMock.setSDKInstance(AWS);\n\n    const updateServiceSpy = jest.fn();\n    AWSMock.mock('ECS', 'updateService', updateServiceSpy);\n\n    const instance = new StopFargateEcsServicesTrick();\n    const stateObject: StopFargateEcsServicesState = [\n      {\n        arn: 'arn:cluster/foo',\n        services: [\n          {\n            arn: 'arn:service/bar',\n            desired: 0,\n            scalableTargets: [],\n          },\n        ],\n      },\n    ];\n\n    const restoreListr = await instance.restore(task, stateObject, {\n      dryRun: false,\n    });\n\n    await restoreListr.run({});\n\n    expect(updateServiceSpy).not.toBeCalled();\n\n    AWSMock.restore('ECS');\n  });\n\n  it('skips restore if dry-run option is enabled', async () => {\n    AWSMock.setSDKInstance(AWS);\n\n    const updateServiceSpy = jest.fn();\n    AWSMock.mock('ECS', 'updateService', updateServiceSpy);\n    const registerScalableTargetSpy = jest.fn();\n    AWSMock.mock(\n      'ApplicationAutoScaling',\n      'registerScalableTarget',\n      registerScalableTargetSpy,\n    );\n    const instance = new StopFargateEcsServicesTrick();\n    const stateObject: StopFargateEcsServicesState = [\n      {\n        arn: 'arn:cluster/foo',\n        services: [\n          {\n            arn: 'arn:service/bar',\n            desired: 3,\n            scalableTargets: [\n              {\n                namespace: 'ecs',\n                resourceId: 'service/foor/bar',\n                scalableDimension: 'ecs:service:DesiredCount',\n                min: 1,\n                max: 10,\n              },\n            ],\n          },\n        ],\n      },\n    ];\n\n    const restoreListr = await instance.restore(task, stateObject, {\n      dryRun: true,\n    });\n\n    await restoreListr.run({});\n\n    expect(updateServiceSpy).not.toBeCalled();\n    expect(registerScalableTargetSpy).not.toBeCalled();\n\n    AWSMock.restore('ECS');\n  });\n});\n", "id": "aws-cost-saver:test/tricks/stop-fargate-ecs-services.spec.ts:ea9fbd18-5d50-450b-bf52-7a8483dd2780"}
{"path": "packages/react/src/components/Guidelines/index.tsx", "project_name": "react-visual-editor", "text": "import React, { memo, useCallback, useEffect, useRef } from 'react';\nimport {\n  DragSourceType,\n  DropTargetType,\n  SelectedInfoType,\n  STATE_PROPS,\n} from '@brickd/core';\nimport { get } from 'lodash';\nimport styles from './index.less';\nimport { useSelector } from '../../hooks/useSelector';\nimport {\n  generateCSS,\n  getElementInfo,\n  getIframe,\n  getSelectedNode,\n  setPosition,\n} from '../../utils';\nimport { useOperate } from '../../hooks/useOperate';\n\ntype SelectState = {\n  hoverKey: string | null;\n  dropTarget: DropTargetType | null;\n  selectedInfo: SelectedInfoType | null;\n  dragSource: DragSourceType | null;\n};\n\n\nfunction getNode(key:string){\n  const iframe=getIframe();\n  const selectedNode = getSelectedNode(`${key}-0`, iframe);\n  if(selectedNode){\n    const {contentWindow}=iframe;\n    const {innerWidth,innerHeight}=contentWindow;\n    const {x,y}=selectedNode.getBoundingClientRect();\n    const  position:{left?:number,top?:number}={};\n    if(y>innerHeight){\n      position.top=y-50;\n    }else if(y<0){\n      position.top=y-50;\n    }else if(x>innerWidth){\n      position.left=innerWidth+x;\n    }else if(x<0){\n      position.left=x;\n    }\n    contentWindow.scrollBy({...position,behavior:'smooth'});\n  }\n  return selectedNode;\n}\n\nfunction Guidelines() {\n  const topRef = useRef<any>();\n  const bottomRef = useRef<any>();\n  const leftRef = useRef<any>();\n  const rightRef = useRef<any>();\n  const hoverNodeRef = useRef<any>();\n\n  const { hoverKey, dropTarget, selectedInfo } = useSelector<\n    SelectState,\n    STATE_PROPS\n  >(['hoverKey', 'dropTarget', 'selectedInfo']);\n\n  const { getOperateState, setSubscribe, setOperateState } = useOperate();\n  const { selectedKey } = selectedInfo || {};\n  const dropKey = get(dropTarget, 'selectedKey');\n  const { operateHoverKey, operateSelectedKey,dropNode } = getOperateState();\n\n  if (!dropKey && hoverKey !== operateHoverKey) {\n    const hoverNode = getNode(hoverKey);\n    setOperateState({ hoverNode, operateHoverKey: hoverKey });\n  }\n\n  if (selectedKey !== operateSelectedKey) {\n    const selectedNode=getNode(selectedKey);\n    setOperateState({ selectedNode, operateSelectedKey: selectedKey });\n  }\n\n  useEffect(() => {\n    const iframe = getIframe();\n    const { contentWindow, contentDocument } = iframe;\n    const renderGuideLines = () => {\n      const { hoverNode, dropNode, isModal,isDropAble } = getOperateState();\n      const node = dropNode || hoverNode;\n      if (node) {\n        const { left, top, bottom, right, width, height } = getElementInfo(\n          node,\n          iframe,\n          isModal,\n        );\n        hoverNodeRef.current.style.cssText = generateCSS(\n          left,\n          top,\n          width,\n          height,\n        );\n        if(dropNode){\n          if(isDropAble){\n            hoverNodeRef.current.style.borderColor='springgreen';\n            hoverNodeRef.current.style.backgroundColor='rgba(0, 256, 0, 0.1)';\n          }else{\n            hoverNodeRef.current.style.borderColor='red';\n            hoverNodeRef.current.style.backgroundColor='rgba(256, 0, 0, 0.1)';\n          }\n\n        }\n        topRef.current.style.top = `${top}px`;\n        topRef.current.style.width = `${contentDocument!.body.scrollWidth}px`;\n        leftRef.current.style.left = `${left}px`;\n        leftRef.current.style.height = `${\n          contentDocument!.body.scrollHeight\n        }px`;\n        rightRef.current.style.left = `${right - 1}px`;\n        rightRef.current.style.height = `${\n          contentDocument!.body.scrollHeight\n        }px`;\n        bottomRef.current.style.top = `${bottom - 1}px`;\n        bottomRef.current.style.width = `${\n          contentDocument!.body.scrollWidth\n        }px`;\n        setPosition(\n          [\n            hoverNodeRef.current,\n            leftRef.current,\n            rightRef.current,\n            topRef.current,\n            bottomRef.current,\n          ],\n          isModal,\n        );\n      }\n      if (dropNode) {\n        setTimeout(renderGuideLines, 100);\n      }\n    };\n    const unSubscribe = setSubscribe(renderGuideLines);\n    const onScroll = () => {\n      setTimeout(renderGuideLines, 66);\n    };\n    contentWindow.addEventListener('scroll', onScroll);\n    return () => {\n      unSubscribe();\n      contentWindow.removeEventListener('scroll', onScroll);\n    };\n  }, [\n    hoverNodeRef.current,\n    leftRef.current,\n    rightRef.current,\n    bottomRef.current,\n    topRef.current,\n  ]);\n\n  const onTransitionEnd=useCallback(()=>{\n    setOperateState({isLock:false});\n  },[]);\n\n  const guidControl = !dropNode && hoverKey;\n\n  const guidH = guidControl ? styles['guide-h'] : styles['guide-hidden'];\n  const guidV = guidControl ? styles['guide-v'] : styles['guide-hidden'];\n  const hoverNodeClass =\n    dropNode || hoverKey\n      ? dropNode\n        ? styles['drop-node']\n        : styles['hover-node']\n      : styles['guide-hidden'];\n  return (\n    <>\n      <div onTransitionEnd={onTransitionEnd} ref={hoverNodeRef} className={hoverNodeClass} />\n      <div ref={leftRef} className={guidV} />\n      <div ref={rightRef} className={guidV} />\n      <div ref={topRef} className={guidH} />\n      <div ref={bottomRef} className={guidH} />\n    </>\n  );\n}\n\nexport default memo(Guidelines);\n", "id": "react-visual-editor:packages/react/src/components/Guidelines/index.tsx:90cbf692-971c-4226-b0fb-8d48e54a8220"}
{"path": "src/auth/guards/firebase-normal-user-login.guard.ts", "project_name": "mamori-i-japan-api", "text": "import { Injectable } from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\n\n@Injectable()\nexport class FirebaseNormalUserLoginGuard extends AuthGuard('firebase-normal-user-login') {}\n", "id": "mamori-i-japan-api:src/auth/guards/firebase-normal-user-login.guard.ts:16c9bd99-a87d-43e3-bcb1-e5b9fc5c001c"}
{"path": "main/utils/encoding.ts", "project_name": "Kap", "text": "/* eslint-disable array-element-newline */\n\nimport path from 'path';\nimport execa from 'execa';\nimport tempy from 'tempy';\nimport {track} from '../common/analytics';\nimport ffmpegPath from './ffmpeg-path';\n\nexport const getEncoding = async (filePath: string) => {\n  try {\n    await execa(ffmpegPath, ['-i', filePath]);\n    return undefined;\n  } catch (error) {\n    return /.*: Video: (.*?) \\(.*/.exec((error as any)?.stderr)?.[1];\n  }\n};\n\n// `ffmpeg -i original.mp4 -vcodec libx264 -crf 27 -preset veryfast -c:a copy output.mp4`\nexport const convertToH264 = async (inputPath: string) => {\n  const outputPath = tempy.file({extension: path.extname(inputPath)});\n\n  track('encoding/converted/hevc');\n\n  await execa(ffmpegPath, [\n    '-i', inputPath,\n    '-vcodec', 'libx264',\n    '-crf', '27',\n    '-preset', 'veryfast',\n    '-c:a', 'copy',\n    outputPath\n  ]);\n\n  return outputPath;\n};\n", "id": "Kap:main/utils/encoding.ts:ed336f9f-b33b-4185-8001-20dd2445ba97"}
{"path": "examples/test-your-cache.ts", "project_name": "element", "text": "import { TestSettings, step, By } from '@flood/element'\n\nexport const settings: TestSettings = {\n\tloopCount: 1,\n}\n\nexport default () => {\n\tstep.once({ waitTimeout: 10 }, async (browser) => {\n\t\tawait browser.visit('https://refreshyourcache.com/en/cache-test/')\n\t\tawait browser.takeScreenshot()\n\t\tawait browser.clearBrowserCache()\n\t\tawait browser.visit('https://refreshyourcache.com/en/cache-test/')\n\t\tawait browser.takeScreenshot()\n\t})\n}\n", "id": "element:examples/test-your-cache.ts:3c77fefb-41c2-466d-8fb5-cc1e9b5b6eaf"}
{"path": "2.4.x/assets/GoToScene.ts", "project_name": "cocos-creator-examples", "text": "\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class GoToScene extends cc.Component {\n\n    @property\n    sceneName: string = 'home';\n\n    onLoad() {\n        this.node.on(cc.Node.EventType.TOUCH_END, this.gotoScene, this);\n    }\n\n    gotoScene() {\n        cc.director.loadScene(this.sceneName);\n    }\n\n}\n", "id": "cocos-creator-examples:2.4.x/assets/GoToScene.ts:1321faa2-d538-4e11-bfb5-a79ab4244754"}
{"path": "types/prosemirror-keymap/prosemirror-keymap-tests.ts", "project_name": "DefinitelyTyped", "text": "import * as keymap from 'prosemirror-keymap';\nimport { Plugin } from 'prosemirror-state';\n\nconst plugin1: Plugin = keymap.keymap({\n    // Test that the argument types are correctly inferred\n    Enter: (state, dispatch, view) => {\n        if (dispatch) {\n            dispatch(state.tr.insertText('hello'));\n        }\n        return true;\n    },\n});\n\nconst plugin2 = new Plugin({\n    props: {\n        handleKeyDown: keymap.keydownHandler({\n            // Test that the argument types are correctly inferred\n            Enter: (state, dispatch, view) => {\n                if (dispatch) {\n                    dispatch(state.tr.insertText('hello'));\n                }\n                return true;\n            },\n        }),\n    },\n});\n\n// Handlers must return a boolean\nkeymap.keydownHandler({ Enter: () => {} }); // $ExpectError\n", "id": "DefinitelyTyped:types/prosemirror-keymap/prosemirror-keymap-tests.ts:db210dd5-0583-4974-9c16-cb01c05f4e91"}
{"path": "src/lib/inspector/provider.tsx", "project_name": "retoggle", "text": "import React, { useState, createContext } from 'react';\nimport StateHandler, { defaultStateHandler } from './state-handler';\n\nexport const InspectorContext = createContext<StateHandler>(defaultStateHandler);\n\ntype Props = {\n  children?: any;\n  value?: StateHandler;\n}\n\nexport default function InspectorProvider({ children, value }: Props) {\n    const [handler] = useState(new StateHandler());\n    return (\n        <InspectorContext.Provider value={value || handler}>\n            {typeof children === 'function' ? children() : children}\n        </InspectorContext.Provider>\n    )\n}\n", "id": "retoggle:src/lib/inspector/provider.tsx:4c30c629-4c2f-4d9f-a5c9-c2f47c334e6b"}
{"path": "src/units/rewrite.ts", "project_name": "Bilibili-Old", "text": "/**\n * 重写引导，重写操作是非常底层的操作，必须在正常引导之前。\n */\n(function () {\n    try {\n        API.uid = Number(API.getCookies().DedeUserID);\n        API.path = location.href.split(\"/\");\n        if (API.uid) {\n            // 代理旧版退出登录页面\n            if (location.href.includes(\"bilibili.com/login?act=exit\")) API.loginExit(document.referrer);\n            // 修复动态时间线\n            let offset = API.getCookies()[\"bp_video_offset_\" + API.uid];\n            offset && (document.cookie = \"bp_t_offset_\" + API.uid + \"=\" + offset + \"; domain=bilibili.com; expires=Aug, 18 Dec 2038 18:00:00 GMT; BLOD.path=/\");\n        }\n        API.importModule(\"parameterTrim.js\", { Before: true }, true); // 网址清理，重写前处理\n        /**\n         * 分离页面进入重写判定\n         */\n        if (config.av && /\\/video\\/[AaBb][Vv]/.test(location.href)) API.importModule(\"av.js\");\n        if (config.bangumi && /\\/bangumi\\/play\\/(ss|ep)/.test(location.href)) API.importModule(\"bangumi.js\");\n        if (config.watchlater && /\\/watchlater\\//.test(location.href)) API.importModule(\"watchlater.js\");\n        if (config.player && /player\\./.test(location.href)) API.importModule(\"player.js\");\n        if (/space\\.bilibili\\.com/.test(location.href)) API.importModule(\"space.js\");\n        if (config.index && API.path[2] == 'www.bilibili.com' && (!API.path[3] || (API.path[3].startsWith('\\?') || API.path[3].startsWith('\\#') || API.path[3].startsWith('index.')))) API.importModule(\"index.js\");\n        if (config.ranking && /\\/v\\/popular\\//.test(location.href)) API.importModule(\"ranking.js\");\n        if (/live\\.bilibili\\.com/.test(location.href)) API.importModule(\"live.js\");\n        if (/\\/medialist\\/play\\//.test(location.href)) API.importModule(\"mediaList.js\");\n        if (API.path[2] == \"message.bilibili.com\") API.addCss(API.getModule(\"message.css\"));\n        if (window.self == window.top && API.path[2] == 'www.bilibili.com') document.domain = \"bilibili.com\";\n        if (location.href.includes(\"message.bilibili.com/pages/nav/index_new_sync\")) API.addCss(API.getModule(\"imroot.css\"));\n        if (location.href.includes(\"www.bilibili.com/account/history\")) API.importModule(\"history.js\");\n        if (/dmid/.test(location.href) && /dm_progress/.test(location.href)) API.importModule(\"loadByDmid.js\");\n        if (config.read && /\\/read\\/[Cc][Vv]/.test(location.href)) API.importModule(\"read.js\");\n        if (config.player && /festival\\/2021bnj/.test(location.href)) API.importModule(\"bnj2021.js\");\n        API.scriptIntercept([\"bilibiliPlayer.min.js\"], \"https://cdn.jsdelivr.net/gh/MotooriKashin/Bilibili-Old/dist/bilibiliPlayer.min.js\"); // 播放器脚本拦截\n        config.logReport && API.scriptIntercept([\"log-reporter\"]); // 日志拦截\n        /**\n         * 若页面不需要重写，直接进入正常引导\n         */\n        (!API.path.name || config.rewriteMethod == \"同步\") && API.importModule(\"vector.js\");\n    } catch (e) { toast.error(\"rewrite.js\", e) }\n})();\ndeclare namespace API {\n    /**\n     * 当前视频aid\n     */\n    let aid: number;\n    /**\n     * 当前视频cid\n     */\n    let cid: number;\n    /**\n     * 当前视频分区tid\n     */\n    let tid: number;\n    /**\n     * 当前账户mid\n     */\n    let uid: number;\n    /**\n     * 当前页面url切割，用于页面分离  \n     * 其name属性存在说明页面经过重写\n     */\n    let path: string[] & {\n        /**\n         * 重写标记：用于判断页面是否(要)经过重写\n         */\n        name?: string\n    }\n}", "id": "Bilibili-Old:src/units/rewrite.ts:4462b4b7-9c18-4e6b-af68-201e23524ae0"}
{"path": "src/App/Views/Universal/Plain.tsx", "project_name": "optolith-client", "text": "import * as React from \"react\"\nimport { Textfit } from \"react-textfit\"\nimport { List } from \"../../../Data/List\"\nimport { fromMaybe, Just, Maybe, orN } from \"../../../Data/Maybe\"\nimport { classListMaybe } from \"../../Utilities/CSS\"\n\ninterface Props {\n  className: string\n  label: string\n  value: Maybe<string | number>\n  multi?: boolean\n}\n\nexport const Plain: React.FC<Props> = props => {\n  const { className, label, value, multi } = props\n\n  return (\n    <div className={classListMaybe (List (Just (\"plain\"), Maybe (className)))}>\n      <div className=\"label\">{label}</div>\n      <Textfit\n        max={13}\n        min={8}\n        mode={orN (multi) ? \"multi\" : \"single\"}\n        className=\"value\"\n        >\n        {fromMaybe<string | number> (\"\") (value)}\n      </Textfit>\n    </div>\n  )\n}\n", "id": "optolith-client:src/App/Views/Universal/Plain.tsx:641db9b3-9ec6-4185-a952-ed55a0b0c71d"}
{"path": "packages/abc/down-file/down-file.module.ts", "project_name": "delon", "text": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { AlainThemeModule } from '@delon/theme';\n\nimport { DownFileDirective } from './down-file.directive';\n\nconst DIRECTIVES = [DownFileDirective];\n\n@NgModule({\n  imports: [CommonModule, AlainThemeModule],\n  declarations: [...DIRECTIVES],\n  exports: [...DIRECTIVES]\n})\nexport class DownFileModule {}\n", "id": "delon:packages/abc/down-file/down-file.module.ts:111acbcb-4e39-4bcb-b01c-0530cb63e550"}
{"path": "odd-platform-ui/src/components/Management/TagsList/TagCreateForm/TagCreateFormItem/TagCreateFormItem.tsx", "project_name": "odd-platform", "text": "import React from 'react';\nimport { Grid, Checkbox, FormControlLabel } from '@mui/material';\nimport withStyles from '@mui/styles/withStyles';\nimport { useFormContext, Controller } from 'react-hook-form';\nimport AppButton from 'components/shared/AppButton/AppButton';\nimport AppTextField from 'components/shared/AppTextField/AppTextField';\nimport ClearIcon from 'components/shared/Icons/ClearIcon';\nimport { styles, StylesType } from './TagCreateFormItemStyles';\n\ninterface TagCreateFormItemProps extends StylesType {\n  itemIndex: number;\n  onItemRemove: () => void;\n  fieldsLength?: number;\n}\n\nconst TagCreateFormItem: React.FC<TagCreateFormItemProps> = ({\n  classes,\n  itemIndex,\n  onItemRemove,\n  fieldsLength,\n}) => {\n  const { control } = useFormContext();\n\n  return (\n    <>\n      <Controller\n        name={`tags.${itemIndex}.name`}\n        control={control}\n        defaultValue=\"\"\n        rules={{ required: true, validate: value => !!value.trim() }}\n        render={({ field }) => (\n          <AppTextField\n            {...field}\n            placeholder=\"Tag Name\"\n            name={`tags.${itemIndex}.name`}\n            customEndAdornment={{\n              variant: 'clear',\n              showAdornment: !!field.value,\n              onCLick: () => field.onChange(''),\n              icon: <ClearIcon />,\n            }}\n          />\n        )}\n      />\n      <Grid container className={classes.tagItemButtons}>\n        <Controller\n          name={`tags.${itemIndex}.important`}\n          control={control}\n          defaultValue={false}\n          render={({ field }) => (\n            <FormControlLabel\n              // eslint-disable-next-line react/jsx-props-no-spreading\n              {...field}\n              className={classes.checkboxContainer}\n              checked={field.value}\n              control={<Checkbox className={classes.importantCheckbox} />}\n              label=\"Important\"\n            />\n          )}\n        />\n        {fieldsLength && fieldsLength > 1 && (\n          <AppButton size=\"small\" color=\"dropdown\" onClick={onItemRemove}>\n            Delete\n          </AppButton>\n        )}\n      </Grid>\n    </>\n  );\n};\n\nexport default withStyles(styles)(TagCreateFormItem);\n", "id": "odd-platform:odd-platform-ui/src/components/Management/TagsList/TagCreateForm/TagCreateFormItem/TagCreateFormItem.tsx:a58f1eb1-b6df-4258-9383-ddcc6755dc8e"}
{"path": "spec/schema/ast-validation-modules/no-lists-of-references-validator.spec.ts", "project_name": "cruddl", "text": "import { assertValidatorAccepts, assertValidatorRejects } from './helpers';\n\ndescribe('no lists of references validator', () => {\n    it('rejects lists of references', () => {\n        assertValidatorRejects(`\n            type Stuff @rootEntity {\n                foo: String @key\n            }\n            type RefStuff @rootEntity {\n                stuff: [Stuff] @reference\n            }\n        `,\n            '@reference is not supported with list types. Consider wrapping the reference in a child entity or value object type.');\n    });\n\n    it('accepts non-list references', () => {\n        assertValidatorAccepts(`\n            type Stuff @rootEntity {\n                foo: String @key\n            }\n            type RefStuff @rootEntity {\n                stuff: Stuff @reference\n            }\n        `);\n    })\n\n});\n", "id": "cruddl:spec/schema/ast-validation-modules/no-lists-of-references-validator.spec.ts:9637f5b5-79bf-40e7-9829-3dc758bd68f7"}
{"path": "tutorials/cloud-iot-firestore-config/functions/src/index.ts", "project_name": "community", "text": "<filename>tutorials/cloud-iot-firestore-config/functions/src/index.ts\n/*\n# Copyright Google Inc. 2018\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#   https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n*/\n'use strict';\n\nimport cbor = require('cbor');\n\nimport * as admin from \"firebase-admin\";\nimport * as functions from 'firebase-functions';\nconst iot = require('@google-cloud/iot');\nconst client = new iot.v1.DeviceManagerClient();\n\n// start cloud function\nexports.configUpdate = functions.firestore\n  // assumes a document whose ID is the same as the deviceid\n  .document('device-configs/{deviceId}')\n  .onWrite(async (change: functions.Change<admin.firestore.DocumentSnapshot>, context?: functions.EventContext) => {\n    if (context) {\n      console.log(context.params.deviceId);\n      const request = generateRequest(context.params.deviceId, change.after.data(), false);\n      return client.modifyCloudToDeviceConfig(request);\n    } else {\n      throw(Error(\"no context from trigger\"));\n    }\n  });\n\nexports.configUpdateBinary = functions.firestore\n  // assumes a document whose ID is the same as the deviceid\n  .document('device-configs-binary/{deviceId}')\n  .onWrite(async (change: functions.Change<admin.firestore.DocumentSnapshot>, context?: functions.EventContext) => {\n    if (context) {\n      console.log(context.params.deviceId);\n      const request = generateRequest(context.params.deviceId, change.after.data(), true);\n      return client.modifyCloudToDeviceConfig(request);\n    } else {\n      throw(Error(\"no context from trigger\"));\n    }\n  });\n\nfunction generateRequest(deviceId:string, configData:any, isBinary:Boolean) {\n  const formattedName = client.devicePath(process.env.GCLOUD_PROJECT, functions.config().iot.core.region, functions.config().iot.core.registry, deviceId);\n  let dataValue;\n  if (isBinary) {\n    const encoded = cbor.encode(configData);\n    dataValue = encoded.toString(\"base64\");\n  } else {\n    dataValue = Buffer.from(JSON.stringify(configData)).toString(\"base64\");\n  }\n  return {\n    name: formattedName,\n    binaryData: dataValue\n  };\n}\n", "id": "community:tutorials/cloud-iot-firestore-config/functions/src/index.ts:90244dfb-bd95-48f2-852c-fe757d81b8e1"}
{"path": "packages/watchmen-web-client/src/admin/pipelines/catalog/header/header-pick-topics-button.tsx", "project_name": "watchmen", "text": "import {Topic, TopicId} from '@/services/data/tuples/topic-types';\nimport {Button} from '@/widgets/basic/button';\nimport {ICON_TOPIC} from '@/widgets/basic/constants';\nimport {PageHeaderButton} from '@/widgets/basic/page-header-buttons';\nimport {ButtonInk} from '@/widgets/basic/types';\nimport {DialogFooter, DialogLabel} from '@/widgets/dialog/widgets';\nimport {useEventBus} from '@/widgets/events/event-bus';\nimport {EventTypes} from '@/widgets/events/types';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport React, {useState} from 'react';\nimport {useCatalogEventBus} from '../catalog-event-bus';\nimport {CatalogEventTypes} from '../catalog-event-bus-types';\nimport {createInitTopicRect} from '../graphics-utils';\nimport {AssembledPipelinesGraphics} from '../types';\nimport {TopicPickerTable} from './topic-picker-table';\nimport {PICKER_DIALOG_HEIGHT, PickerDialogBody} from './widgets';\n\nconst TopicPicker = (props: {\n\ttopics: Array<Topic>;\n\tgraphics: AssembledPipelinesGraphics;\n\tonConfirm: (topics: Array<Topic>) => void\n}) => {\n\tconst {topics, graphics, onConfirm} = props;\n\n\tconst {fire} = useEventBus();\n\tconst [candidates] = useState(() => {\n\t\tconst inGraphicsTopics = graphics.topics.map(t => t.topic);\n\t\treturn topics.map(topic => {\n\t\t\treturn {topic, picked: inGraphicsTopics.includes(topic)};\n\t\t});\n\t});\n\n\tconst onConfirmClicked = () => {\n\t\tonConfirm(candidates.filter(c => c.picked).map(({topic}) => topic));\n\t\tfire(EventTypes.HIDE_DIALOG);\n\t};\n\tconst onCancelClicked = () => {\n\t\tfire(EventTypes.HIDE_DIALOG);\n\t};\n\n\treturn <>\n\t\t<PickerDialogBody>\n\t\t\t<DialogLabel>Please select topics</DialogLabel>\n\t\t\t<TopicPickerTable candidates={candidates}/>\n\t\t</PickerDialogBody>\n\t\t<DialogFooter>\n\t\t\t<Button ink={ButtonInk.PRIMARY} onClick={onConfirmClicked}>Confirm</Button>\n\t\t\t<Button ink={ButtonInk.WAIVE} onClick={onCancelClicked}>Cancel</Button>\n\t\t</DialogFooter>\n\t</>;\n};\n\nexport const HeaderPickTopicsButton = (props: {\n\ttopics: Array<Topic>;\n\tgraphics: AssembledPipelinesGraphics;\n}) => {\n\tconst {topics, graphics} = props;\n\n\tconst {fire: fireGlobal} = useEventBus();\n\tconst {fire} = useCatalogEventBus();\n\n\tconst onConfirm = (topics: Array<Topic>) => {\n\t\tconst selection = topics.reduce((map, topic) => {\n\t\t\tmap[topic.topicId] = topic;\n\t\t\treturn map;\n\t\t}, {} as Record<TopicId, Topic>);\n\t\tconst exists = graphics.topics.reduce((map, {topic}) => {\n\t\t\tmap[topic.topicId] = topic;\n\t\t\treturn map;\n\t\t}, {} as Record<TopicId, Topic>);\n\t\tgraphics.topics = [\n\t\t\t// remove unpicked\n\t\t\t...graphics.topics.filter(({topic}) => selection[topic.topicId]),\n\t\t\t// picked, but not exists\n\t\t\t...topics.filter(topic => !exists[topic.topicId]).map(topic => {\n\t\t\t\treturn {topic, rect: createInitTopicRect()};\n\t\t\t})\n\t\t];\n\t\tfire(CatalogEventTypes.TOPICS_SELECTED, graphics);\n\t};\n\tconst onPickClicked = () => {\n\t\t// eslint-disable-next-line\n\t\tconst candidates = topics.sort((g1, g2) => {\n\t\t\treturn (g1.name || '').toLowerCase().localeCompare((g2.name || '').toLowerCase());\n\t\t});\n\t\tfireGlobal(EventTypes.SHOW_DIALOG,\n\t\t\t<TopicPicker topics={candidates} graphics={graphics} onConfirm={onConfirm}/>,\n\t\t\t{\n\t\t\t\tmarginTop: '10vh',\n\t\t\t\tmarginLeft: '20%',\n\t\t\t\twidth: '60%',\n\t\t\t\theight: PICKER_DIALOG_HEIGHT\n\t\t\t});\n\t};\n\n\treturn <PageHeaderButton tooltip=\"Pick Topics\" onClick={onPickClicked}>\n\t\t<FontAwesomeIcon icon={ICON_TOPIC}/>\n\t</PageHeaderButton>;\n};", "id": "watchmen:packages/watchmen-web-client/src/admin/pipelines/catalog/header/header-pick-topics-button.tsx:8c6161a0-8040-429c-ac3f-bf37a4f486c9"}
{"path": "src/askscript/__tests__/08-objects-records/objects-13-key_case.ast.tsx", "project_name": "askql", "text": "export = (\n  <ask args={<list />}>\n    <let\n      name=\"capitals\"\n      type={\n        <call\n          name=\"map\"\n          args={\n            <list>\n              <ref name=\"string\" />\n            </list>\n          }\n        />\n      }\n      value={\n        <struct>\n          {\"France\"}\n          {\"Paris\"}\n          {\"france\"}\n          {\"paris\"}\n        </struct>\n      }\n    />\n  </ask>\n);\n", "id": "askql:src/askscript/__tests__/08-objects-records/objects-13-key_case.ast.tsx:5782c755-4bca-41cc-a7d7-f277b8d9cea9"}
{"path": "src/app/constants/index.ts", "project_name": "ReactMovieApp", "text": "// easier import for doc\nexport {Color} from \"./Color\";\nexport {FontSize} from \"./FontSize\";\n", "id": "ReactMovieApp:src/app/constants/index.ts:5311822d-b9f3-4899-8bfc-f354c78a43c1"}
{"path": "@types/jdk/javax.management.monitor.CounterMonitorMBean.d.ts", "project_name": "1c", "text": "declare namespace javax {\n  namespace management {\n    namespace monitor {\n\n      interface CounterMonitorMBean extends javax.management.monitor.MonitorMBean {\n        getDerivedGauge(): java.lang.Number\n        getDerivedGaugeTimeStamp(): number\n        getThreshold(): java.lang.Number\n        setThreshold(arg0: java.lang.Number): void\n        getDerivedGauge(arg0: javax.management.ObjectName): java.lang.Number\n        getDerivedGaugeTimeStamp(arg0: javax.management.ObjectName): number\n        getThreshold(arg0: javax.management.ObjectName): java.lang.Number\n        getInitThreshold(): java.lang.Number\n        setInitThreshold(arg0: java.lang.Number): void\n        getOffset(): java.lang.Number\n        setOffset(arg0: java.lang.Number): void\n        getModulus(): java.lang.Number\n        setModulus(arg0: java.lang.Number): void\n        getNotify(): boolean\n        setNotify(arg0: boolean | java.lang.Boolean): void\n        getDifferenceMode(): boolean\n        setDifferenceMode(arg0: boolean | java.lang.Boolean): void\n      }\n\n    }\n  }\n}\n", "id": "1c:@types/jdk/javax.management.monitor.CounterMonitorMBean.d.ts:56f86000-02f3-4193-8b16-d68d3f0cd016"}
{"path": "docs/src/components/CodeSandboxes/index.tsx", "project_name": "react-easy-crop", "text": "import FilledInput from '@material-ui/core/FilledInput'\nimport FormControl from '@material-ui/core/FormControl'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Select from '@material-ui/core/Select'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport React, { useState } from 'react'\n\nconst sandboxes = [\n  { id: 'v69ly910ql', title: 'Basic with hooks' },\n  { id: 'q80jom5ql6', title: 'Basic with class' },\n  { id: 'q8q1mnr01w', title: 'With output of the cropped image' },\n  { id: 'y09komm059', title: 'With image selected by the user' },\n  { id: '53w20p2o3n', title: 'With round crop area and no grid' },\n]\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formControl: {\n      marginBottom: theme.spacing(1),\n      minWidth: 280,\n    },\n  })\n)\n\nconst CodeSandboxes: React.FC = props => {\n  const classes = useStyles(props)\n  const [sandbox, setSandbox] = useState('v69ly910ql')\n  return (\n    <div>\n      <FormControl variant=\"filled\" className={classes.formControl}>\n        <InputLabel htmlFor=\"sandbox-example\">Example</InputLabel>\n        <Select\n          value={sandbox}\n          onChange={e => setSandbox(String(e.target.value))}\n          input={<FilledInput name=\"example\" id=\"sandbox-example\" />}\n        >\n          {sandboxes.map(s => (\n            <MenuItem key={s.id} value={s.id}>\n              {s.title}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <iframe\n        key={`iframe-${sandbox}`}\n        title={`Codesandbox example ${sandbox}`}\n        src={`https://codesandbox.io/embed/${sandbox}?autoresize=1&fontsize=14&hidenavigation=1`}\n        style={{\n          width: '100%',\n          height: 500,\n          border: 0,\n          borderRadius: 4,\n          overflow: 'hidden',\n          marginBottom: 24,\n        }}\n        sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n      />\n    </div>\n  )\n}\n\nexport default CodeSandboxes\n", "id": "react-easy-crop:docs/src/components/CodeSandboxes/index.tsx:642c7964-aa7b-4d6c-8db2-988444a24204"}
{"path": "src/services/globalThisShim.ts", "project_name": "TypeScript", "text": "// We polyfill `globalThis` here so re can reliably patch the global scope\r\n// in the contexts we want to in the same way across script and module formats\r\n\r\n// https://mathiasbynens.be/notes/globalthis\r\n\r\n// #region The polyfill starts here.\r\n/* eslint-disable no-var */\r\n/* @internal */\r\ndeclare var window: {};\r\n/* eslint-enable no-var */\r\n((() => {\r\n    if (typeof globalThis === \"object\") return;\r\n    try {\r\n        Object.defineProperty(Object.prototype, \"__magic__\", {\r\n            get() {\r\n                return this;\r\n            },\r\n            configurable: true\r\n        });\r\n        //@ts-ignore\r\n        __magic__.globalThis = __magic__;\r\n        // The previous line should have made `globalThis` globally\r\n        // available, but it fails in Internet Explorer 10 and older.\r\n        // Detect this failure and fall back.\r\n        if (typeof globalThis === \"undefined\") {\r\n            // Assume `window` exists.\r\n            //@ts-ignore\r\n            window.globalThis = window;\r\n        }\r\n        //@ts-ignore\r\n        delete Object.prototype.__magic__;\r\n    }\r\n    catch (error) {\r\n        // In IE8, Object.defineProperty only works on DOM objects.\r\n        // If we hit this code path, assume `window` exists.\r\n        //@ts-ignore\r\n        window.globalThis = window;\r\n    }\r\n})());\r\n// #endregion The polyfill ends here.\r\n\r\n// if `process` is undefined, we're probably not running in node - patch legacy members onto the global scope\r\n// @ts-ignore\r\nif (typeof process === \"undefined\" || process.browser) {\r\n    /// TODO: this is used by VS, clean this up on both sides of the interface\r\n\r\n    //@ts-ignore\r\n    globalThis.TypeScript = globalThis.TypeScript || {};\r\n    //@ts-ignore\r\n    globalThis.TypeScript.Services = globalThis.TypeScript.Services || {};\r\n    //@ts-ignore\r\n    globalThis.TypeScript.Services.TypeScriptServicesFactory = ts.TypeScriptServicesFactory;\r\n\r\n    // 'toolsVersion' gets consumed by the managed side, so it's not unused.\r\n    // TODO: it should be moved into a namespace though.\r\n\r\n    //@ts-ignore\r\n    globalThis.toolsVersion = ts.versionMajorMinor;\r\n}", "id": "TypeScript:src/services/globalThisShim.ts:cba9d883-4ff8-43c4-ac8f-6e26b2fb0028"}
{"path": "kafka-manager-console/src/container/alarm/alarm-detail/alarm-history.tsx", "project_name": "kafka-manager", "text": "import * as React from 'react';\nimport { Table, Button } from 'component/antd';\nimport { urlPrefix } from 'constants/left-menu';\nimport moment from 'moment';\nimport { alarm } from 'store/alarm';\nimport Url from 'lib/url-parser';\nimport { SearchAndFilterContainer } from 'container/search-filter';\nimport { IMonitorAlerts } from 'types/base-type';\nimport './index.less';\nimport { observer } from 'mobx-react';\nimport { timeFormat } from 'constants/strategy';\n\n@observer\nexport class AlarmHistory extends SearchAndFilterContainer {\n  public id: number = null;\n  public startTime: any = moment().subtract(3, 'day').format('x');\n  public endTime: any = moment().endOf('day').format('x');\n\n  public state = {\n    filterStatus: false,\n  };\n\n  constructor(props: any) {\n    super(props);\n    const url = Url();\n    this.id = Number(url.search.id);\n  }\n\n  public historyCreateTime(value?: number) {\n    this.startTime = value ? moment().subtract(7, 'day').format('x') : moment().subtract(3, 'day').format('x');\n    this.endTime = moment().format('x');\n    alarm.getMonitorAlerts(this.id, this.startTime, this.endTime);\n  }\n\n  public historySelect() {\n    return(\n      <>\n      <div className=\"alarm-history-day\">\n        <Button onClick={() => this.historyCreateTime()}>近三天</Button>\n        <Button onClick={() => this.historyCreateTime(7)}>近一周</Button>\n      </div>\n      </>\n    );\n  }\n\n  public historyTable() {\n    const monitorAlerts: IMonitorAlerts[] = alarm.monitorAlerts ? alarm.monitorAlerts : [];\n    const alertStatus = Object.assign({\n      title: '状态',\n      dataIndex: 'alertStatus',\n      key: 'alertStatus',\n      filters: [{ text: '故障', value: '0' }, { text: '已恢复', value: '1' }],\n      onFilter: (value: string, record: IMonitorAlerts) => record.alertStatus === Number(value),\n      render: (t: number) => t === 0 ? '故障' : '已恢复',\n    }, this.renderColumnsFilter('filterStatus'));\n\n    const columns = [\n      {\n        title: '监控名称',\n        dataIndex: 'monitorName',\n        key: 'monitorName',\n        render: (text: string, record: IMonitorAlerts) => (\n          <a href={`${urlPrefix}/alarm/history-detail?alertId=${record.alertId}`}> {text} </a>),\n      },\n      {\n        title: '开始时间',\n        dataIndex: 'startTime',\n        key: 'startTime',\n        render: (time: number) => moment(time).format(timeFormat),\n      },\n      {\n        title: '结束时间',\n        dataIndex: 'endTime',\n        key: 'endTime',\n        render: (time: number) => moment(time).format(timeFormat),\n      },\n      alertStatus,\n      {\n        title: '监控级别',\n        dataIndex: 'monitorPriority',\n        key: 'monitorPriority',\n      },\n    ];\n    return (\n      <>\n        <Table rowKey=\"key\" dataSource={monitorAlerts} columns={columns} loading={alarm.loading}/>\n      </>\n    );\n  }\n\n  public componentDidMount() {\n    alarm.getMonitorAlerts(this.id, this.startTime, this.endTime);\n  }\n\n  public render() {\n    return(\n      <>\n      {this.historySelect()}\n      {this.historyTable()}\n      </>\n    );\n  }\n}\n", "id": "kafka-manager:kafka-manager-console/src/container/alarm/alarm-detail/alarm-history.tsx:0fd2a342-a9a8-41fd-9463-d57d3798e9f1"}
{"path": "apps/api/src/app/testing/usecases/create-session/create-session.command.ts", "project_name": "notifire", "text": "import { CommandHelper } from '../../../shared/commands/command.helper';\n\nexport class CreateSessionCommand {\n  static create(data: CreateSessionCommand) {\n    return CommandHelper.create(CreateSessionCommand, data);\n  }\n}\n", "id": "notifire:apps/api/src/app/testing/usecases/create-session/create-session.command.ts:8ce83013-dbff-4071-afc2-b4d485242428"}
{"path": "src/components/sidebarMain/index.ts", "project_name": "react-social-network", "text": "import SidebarMainComponent from './SidebarMainComponent'\nexport default SidebarMainComponent\n", "id": "react-social-network:src/components/sidebarMain/index.ts:d5a5ae5e-9c4d-4a26-8ebe-5124ff5d48d6"}
{"path": "tests/cases/conformance/es6/Symbols/symbolProperty26.ts", "project_name": "TypeScript", "text": "//@target: ES6\r\nclass C1 {\r\n    [Symbol.toStringTag]() {\r\n        return \"\";\r\n    }\r\n}\r\n\r\nclass C2 extends C1 {\r\n    [Symbol.toStringTag]() {\r\n        return \"\";\r\n    }\r\n}", "id": "TypeScript:tests/cases/conformance/es6/Symbols/symbolProperty26.ts:0d2293f3-df1f-4ab8-85c6-96321e9b6e41"}
{"path": "components-dataset/validator/ValidationResult.tsx", "project_name": "choerodon-ui", "text": "import { ValidationMessages } from './Validator';\nimport { ValidatorProps } from './rules';\nimport { getGlobalConfig } from '../utils';\n\nexport default class ValidationResult {\n  private $validationMessage?: string;\n\n  get validationMessage(): any {\n    const { $validationMessage, injectionOptions } = this;\n    if ($validationMessage && injectionOptions) {\n      const { name, dataSet } = this.validationProps;\n      return getGlobalConfig('validationMessageFormatter', dataSet && dataSet.getField(name))($validationMessage, injectionOptions);\n    }\n    return $validationMessage;\n  }\n\n  set validationMessage(validationMessage: any) {\n    this.$validationMessage = validationMessage;\n  }\n\n  injectionOptions?: object;\n\n  value?: any;\n\n  ruleName: keyof ValidationMessages;\n\n  validationProps: Partial<ValidatorProps>;\n\n  constructor(props: ValidationResult) {\n    Object.assign(this, props);\n  }\n}\n", "id": "choerodon-ui:components-dataset/validator/ValidationResult.tsx:129a596d-e7d3-4416-9dcc-083608fbd67e"}
{"path": "src/slice/index.d.ts", "project_name": "meta-typing", "text": "import { Tail, Head, Unshift, Reverse, Dec } from '..';\n\n// Creates a slice of an array from start up to, but not including, end:\n// https://lodash.com/docs/4.17.15#slice.\n//\ntype S = Slice<[1, 2, 3, 4, 5, 6], 2, 3>; // [3, 4, 5]\n//\n// This type uses recursive (and not officially supported) type alias, see more:\n// https://github.com/microsoft/TypeScript/issues/26223#issuecomment-513187373.\nexport type Slice<\n  // The array to slice.\n  T extends Array<any>,\n  // The start position.\n  S extends number,\n  // The end position.\n  E extends number,\n  // An internal array to accumulate the result.\n  R extends Array<any> = []\n> = {\n  // We start by checking if the input array is empty. If it is, we reached the end\n  // of the recursion and we return the results we accumulated so far.\n  // We reverse it first since we keep inserting elements to it from the beggining (using\n  // Unshift):\n  finish: Reverse<R>;\n  // Next up, we check if the start number is 0. If it's not, we run the recursion again\n  // on the rest of the array and decrease its value by 1 and wait until it gets to 1:\n  skip: Slice<Tail<T>, Dec<S>, E>;\n  // If the start position is 0, we check if the end position is 0 too. If it is, then we've\n  // finished with the recursion and return the reversed accumulated result (R). Otherwise,\n  // we run the recursion again on the rest of the array, with the same start position (0),\n  // decrease the end position by 1, and also push the current element into our accumulator:\n  insert: Slice<Tail<T>, S, Dec<E>, Unshift<R, Head<T>>>;\n  // For example, calling Slice<[1, 2, 3, 4], 1, 2> will first translate into:\n  // Slice<[2, 3, 4], 0, 2, []>. Notice that the first element was dropped because the start\n  // position wasn't 0 yet, and the recursion runs again on the reset of the array.\n  //\n  // Next, the recursion will look like this: Slice<[3, 4], 0, 1, [2]>. Notice that now, with\n  // the start position being 0, the first element of the array (2) was inserted into the\n  // accumulator, and the value of the end position was reduced by 1. The recursion then runs\n  // on the rest of the array.\n  //\n  // Then, it will look like this: Slice<[4], 0, 0, [3, 2]>. Again, since start position is 0\n  // and the end position isn't 0, the first element (3) is inserted into the accumulator\n  // and the recursion runs on the rest of the array and decreases the end position by 1.\n  //\n  // Finally, now that both the start and end positions are 0, the reversed accumulator is\n  // returned which results with: [2, 3].\n}[T extends []\n  ? 'finish'\n  : S extends 0\n  ? E extends 0\n    ? 'finish'\n    : 'insert'\n  : 'skip'];\n", "id": "meta-typing:src/slice/index.d.ts:5ca11c7e-bcc9-47e1-9708-c154ead01fc7"}
{"path": "packages/amplify-category-api/src/provider-utils/awscloudformation/apigw-input-state.ts", "project_name": "amplify-cli", "text": "import {\n  $TSContext,\n  $TSObject,\n  AmplifyCategories,\n  AmplifySupportedService,\n  CLIInputSchemaValidator,\n  getMigrateResourceMessageForOverride,\n  isResourceNameUnique,\n  JSONUtilities,\n  PathConstants,\n  pathManager,\n  stateManager,\n} from 'amplify-cli-core';\nimport { printer, prompter } from 'amplify-prompts';\nimport * as fs from 'fs-extra';\nimport { join } from 'path';\nimport { ApigwInputs, ApigwStackTransform, CrudOperation, Path, PermissionSetting } from './cdk-stack-builder';\nimport { ApigwWalkthroughReturnPromise } from './service-walkthrough-types/apigw-types';\n\nexport class ApigwInputState {\n  projectRootPath: string;\n  resourceName: string;\n  paths: { [pathName: string]: Path };\n\n  constructor(private readonly context: $TSContext, resourceName?: string) {\n    this.projectRootPath = pathManager.findProjectRoot();\n    this.resourceName = resourceName;\n  }\n\n  public addAdminQueriesResource = async (adminQueriesProps: AdminQueriesProps) => {\n    this.resourceName = adminQueriesProps.apiName;\n    this.paths = {\n      '/{proxy+}': {\n        lambdaFunction: adminQueriesProps.functionName,\n        permissions: {\n          setting: PermissionSetting.PRIVATE,\n          auth: [CrudOperation.CREATE, CrudOperation.READ, CrudOperation.UPDATE, CrudOperation.DELETE],\n        },\n      },\n    };\n\n    await this.createApigwArtifacts();\n\n    // Update amplify-meta and backend-config\n    const backendConfigs = {\n      service: AmplifySupportedService.APIGW,\n      providerPlugin: 'awscloudformation',\n      authorizationType: 'AMAZON_COGNITO_USER_POOLS',\n      dependsOn: adminQueriesProps.dependsOn,\n    };\n\n    await this.context.amplify.updateamplifyMetaAfterResourceAdd(AmplifyCategories.API, adminQueriesProps.apiName, backendConfigs);\n  };\n\n  public updateAdminQueriesResource = async (adminQueriesProps: AdminQueriesProps) => {\n    this.resourceName = adminQueriesProps.apiName;\n    this.paths = {\n      '/{proxy+}': {\n        lambdaFunction: adminQueriesProps.functionName,\n        permissions: {\n          setting: PermissionSetting.PRIVATE,\n          auth: [CrudOperation.CREATE, CrudOperation.READ, CrudOperation.UPDATE, CrudOperation.DELETE],\n        },\n      },\n    };\n\n    await this.createApigwArtifacts();\n\n    await this.context.amplify.updateamplifyMetaAfterResourceUpdate(\n      AmplifyCategories.API,\n      adminQueriesProps.apiName,\n      'dependsOn',\n      adminQueriesProps.dependsOn,\n    );\n  };\n\n  public addApigwResource = async (serviceWalkthroughPromise: ApigwWalkthroughReturnPromise, options: $TSObject) => {\n    const { answers } = await serviceWalkthroughPromise;\n\n    this.resourceName = answers.resourceName;\n    this.paths = answers.paths;\n    options.dependsOn = answers.dependsOn;\n\n    isResourceNameUnique(AmplifyCategories.API, this.resourceName);\n\n    await this.createApigwArtifacts();\n\n    this.context.amplify.updateamplifyMetaAfterResourceAdd(AmplifyCategories.API, this.resourceName, options);\n    return this.resourceName;\n  };\n\n  public updateApigwResource = async (updateWalkthroughPromise: Promise<$TSObject>) => {\n    const { answers } = await updateWalkthroughPromise;\n\n    this.resourceName = answers.resourceName;\n    this.paths = answers.paths;\n\n    await this.createApigwArtifacts();\n\n    this.context.amplify.updateamplifyMetaAfterResourceUpdate(AmplifyCategories.API, this.resourceName, 'dependsOn', answers.dependsOn);\n    return this.resourceName;\n  };\n\n  public migrateAdminQueries = async (adminQueriesProps: AdminQueriesProps) => {\n    this.resourceName = this.resourceName ?? adminQueriesProps.apiName;\n    if (!(await prompter.yesOrNo(getMigrateResourceMessageForOverride(AmplifyCategories.API, this.resourceName, true), true))) {\n      return;\n    }\n    const resourceDirPath = pathManager.getResourceDirectoryPath(this.projectRootPath, AmplifyCategories.API, this.resourceName);\n\n    fs.removeSync(join(resourceDirPath, PathConstants.ParametersJsonFileName));\n    fs.removeSync(join(resourceDirPath, 'admin-queries-cloudformation-template.json'));\n\n    return this.updateAdminQueriesResource(adminQueriesProps);\n  };\n\n  public migrateApigwResource = async (resourceName: string) => {\n    this.resourceName = this.resourceName ?? resourceName;\n    if (!(await prompter.yesOrNo(getMigrateResourceMessageForOverride(AmplifyCategories.API, this.resourceName, true), true))) {\n      return;\n    }\n    const deprecatedParametersFileName = 'api-params.json';\n    const resourceDirPath = pathManager.getResourceDirectoryPath(this.projectRootPath, AmplifyCategories.API, this.resourceName);\n    const deprecatedParametersFilePath = join(resourceDirPath, deprecatedParametersFileName);\n    let deprecatedParameters: $TSObject;\n    try {\n      deprecatedParameters = JSONUtilities.readJson<$TSObject>(deprecatedParametersFilePath);\n    } catch (e) {\n      printer.error(`Error reading ${deprecatedParametersFileName} file for ${this.resourceName} resource`);\n      throw e;\n    }\n\n    this.paths = {};\n\n    function _convertDeprecatedPermissionStringToCRUD(deprecatedPrivacy: string) {\n      let privacyList: string[];\n      if (deprecatedPrivacy === 'r') {\n        privacyList = [CrudOperation.READ];\n      } else if (deprecatedPrivacy === 'rw') {\n        privacyList = [CrudOperation.CREATE, CrudOperation.READ, CrudOperation.UPDATE, CrudOperation.DELETE];\n      }\n      return privacyList;\n    }\n\n    function _convertDeprecatedPermissionArrayToCRUD(deprecatedPrivacyArray: string[]): CrudOperation[] {\n      const opMap: Record<string, CrudOperation> = {\n        '/POST': CrudOperation.CREATE,\n        '/GET': CrudOperation.READ,\n        '/PUT': CrudOperation.UPDATE,\n        '/PATCH': CrudOperation.UPDATE,\n        '/DELETE': CrudOperation.DELETE,\n      };\n      return Array.from(new Set(deprecatedPrivacyArray.map(op => opMap[op])));\n    }\n\n    if (!Array.isArray(deprecatedParameters.paths) || deprecatedParameters.paths.length < 1) {\n      throw new Error(`Expected paths to be defined in \"${deprecatedParametersFilePath}\", but none found.`);\n    }\n\n    deprecatedParameters.paths.forEach((path: $TSObject) => {\n      let pathPermissionSetting =\n        path.privacy?.open === true\n          ? PermissionSetting.OPEN\n          : path.privacy?.private === true\n          ? PermissionSetting.PRIVATE\n          : PermissionSetting.PROTECTED;\n\n      let auth;\n      let guest;\n      let groups;\n      // convert deprecated permissions to CRUD structure\n      if (typeof path.privacy?.auth === 'string' && ['r', 'rw'].includes(path.privacy.auth)) {\n        auth = _convertDeprecatedPermissionStringToCRUD(path.privacy.auth);\n      } else if (Array.isArray(path.privacy?.auth)) {\n        auth = _convertDeprecatedPermissionArrayToCRUD(path.privacy.auth);\n      }\n\n      if (typeof path.privacy?.unauth === 'string' && ['r', 'rw'].includes(path.privacy.unauth)) {\n        guest = _convertDeprecatedPermissionStringToCRUD(path.privacy.unauth);\n      } else if (Array.isArray(path.privacy?.unauth)) {\n        guest = _convertDeprecatedPermissionArrayToCRUD(path.privacy.unauth);\n      }\n\n      if (path.privacy?.userPoolGroups) {\n        groups = {};\n        for (const [userPoolGroupName, crudOperations] of Object.entries(path.privacy.userPoolGroups)) {\n          if (typeof crudOperations === 'string' && ['r', 'rw'].includes(crudOperations)) {\n            groups[userPoolGroupName] = _convertDeprecatedPermissionStringToCRUD(crudOperations);\n          } else if (Array.isArray(crudOperations)) {\n            groups[userPoolGroupName] = _convertDeprecatedPermissionArrayToCRUD(crudOperations);\n          }\n        }\n      }\n\n      this.paths[path.name] = {\n        permissions: {\n          setting: pathPermissionSetting,\n          auth,\n          guest,\n          groups,\n        },\n        lambdaFunction: path.lambdaFunction,\n      };\n    });\n\n    fs.removeSync(deprecatedParametersFilePath);\n    fs.removeSync(join(resourceDirPath, PathConstants.ParametersJsonFileName));\n    fs.removeSync(join(resourceDirPath, `${this.resourceName}-cloudformation-template.json`));\n\n    await this.createApigwArtifacts();\n  };\n\n  public cliInputsFileExists() {\n    return stateManager.resourceInputsJsonExists(this.projectRootPath, AmplifyCategories.API, this.resourceName);\n  }\n\n  public getCliInputPayload() {\n    return stateManager.getResourceInputsJson(this.projectRootPath, AmplifyCategories.API, this.resourceName);\n  }\n\n  public isCLIInputsValid(cliInputs?: ApigwInputs) {\n    if (!cliInputs) {\n      cliInputs = this.getCliInputPayload();\n    }\n\n    const schemaValidator = new CLIInputSchemaValidator(AmplifySupportedService.APIGW, AmplifyCategories.API, 'APIGatewayCLIInputs');\n    schemaValidator.validateInput(JSONUtilities.stringify(cliInputs));\n  }\n\n  private async createApigwArtifacts() {\n    const resourceDirPath = pathManager.getResourceDirectoryPath(this.projectRootPath, AmplifyCategories.API, this.resourceName);\n    fs.ensureDirSync(resourceDirPath);\n\n    const buildDirPath = join(resourceDirPath, PathConstants.BuildDirName);\n    fs.ensureDirSync(buildDirPath);\n\n    stateManager.setResourceInputsJson(this.projectRootPath, AmplifyCategories.API, this.resourceName, { version: 1, paths: this.paths });\n\n    stateManager.setResourceParametersJson(this.projectRootPath, AmplifyCategories.API, this.resourceName, {});\n\n    const stack = new ApigwStackTransform(this.context, this.resourceName, this);\n    await stack.transform();\n  }\n}\n\nexport type AdminQueriesProps = {\n  apiName: string;\n  functionName: string;\n  authResourceName: string;\n  dependsOn: $TSObject[];\n};\n", "id": "amplify-cli:packages/amplify-category-api/src/provider-utils/awscloudformation/apigw-input-state.ts:c8b221db-17c3-4906-a50c-6b864e383071"}
{"path": "lib/security.ts", "project_name": "ng-openapi-gen", "text": "import { OpenAPIObject, SecuritySchemeObject } from 'openapi3-ts';\nimport { tsComments, tsType, methodName } from './gen-utils';\nimport { Options } from './options';\n\n/**\n * An operation security\n */\nexport class Security {\n  /**\n   * variable name\n   */\n  var: string;\n\n  /**\n   * Header Name\n   */\n  name: string;\n\n  /**\n   * Property Description\n   */\n  tsComments: string;\n\n  /**\n   * Location of security parameter\n   */\n  in: string;\n  type: string;\n\n  constructor(key: string, public spec: SecuritySchemeObject, public scope: string[] = [], options: Options, openApi: OpenAPIObject) {\n    this.name = spec.name || '';\n    this.var = methodName(key);\n    this.tsComments = tsComments(spec.description || '', 2);\n    this.in = spec.in || 'header';\n    this.type = tsType(spec.schema, options, openApi);\n  }\n}\n", "id": "ng-openapi-gen:lib/security.ts:5e15693d-ceeb-44bc-8ef0-d15744343397"}
{"path": "giraffe/src/constants/colorSchemes.ts", "project_name": "giraffe", "text": "export enum InfluxColors {\n  // Greys\n  Obsidian = '#0f0e15',\n  Raven = '#181820',\n  Kevlar = '#202028',\n  Castle = '#292933',\n  Onyx = '#31313d',\n  Pepper = '#383846',\n  Smoke = '#434453',\n  Graphite = '#545667',\n  Storm = '#676978',\n  Mountain = '#757888',\n  Wolf = '#8e91a1',\n  Sidewalk = '#999dab',\n  Forge = '#a4a8b6',\n  Mist = '#bec2cc',\n  Chromium = '#c6cad3',\n  Platinum = '#d4d7dd',\n  Pearl = '#e7e8eb',\n  Whisper = '#eeeff2',\n  Cloud = '#f6f6f8',\n  Ghost = '#fafafc',\n  White = '#ffffff',\n  // Blues\n  Abyss = '#120653',\n  Sapphire = '#0b3a8d',\n  Ocean = '#066fc5',\n  Pool = '#00a3ff',\n  Laser = '#00C9FF',\n  Hydrogen = '#6BDFFF',\n  Neutrino = '#BEF0FF',\n  Yeti = '#F0FCFF',\n  // Purples\n  Shadow = '#2b007e',\n  Void = '#5c10a0',\n  Amethyst = '#8e1fc3',\n  Star = '#be2ee4',\n  Comet = '#ce58eb',\n  Potassium = '#dd84f1',\n  Moonstone = '#ebadf8',\n  Twilight = '#fad9ff',\n  // Greens\n  Gypsy = '#003e34',\n  Emerald = '#006f49',\n  Viridian = '#009f5f',\n  Rainforest = '#34bb55',\n  Honeydew = '#67d74e',\n  Krypton = '#9bf445',\n  Wasabi = '#c6f98e',\n  Mint = '#f3ffd6',\n  // Yellows\n  Oak = '#3F241F',\n  Topaz = '#E85B1C',\n  Tiger = '#F48D38',\n  Pineapple = '#FFB94A',\n  Thunder = '#FFD255',\n  Sulfur = '#FFE480',\n  Daisy = '#FFF6B8',\n  Banana = '#FFFDDE',\n  // Reds\n  Basalt = '#2F1F29',\n  Ruby = '#BF3D5E',\n  Fire = '#DC4E58',\n  Curacao = '#F95F53',\n  Dreamsicle = '#FF8564',\n  Tungsten = '#FFB6A0',\n  Marmelade = '#FFDCCF',\n  Flan = '#FFF7F4',\n  // Brand Colors\n  Chartreuse = '#D6F622',\n  DeepPurple = '#13002D',\n  Magenta = '#BF2FE5',\n  Galaxy = '#9394FF',\n  Pulsar = '#513CC6',\n}\n\nexport const VIRIDIS = [\n  '#440154',\n  '#481f70',\n  '#443983',\n  '#3b528b',\n  '#31688e',\n  '#287c8e',\n  '#21918c',\n  '#20a486',\n  '#35b779',\n  '#5ec962',\n  '#90d743',\n  '#c8e020',\n]\n\nexport const MAGMA = [\n  '#000004',\n  '#100b2d',\n  '#2c115f',\n  '#51127c',\n  '#721f81',\n  '#932b80',\n  '#b73779',\n  '#d8456c',\n  '#f1605d',\n  '#fc8961',\n  '#feb078',\n  '#fed799',\n]\n\nexport const INFERNO = [\n  '#000004',\n  '#110a30',\n  '#320a5e',\n  '#57106e',\n  '#781c6d',\n  '#9a2865',\n  '#bc3754',\n  '#d84c3e',\n  '#ed6925',\n  '#f98e09',\n  '#fbb61a',\n  '#f4df53',\n]\n\nexport const PLASMA = [\n  '#0d0887',\n  '#3a049a',\n  '#5c01a6',\n  '#7e03a8',\n  '#9c179e',\n  '#b52f8c',\n  '#cc4778',\n  '#de5f65',\n  '#ed7953',\n  '#f89540',\n  '#fdb42f',\n  '#fbd524',\n]\n\nexport const YL_OR_RD = [\n  '#ffffcc',\n  '#ffeda0',\n  '#fed976',\n  '#feb24c',\n  '#fd8d3c',\n  '#fc4e2a',\n  '#e31a1c',\n  '#bd0026',\n  '#800026',\n]\n\nexport const YL_GN_BU = [\n  '#ffffd9',\n  '#edf8b1',\n  '#c7e9b4',\n  '#7fcdbb',\n  '#41b6c4',\n  '#1d91c0',\n  '#225ea8',\n  '#253494',\n  '#081d58',\n]\n\nexport const BU_GN = [\n  '#f7fcfd',\n  '#ebf7fa',\n  '#dcf2f2',\n  '#c8eae4',\n  '#aadfd2',\n  '#88d1bc',\n  '#68c2a3',\n  '#4eb485',\n  '#37a266',\n  '#228c49',\n  '#0d7635',\n  '#025f27',\n]\n\n// Chronograf Colors\nexport const NINETEEN_EIGHTY_FOUR = ['#31C0F6', '#BC00B8', '#FF7E27']\nexport const ATLANTIS = ['#74D495', '#4949EA', '#FF4D9E']\nexport const DO_ANDROIDS_DREAM = ['#8F8AF4', '#A51414', '#F4CF31']\nexport const DELOREAN = ['#FD7A5D', '#5F1CF2', '#4CE09A']\nexport const CTHULHU = ['#FDC44F', '#007C76', '#8983FF']\nexport const ECTOPLASM = ['#DA6FF1', '#00717A', '#ACFF76']\nexport const PRIMARY = ['#00A3FF', '#67D74E', '#FFD255', '#DC4E58']\nexport const PRIMARY_REVERSE = ['#DC4E58', '#FFD255', '#67D74E', '#00A3FF']\nexport const T_MAX_400_FILM = ['#F6F6F8', '#A4A8B6', '#545667']\nexport const RAINBOW_EIGHT = [\n  '#00f8ff',\n  '#33a8ff',\n  '#784dff',\n  '#da07ff',\n  '#FF0000',\n  '#FFC200',\n  '#85F700',\n  '#00b15d',\n]\nexport const RAINBOW_SIXTEEN = [\n  '#4dfaff',\n  '#00adb2',\n  '#71c2ff',\n  '#2475b2',\n  '#a183ff',\n  '#5436b2',\n  '#e552ff',\n  '#9805b2',\n  '#ff4d4d',\n  '#b20000',\n  '#ffd44d',\n  '#b28700',\n  '#aaf94d',\n  '#5dac00',\n  '#4dc98e',\n  '#007c41',\n]\n\n// Solid Colors\nexport const SOLID_RED = ['#DC4E58', '#DC4E58', '#DC4E58']\nexport const SOLID_YELLOW = ['#FFD255', '#FFD255', '#FFD255']\nexport const SOLID_GREEN = ['#67D74E', '#67D74E', '#67D74E']\nexport const SOLID_BLUE = ['#00A3FF', '#00A3FF', '#00A3FF']\nexport const SOLID_PURPLE = ['#BE2EE4', '#BE2EE4', '#BE2EE4']\n", "id": "giraffe:giraffe/src/constants/colorSchemes.ts:bee9e769-d076-40da-b07a-83f08edb07ce"}
{"path": "packages/react-next/src/Slider.ts", "project_name": "fluentui", "text": "export * from './components/Slider/index';\n", "id": "fluentui:packages/react-next/src/Slider.ts:7032ea19-de6c-4e8d-a3a7-a691c19e0df6"}
{"path": "types/carbon__icons-react/es/stop--outline--filled/24.d.ts", "project_name": "DefinitelyTyped", "text": "export { StopOutlineFilled24 as default } from \"../../\";\n", "id": "DefinitelyTyped:types/carbon__icons-react/es/stop--outline--filled/24.d.ts:bad51816-e20b-4774-8cae-49476a83fdf4"}
{"path": "Calla/resonance-audio/Direction.d.ts", "project_name": "Calla", "text": "export declare enum Direction {\n    Left = \"left\",\n    Right = \"right\",\n    Front = \"front\",\n    Back = \"back\",\n    Down = \"down\",\n    Up = \"up\"\n}\n", "id": "Calla:Calla/resonance-audio/Direction.d.ts:42f9a1f6-8122-4a0a-bdd9-92c3a4a91325"}
{"path": "src/transformer/descriptor/method/functionAssignment.ts", "project_name": "ts-auto-mock", "text": "import type * as ts from 'typescript';\nimport { Scope } from '../../scope/scope';\nimport { PropertySignatureCache } from '../property/cache';\nimport { GetReturnTypeFromBodyDescriptor } from './bodyReturnType';\nimport { GetMethodDescriptor } from './method';\n\ntype FunctionAssignment = ts.ArrowFunction | ts.FunctionExpression;\n\nexport function GetFunctionAssignmentDescriptor(\n  node: FunctionAssignment,\n  scope: Scope\n): ts.Expression {\n  const property: ts.PropertyName = PropertySignatureCache.instance.get();\n  const returnValue: ts.Expression = GetReturnTypeFromBodyDescriptor(\n    node,\n    scope\n  );\n\n  return GetMethodDescriptor(property, returnValue);\n}\n", "id": "ts-auto-mock:src/transformer/descriptor/method/functionAssignment.ts:f73610d6-c628-4574-8b0d-0c11e14cb602"}
{"path": "src/routes/safe/components/AddressBook/columns.ts", "project_name": "gnosis-safe-react", "text": "import { List } from 'immutable'\nimport { TableCellProps } from '@material-ui/core/TableCell/TableCell'\n\nexport const ADDRESS_BOOK_ROW_ID = 'address-book-row'\nexport const TX_TABLE_ADDRESS_BOOK_ID = 'idAddressBook'\nexport const AB_NAME_ID = 'name'\nexport const AB_ADDRESS_ID = 'address'\nexport const AB_ADDRESS_ACTIONS_ID = 'actions'\nexport const EDIT_ENTRY_BUTTON = 'edit-entry-btn'\nexport const REMOVE_ENTRY_BUTTON = 'remove-entry-btn'\nexport const SEND_ENTRY_BUTTON = 'send-entry-btn'\n\ntype AddressBookColumn = {\n  id: string\n  order: boolean\n  disablePadding?: boolean\n  label: string\n  width?: number\n  custom?: boolean\n  align?: TableCellProps['align']\n}\n\nexport const generateColumns = (): List<AddressBookColumn> => {\n  const nameColumn = {\n    id: AB_NAME_ID,\n    order: false,\n    disablePadding: false,\n    label: 'Name',\n    width: 150,\n    custom: false,\n    align: 'left',\n  }\n\n  const addressColumn = {\n    id: AB_ADDRESS_ID,\n    order: false,\n    disablePadding: false,\n    label: 'Address',\n    custom: false,\n    align: 'left',\n  }\n\n  const actionsColumn = {\n    id: AB_ADDRESS_ACTIONS_ID,\n    order: false,\n    disablePadding: false,\n    label: '',\n    custom: true,\n  }\n\n  return List([nameColumn, addressColumn, actionsColumn])\n}\n", "id": "gnosis-safe-react:src/routes/safe/components/AddressBook/columns.ts:26896494-1755-49e4-8776-11376d2db350"}
{"path": "packages/turf-rhumb-distance/index.ts", "project_name": "turf", "text": "// https://en.wikipedia.org/wiki/Rhumb_line\nimport { convertLength, Coord, earthRadius, Units } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n\n/**\n * Calculates the distance along a rhumb line between two {@link Point|points} in degrees, radians,\n * miles, or kilometers.\n *\n * @name rhumbDistance\n * @param {Coord} from origin point\n * @param {Coord} to destination point\n * @param {Object} [options] Optional parameters\n * @param {string} [options.units=\"kilometers\"] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.rhumbDistance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction rhumbDistance(\n  from: Coord,\n  to: Coord,\n  options: {\n    units?: Units;\n  } = {}\n): number {\n  const origin = getCoord(from);\n  const destination = getCoord(to);\n\n  // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)\n  // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678\n  destination[0] +=\n    destination[0] - origin[0] > 180\n      ? -360\n      : origin[0] - destination[0] > 180\n      ? 360\n      : 0;\n  const distanceInMeters = calculateRhumbDistance(origin, destination);\n  const distance = convertLength(distanceInMeters, \"meters\", options.units);\n  return distance;\n}\n\n/**\n * Returns the distance travelling from ‘this’ point to destination point along a rhumb line.\n * Adapted from Geodesy: https://github.com/chrisveness/geodesy/blob/master/latlon-spherical.js\n *\n * @private\n * @param   {Array<number>} origin point.\n * @param   {Array<number>} destination point.\n * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).\n * @returns {number} Distance in km between this point and destination point (same units as radius).\n *\n * @example\n *     var p1 = new LatLon(51.127, 1.338);\n *     var p2 = new LatLon(50.964, 1.853);\n *     var d = p1.distanceTo(p2); // 40.31 km\n */\nfunction calculateRhumbDistance(\n  origin: number[],\n  destination: number[],\n  radius?: number\n) {\n  // φ => phi\n  // λ => lambda\n  // ψ => psi\n  // Δ => Delta\n  // δ => delta\n  // θ => theta\n\n  radius = radius === undefined ? earthRadius : Number(radius);\n  // see www.edwilliams.org/avform.htm#Rhumb\n\n  const R = radius;\n  const phi1 = (origin[1] * Math.PI) / 180;\n  const phi2 = (destination[1] * Math.PI) / 180;\n  const DeltaPhi = phi2 - phi1;\n  let DeltaLambda = (Math.abs(destination[0] - origin[0]) * Math.PI) / 180;\n  // if dLon over 180° take shorter rhumb line across the anti-meridian:\n  if (DeltaLambda > Math.PI) {\n    DeltaLambda -= 2 * Math.PI;\n  }\n\n  // on Mercator projection, longitude distances shrink by latitude; q is the 'stretch factor'\n  // q becomes ill-conditioned along E-W line (0/0); use empirical tolerance to avoid it\n  const DeltaPsi = Math.log(\n    Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4)\n  );\n  const q = Math.abs(DeltaPsi) > 10e-12 ? DeltaPhi / DeltaPsi : Math.cos(phi1);\n\n  // distance is pythagoras on 'stretched' Mercator projection\n  const delta = Math.sqrt(\n    DeltaPhi * DeltaPhi + q * q * DeltaLambda * DeltaLambda\n  ); // angular distance in radians\n  const dist = delta * R;\n\n  return dist;\n}\n\nexport default rhumbDistance;\n", "id": "turf:packages/turf-rhumb-distance/index.ts:0d32d31e-ca85-40a6-8696-bdbe39a497c5"}
{"path": "packages/common/src/components/Header/index.tsx", "project_name": "query-lab", "text": "import React from 'react';\nimport { withTheme } from 'styled-components';\n\nimport merge from 'lodash/merge';\nimport omit from 'lodash/omit';\n\nimport { Customizer } from 'office-ui-fabric-react/lib/Utilities';\nimport { CommandBar, ICommandBarProps } from 'office-ui-fabric-react/lib/CommandBar';\n\nimport { getCommandBarFabricTheme } from '../../theme';\nimport { getPlatform, PlatformType } from '../../platform';\n\nexport interface IProps extends ICommandBarProps {}\n\ninterface IPrivateProps extends IProps {\n  theme: ITheme | any; // from withTheme\n}\n\nconst Header = (props: IPrivateProps) => {\n  const items = props.items\n    .filter(({ hidden }) => !hidden)\n    .map(item => ({ ...item, 'data-testid': item.key }));\n  const farItems = props.farItems ? props.farItems.filter(({ hidden }) => !hidden) : [];\n\n  return (\n    <Customizer settings={{ theme: getCommandBarFabricTheme(props.theme) }}>\n      <CommandBar\n        {...merge(omit({ ...props, items, farItems }, ['theme']), {\n          styles: {\n            root: {\n              paddingLeft: 0,\n              paddingRight: {\n                [PlatformType.PC]: '20px',\n                [PlatformType.Mac]: '40px',\n                [PlatformType.OfficeOnline]: '0px',\n              }[getPlatform()],\n            },\n          },\n        })}\n      />\n    </Customizer>\n  );\n};\n\nexport default withTheme(Header);\n", "id": "query-lab:packages/common/src/components/Header/index.tsx:4c4bc16e-28d1-4b56-951e-c33a3c217d41"}
{"path": "client/src/features/blocks/blocks/ButtonBlock.tsx", "project_name": "Toola", "text": "import { Button } from '@blueprintjs/core';\nimport React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport { usePageNavigator } from '../../../hooks/usePageNavigator';\nimport { MenuItemProps } from '../../inspector/components/InspectorItem';\nimport { usePageModal } from '../../pageModal/hooks/usePageModal';\nimport { useAppendBlockMenu } from '../../editor/hooks/blockInspector/useAppendBlockMenu';\nimport { useBlock } from '../../editor/hooks/useBlock';\nimport { useBlockContext } from '../../editor/hooks/useBlockContext';\nimport { useBlockProperty } from '../../editor/hooks/useBlockProperty';\nimport { useCurrent } from '../../editor/hooks/useCurrent';\nimport { useReferenceEvaluator, useReferences } from '../../executor/hooks/useReferences';\nimport { useButtonEventHandler } from '../hooks/useButtonEventHandler';\nimport { CodeBlockType } from './CodeBlock/CodeBlock';\nimport { QueryBlockType } from './QueryBlock/QueryBlock';\n\nexport type ButtonBlockType = ButtonBlockProps;\nexport type ButtonBlockProps = {\n\ttype: 'button';\n\tvalue: string;\n\tname: string;\n};\n\nconst RoundedButton = styled(Button)<{ rounded?: boolean }>`\n\t&.rounded {\n\t}\n\tborder-radius: ${(props) => (props.rounded ? '30px' : '3px')};\n`;\n\nexport function ButtonBlock({ hide }: { hide: boolean }) {\n\tconst { show } = useBlock();\n\tconst { showInspector } = useBlockContext();\n\n\tconst [buttonName, setButtonName] = useBlockProperty('value', '');\n\n\t// eslint-disable-next-line no-template-curly-in-string\n\tconst [rounded, setRounded] = useBlockProperty<string>('rounded', '${false}');\n\tconst roundedCalculated = useReferences(rounded);\n\n\t// eslint-disable-next-line no-template-curly-in-string\n\tconst [minimal, setMinimal] = useBlockProperty<string>('minimal', '${false}');\n\tconst minimalCalculated = useReferences(minimal);\n\n\tconst valueCalculated = useReferences(buttonName);\n\n\tconst { trigger } = useButtonEventHandler(1);\n\n\tconst menu = useMemo<MenuItemProps[]>(\n\t\t() => [\n\t\t\t{\n\t\t\t\tlabel: 'Name',\n\t\t\t\ttype: 'input',\n\t\t\t\tonChange: (v: string) => setButtonName(v),\n\t\t\t\tvalue: buttonName,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'nested',\n\t\t\t\tlabel: 'Style',\n\t\t\t\ticon: 'style',\n\t\t\t\tnext: [\n\t\t\t\t\t{ type: 'input', value: minimal, onChange: setMinimal, label: 'Minimal' },\n\t\t\t\t\t{ type: 'input', value: rounded, onChange: setRounded, label: 'Rounded' },\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t\t[buttonName, minimal, rounded, setButtonName, setMinimal, setRounded],\n\t);\n\n\tuseAppendBlockMenu(menu, 0);\n\n\tif (hide || !show) return null;\n\n\treturn (\n\t\t<>\n\t\t\t<div onContextMenu={showInspector}>\n\t\t\t\t<RoundedButton\n\t\t\t\t\tfill\n\t\t\t\t\trounded={roundedCalculated === true}\n\t\t\t\t\tminimal={minimalCalculated === true}\n\t\t\t\t\tonClick={trigger}\n\t\t\t\t\ttext={valueCalculated}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n", "id": "Toola:client/src/features/blocks/blocks/ButtonBlock.tsx:ff50fe21-5787-49bd-ba20-1d3b2175935f"}
{"path": "test/manual/Blur-test.ts", "project_name": "konva", "text": "import { assert } from 'chai';\n\nimport { addStage, Konva, loadImage } from '../unit/test-utils';\n\ndescribe('Blur', function () {\n  // ======================================================\n  it('basic blur', function (done) {\n    var stage = addStage();\n\n    loadImage('darth-vader.jpg', (imageObj) => {\n      var layer = new Konva.Layer();\n      const darth = new Konva.Image({\n        x: 10,\n        y: 10,\n        image: imageObj,\n        draggable: true,\n      });\n\n      layer.add(darth);\n      stage.add(layer);\n\n      darth.cache();\n      darth.filters([Konva.Filters.Blur]);\n      darth.blurRadius(10);\n\n      assert.equal(darth.blurRadius(), 10);\n      assert.equal(darth._filterUpToDate, false);\n\n      layer.draw();\n\n      assert.equal(darth._filterUpToDate, true);\n\n      darth.blurRadius(20);\n\n      assert.equal(darth.blurRadius(), 20);\n      assert.equal(darth._filterUpToDate, false);\n\n      layer.draw();\n\n      assert.equal(darth._filterUpToDate, true);\n\n      done();\n    });\n  });\n\n  it('blur group', function () {\n    var stage = addStage();\n    var layer = new Konva.Layer();\n    var group = new Konva.Group({\n      x: 100,\n      y: 100,\n      draggable: true,\n    });\n    var top = new Konva.Circle({\n      x: 0,\n      y: -70,\n      radius: 30,\n      fill: 'blue',\n      stroke: 'black',\n      strokeWidth: 4,\n    });\n    var right = new Konva.Circle({\n      x: 70,\n      y: 0,\n      radius: 30,\n      fill: 'blue',\n      stroke: 'black',\n      strokeWidth: 4,\n    });\n    var bottom = new Konva.Circle({\n      x: 0,\n      y: 70,\n      radius: 30,\n      fill: 'blue',\n      stroke: 'black',\n      strokeWidth: 4,\n    });\n    var left = new Konva.Circle({\n      x: -70,\n      y: 0,\n      radius: 30,\n      fill: 'blue',\n      stroke: 'black',\n      strokeWidth: 4,\n    });\n\n    group.add(top).add(right).add(bottom).add(left);\n    layer.add(group);\n    stage.add(layer);\n\n    group.cache();\n\n    group.offset();\n\n    group.filters([Konva.Filters.Blur]);\n    group.blurRadius(20);\n\n    layer.draw();\n  });\n\n  // ======================================================\n  it('tween blur', function (done) {\n    var stage = addStage();\n\n    loadImage('darth-vader.jpg', (imageObj) => {\n      var layer = new Konva.Layer();\n      const darth = new Konva.Image({\n        x: 10,\n        y: 10,\n        image: imageObj,\n        draggable: true,\n      });\n\n      layer.add(darth);\n      stage.add(layer);\n\n      darth.cache();\n      darth.filters([Konva.Filters.Blur]);\n      darth.blurRadius(100);\n      layer.draw();\n\n      var tween = new Konva.Tween({\n        node: darth,\n        duration: 2.0,\n        blurRadius: 0,\n        easing: Konva.Easings.EaseInOut,\n      });\n\n      darth.on('mouseover', function () {\n        tween.play();\n      });\n\n      darth.on('mouseout', function () {\n        tween.reverse();\n      });\n\n      done();\n    });\n  });\n\n  // ======================================================\n  it('crop blur', function (done) {\n    var stage = addStage();\n\n    loadImage('darth-vader.jpg', (imageObj) => {\n      var layer = new Konva.Layer();\n      const darth = new Konva.Image({\n        x: 10,\n        y: 10,\n        image: imageObj,\n        crop: { x: 128, y: 48, width: 256, height: 128 },\n        draggable: true,\n      });\n\n      layer.add(darth);\n      stage.add(layer);\n\n      darth.cache();\n      darth.filters([Konva.Filters.Blur]);\n      darth.blurRadius(10);\n      layer.draw();\n\n      done();\n    });\n  });\n\n  // ======================================================\n  it('crop tween blur', function (done) {\n    var stage = addStage();\n\n    loadImage('darth-vader.jpg', (imageObj) => {\n      var layer = new Konva.Layer();\n      const darth = new Konva.Image({\n        x: 10,\n        y: 10,\n        image: imageObj,\n        crop: { x: 128, y: 48, width: 256, height: 128 },\n        draggable: true,\n      });\n\n      layer.add(darth);\n      stage.add(layer);\n\n      darth.cache();\n      darth.filters([Konva.Filters.Blur]);\n      darth.blurRadius(100);\n      layer.draw();\n\n      var tween = new Konva.Tween({\n        node: darth,\n        duration: 2.0,\n        blurRadius: 0,\n        easing: Konva.Easings.EaseInOut,\n      });\n\n      darth.on('mouseover', function () {\n        tween.play();\n      });\n\n      darth.on('mouseout', function () {\n        tween.reverse();\n      });\n\n      done();\n    });\n  });\n\n  // ======================================================\n  it('transparency', function (done) {\n    var stage = addStage();\n\n    loadImage('darth-vader.jpg', (imageObj) => {\n      var layer = new Konva.Layer();\n      const darth = new Konva.Image({\n        x: 10,\n        y: 10,\n        image: imageObj,\n        draggable: true,\n      });\n\n      layer.add(darth);\n      stage.add(layer);\n\n      darth.cache();\n      darth.filters([Konva.Filters.Blur]);\n      darth.blurRadius(100);\n      layer.draw();\n\n      var tween = new Konva.Tween({\n        node: darth,\n        duration: 1,\n        blurRadius: 0,\n        easing: Konva.Easings.EaseInOut,\n      });\n\n      darth.on('mouseover', function () {\n        tween.play();\n      });\n\n      darth.on('mouseout', function () {\n        tween.reverse();\n      });\n\n      done();\n    });\n  });\n\n  // ======================================================\n  it('blur hit region', function (done) {\n    var stage = addStage();\n\n    loadImage('lion.png', (imageObj) => {\n      var layer = new Konva.Layer();\n      const darth = new Konva.Image({\n        x: 10,\n        y: 10,\n        image: imageObj,\n        draggable: true,\n      });\n\n      //console.log(darth.hasStroke())\n\n      layer.add(darth);\n      stage.add(layer);\n\n      darth.cache();\n      darth.filters([Konva.Filters.Blur]);\n      darth.blurRadius(20);\n      darth.drawHitFromCache(100);\n      layer.draw();\n\n      //console.log(darth._getCanvasCache().hit.getContext().getTrace());\n\n      //assert.equal(darth._getCanvasCache().hit.getContext().getTrace(true), 'save();translate();beginPath();rect();closePath();save();fillStyle;fill();restore();restore();clearRect();getImageData();putImageData();');\n\n      done();\n    });\n  });\n});\n", "id": "konva:test/manual/Blur-test.ts:67e1e0f5-6f6e-4392-8664-70a39bf21aa4"}
{"path": "packages/server/src/helpers/validateCertificatePath.ts", "project_name": "SimpleWebAuthn", "text": "/* eslint-disable @typescript-eslint/ban-ts-comment */\n// `ASN1HEX` exists in the lib but not in its typings\n// @ts-ignore 2305\nimport { KJUR, X509, ASN1HEX, zulutodate } from 'jsrsasign';\n\nimport isCertRevoked from './isCertRevoked';\n\nconst { crypto } = KJUR;\n\n/**\n * Traverse an array of PEM certificates and ensure they form a proper chain\n * @param certificates Typically the result of `x5c.map(convertASN1toPEM)`\n * @param rootCertificates Possible root certificates to complete the path\n */\nexport default async function validateCertificatePath(\n  certificates: string[],\n  rootCertificates: string[] = [],\n): Promise<boolean> {\n  if (rootCertificates.length === 0) {\n    // We have no root certs with which to create a full path, so skip path validation\n    // TODO: Is this going to be acceptable default behavior??\n    return true;\n  }\n\n  let invalidSubjectAndIssuerError = false;\n  for (const rootCert of rootCertificates) {\n    try {\n      const certsWithRoot = certificates.concat([rootCert]);\n      await _validatePath(certsWithRoot);\n      // If we successfully validated a path then there's no need to continue\n      invalidSubjectAndIssuerError = false;\n      break;\n    } catch (err) {\n      if (err instanceof InvalidSubjectAndIssuer) {\n        invalidSubjectAndIssuerError = true;\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  // We tried multiple root certs and none of them worked\n  if (invalidSubjectAndIssuerError) {\n    throw new InvalidSubjectAndIssuer();\n  }\n\n  return true;\n}\n\nasync function _validatePath(certificates: string[]): Promise<boolean> {\n  if (new Set(certificates).size !== certificates.length) {\n    throw new Error('Invalid certificate path: found duplicate certificates');\n  }\n\n  // From leaf to root, make sure each cert is issued by the next certificate in the chain\n  for (let i = 0; i < certificates.length; i += 1) {\n    const subjectPem = certificates[i];\n\n    const subjectCert = new X509();\n    subjectCert.readCertPEM(subjectPem);\n\n    let issuerPem = '';\n    if (i + 1 >= certificates.length) {\n      issuerPem = subjectPem;\n    } else {\n      issuerPem = certificates[i + 1];\n    }\n\n    const issuerCert = new X509();\n    issuerCert.readCertPEM(issuerPem);\n\n    // Check for certificate revocation\n    const subjectCertRevoked = await isCertRevoked(subjectCert);\n\n    if (subjectCertRevoked) {\n      throw new Error(`Found revoked certificate in certificate path`);\n    }\n\n    // Check that intermediate certificate is within its valid time window\n    const notBefore = zulutodate(issuerCert.getNotBefore());\n    const notAfter = zulutodate(issuerCert.getNotAfter());\n\n    const now = new Date();\n    if (notBefore > now || notAfter < now) {\n      throw new Error('Intermediate certificate is not yet valid or expired');\n    }\n\n    if (subjectCert.getIssuerString() !== issuerCert.getSubjectString()) {\n      throw new InvalidSubjectAndIssuer();\n    }\n\n    const subjectCertStruct = ASN1HEX.getTLVbyList(subjectCert.hex, 0, [0]);\n    const alg = subjectCert.getSignatureAlgorithmField();\n    const signatureHex = subjectCert.getSignatureValueHex();\n\n    const Signature = new crypto.Signature({ alg });\n    Signature.init(issuerPem);\n    Signature.updateHex(subjectCertStruct);\n\n    if (!Signature.verify(signatureHex)) {\n      throw new Error('Invalid certificate path: invalid signature');\n    }\n  }\n\n  return true;\n}\n\n// Custom errors to help pass on certain errors\nclass InvalidSubjectAndIssuer extends Error {\n  constructor() {\n    const message = 'Subject issuer did not match issuer subject';\n    super(message);\n    this.name = 'InvalidSubjectAndIssuer';\n  }\n}\n", "id": "SimpleWebAuthn:packages/server/src/helpers/validateCertificatePath.ts:85858f63-9d6b-49d3-beb1-ac83aa3b5e04"}
{"path": "VirtualRadar.WebSite/Site/Web/script/vrs/airportDataApi.ts", "project_name": "vrs", "text": "﻿/**\r\n * @license Copyright © 2014 onwards, <NAME>\r\n * All rights reserved.\r\n *\r\n * Redistribution and use of this software in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n *    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n *    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\r\n *    * Neither the name of the author nor the names of the program's contributors may be used to endorse or promote products derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OF THE SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @fileoverview Handles calls to www.airport-data.com's API.\r\n */\r\n\r\nnamespace VRS\r\n{\r\n    /*\r\n     * Global options\r\n     */\r\n    export var globalOptions: GlobalOptions = VRS.globalOptions || {};\r\n    VRS.globalOptions.airportDataApiThumbnailsUrl = VRS.globalOptions.airportDataApiThumbnailsUrl || 'AirportDataThumbnails.json';  // The URL for the airport-data API thumbnails call.\r\n    VRS.globalOptions.airportDataApiTimeout = VRS.globalOptions.airportDataApiTimeout || 10000;                                     // The timeout, in milliseconds, for airport-data API calls.\r\n\r\n    export class AirportDataApi\r\n    {\r\n        /**\r\n         * Fetches thumbnail images from www.airport-data.com. The callback is passed the result once the fetch has\r\n         * completed. The parameters to the callback are the ICAO and the result object. If the fetch fails then the\r\n         * callback is passed a JSON object in an error state.\r\n         */\r\n        getThumbnails(icao: string, registration: string, countThumbnails: number, callback: (icao:string, data:IAirportDataThumbnails) => void)\r\n        {\r\n            $.ajax({\r\n                url:        VRS.globalOptions.airportDataApiThumbnailsUrl,\r\n                dataType:   'json',\r\n                data:       { icao: icao, reg: registration, numThumbs: countThumbnails },\r\n                error:      function(jqXHR, textStatus) {\r\n                                callback(icao, { status: jqXHR.status, error: 'XHR call failed: ' + textStatus });\r\n                            },\r\n                success:    function(data: IAirportDataThumbnails) {\r\n                                callback(icao, data);\r\n                            },\r\n                timeout:    VRS.globalOptions.airportDataApiTimeout\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n ", "id": "vrs:VirtualRadar.WebSite/Site/Web/script/vrs/airportDataApi.ts:2c21a4c9-d0c3-4af2-a9b3-12c9f882a35c"}
{"path": "types/carbon__icons-react/lib/operations--field/16.d.ts", "project_name": "DefinitelyTyped", "text": "import { OperationsField16 } from \"../../\";\n\nexport = OperationsField16;\n", "id": "DefinitelyTyped:types/carbon__icons-react/lib/operations--field/16.d.ts:d3974d12-2f06-4820-96f3-290bfc4d38d2"}
{"path": "projects/ngx-scroll-to/src/lib/scroll-to.directive.ts", "project_name": "ngx-scroll-to", "text": "import { AfterViewInit, Directive, ElementRef, Input, Renderer2 } from '@angular/core';\n\nimport { DEFAULTS, EVENTS } from './scroll-to-helpers';\nimport { ScrollToConfigOptions, ScrollToOffsetMap, ScrollToTarget } from './scroll-to-config.interface';\nimport { ScrollToAnimationEasing } from './scroll-to-easing.interface';\nimport { ScrollToEvent } from './scroll-to-event.interface';\nimport { ScrollToService } from './scroll-to.service';\n\n@Directive({\n  selector: '[ngxScrollTo]'\n})\nexport class ScrollToDirective implements AfterViewInit {\n\n  @Input()\n  ngxScrollTo: ScrollToTarget = DEFAULTS.target;\n\n  @Input()\n  ngxScrollToEvent: ScrollToEvent = DEFAULTS.action;\n\n  @Input()\n  ngxScrollToDuration: number = DEFAULTS.duration;\n\n  @Input()\n  ngxScrollToEasing: ScrollToAnimationEasing = DEFAULTS.easing;\n\n  @Input()\n  ngxScrollToOffset: number = DEFAULTS.offset;\n\n  @Input()\n  ngxScrollToOffsetMap: ScrollToOffsetMap = DEFAULTS.offsetMap;\n\n  private options: ScrollToConfigOptions;\n\n  constructor(\n    private elementRef: ElementRef,\n    private scrollToService: ScrollToService,\n    private renderer2: Renderer2) {\n  }\n\n  /**\n   * Angular Lifecycle Hook - After View Init\n   *\n   * @todo Implement Subscription for Events\n   *\n   * @returns void\n   */\n  ngAfterViewInit(): void {\n\n    // Test Event Support\n    if (EVENTS.indexOf(this.ngxScrollToEvent) === -1) {\n      throw new Error(`Unsupported Event '${this.ngxScrollToEvent}'`);\n    }\n\n    // Listen for the trigger...\n    this.renderer2.listen(this.elementRef.nativeElement, this.ngxScrollToEvent,\n      (event: Event) => {\n\n        this.options = {\n          target: this.ngxScrollTo,\n          duration: this.ngxScrollToDuration,\n          easing: this.ngxScrollToEasing,\n          offset: this.ngxScrollToOffset,\n          offsetMap: this.ngxScrollToOffsetMap\n        };\n\n        this.scrollToService.scrollTo(this.options);\n      });\n  }\n}\n", "id": "ngx-scroll-to:projects/ngx-scroll-to/src/lib/scroll-to.directive.ts:7cb3952d-32d7-4792-89dd-ed1300599ab5"}
{"path": "Frontend/src/app/geofences/geofences.module.ts", "project_name": "Bing-Maps-Fleet-Tracker", "text": "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { NgModule } from '@angular/core';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { GeofencesRoutingModule, geofencesRoutedComponents } from './geofences-routing.module';\nimport { GeofenceService } from './geofence.service';\nimport { GeofencesInfoDialogComponent } from './geofences-info-dialog/geofences-info-dialog.component';\n\n@NgModule({\n  declarations: [\n    geofencesRoutedComponents,\n    GeofencesInfoDialogComponent,\n  ],\n  imports: [\n    GeofencesRoutingModule,\n    SharedModule\n  ],\n  entryComponents: [\n    GeofencesInfoDialogComponent\n  ],\n  providers: [GeofenceService],\n  exports: []\n})\nexport class GeofencesModule { }\n", "id": "Bing-Maps-Fleet-Tracker:Frontend/src/app/geofences/geofences.module.ts:2ed5a182-ef99-425e-a8bc-6852865ed8dc"}
{"path": "src/app/core/services/order/order.service.ts", "project_name": "intershop-pwa", "text": "import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { EMPTY, Observable, of, throwError } from 'rxjs';\nimport { catchError, concatMap, map, mapTo, withLatestFrom } from 'rxjs/operators';\n\nimport { OrderData } from 'ish-core/models/order/order.interface';\nimport { OrderMapper } from 'ish-core/models/order/order.mapper';\nimport { Order } from 'ish-core/models/order/order.model';\nimport { ApiService } from 'ish-core/services/api/api.service';\nimport { getCurrentLocale } from 'ish-core/store/core/configuration';\n\ntype OrderIncludeType =\n  | 'invoiceToAddress'\n  | 'commonShipToAddress'\n  | 'commonShippingMethod'\n  | 'discounts'\n  | 'lineItems_discounts'\n  | 'lineItems'\n  | 'payments'\n  | 'payments_paymentMethod'\n  | 'payments_paymentInstrument';\n\n/**\n * The Order Service handles the interaction with the REST API concerning orders.\n */\n@Injectable({ providedIn: 'root' })\nexport class OrderService {\n  constructor(private apiService: ApiService, private store: Store) {}\n\n  private orderHeaders = new HttpHeaders({\n    'content-type': 'application/json',\n    Accept: 'application/vnd.intershop.order.v1+json',\n  });\n\n  private allOrderIncludes: OrderIncludeType[] = [\n    'invoiceToAddress',\n    'commonShipToAddress',\n    'commonShippingMethod',\n    'discounts',\n    'lineItems_discounts',\n    'lineItems',\n    'payments',\n    'payments_paymentMethod',\n    'payments_paymentInstrument',\n  ];\n\n  /**\n   * Creates an order based on the given basket. If a redirect is necessary for payment, the return URLs will be sent after order creation in case they are required.\n   * @param basket                      The (current) basket.\n   * @param termsAndConditionsAccepted  indicates whether the user has accepted terms and conditions\n   * @returns                           The order.\n   */\n  createOrder(basketId: string, termsAndConditionsAccepted: boolean = false): Observable<Order> {\n    const params = new HttpParams().set('include', this.allOrderIncludes.join());\n\n    if (!basketId) {\n      return throwError('createOrder() called without basketId');\n    }\n\n    return this.apiService\n      .post<OrderData>(\n        'orders',\n        {\n          basket: basketId,\n          termsAndConditionsAccepted,\n        },\n        {\n          headers: this.orderHeaders,\n          params,\n        }\n      )\n      .pipe(\n        map(OrderMapper.fromData),\n        withLatestFrom(this.store.pipe(select(getCurrentLocale))),\n        concatMap(([order, currentLocale]) => this.sendRedirectUrlsIfRequired(order, currentLocale))\n      );\n  }\n\n  /**\n   *  Checks, if RedirectUrls are requested by the server and sends them if it is necessary.\n   * @param order           The order.\n   * @param lang            The language code of the current locale, e.g. en_US\n   * @returns               The (updated) order.\n   */\n  private sendRedirectUrlsIfRequired(order: Order, lang: string): Observable<Order> {\n    const loc = location.origin;\n    if (\n      order.orderCreation &&\n      order.orderCreation.status === 'STOPPED' &&\n      order.orderCreation.stopAction.type === 'Workflow' &&\n      order.orderCreation.stopAction.exitReason === 'redirect_urls_required'\n    ) {\n      const body = {\n        orderCreation: {\n          redirect: {\n            cancelUrl: `${loc}/checkout/payment;lang=${lang}?redirect=cancel&orderId=${order.id}`,\n            failureUrl: `${loc}/checkout/payment;lang=${lang}?redirect=failure&orderId=${order.id}`,\n            successUrl: `${loc}/checkout/receipt;lang=${lang}?redirect=success&orderId=${order.id}`,\n          },\n          status: 'CONTINUE',\n        },\n      };\n      return this.apiService\n        .patch(`orders/${order.id}`, body, {\n          headers: this.orderHeaders,\n        })\n        .pipe(map(OrderMapper.fromData));\n    } else {\n      return of(order);\n    }\n  }\n\n  /**\n   * Gets the orders of the logged-in user\n   * @param amount The count of items which should be fetched.\n   * @returns      A list of the user's orders\n   */\n  getOrders(amount: number = 30): Observable<Order[]> {\n    const params = new HttpParams().set('include', this.allOrderIncludes.join());\n\n    return this.apiService\n      .get<OrderData>(`orders?page[limit]=${amount}`, {\n        headers: this.orderHeaders,\n        params,\n      })\n      .pipe(map(OrderMapper.fromListData));\n  }\n\n  /**\n   * Gets a logged-in user's order with the given id\n   * @param orderId The (uuid) of the order.\n   * @returns       The order\n   */\n  getOrder(orderId: string): Observable<Order> {\n    const params = new HttpParams().set('include', this.allOrderIncludes.join());\n\n    if (!orderId) {\n      return throwError('getOrder() called without orderId');\n    }\n\n    return this.apiService\n      .get<OrderData>(`orders/${orderId}`, {\n        headers: this.orderHeaders,\n        params,\n      })\n      .pipe(map(OrderMapper.fromData));\n  }\n\n  /**\n   * Gets an anonymous user's order with the given id using the provided apiToken.\n   * @param orderId  The (uuid) of the order.\n   * @param apiToken The api token of the user's most recent request.\n   * @returns        The order\n   */\n  getOrderByToken(orderId: string, apiToken: string): Observable<Order> {\n    const params = new HttpParams().set('include', this.allOrderIncludes.join());\n\n    if (!orderId) {\n      return throwError('getOrderByToken() called without orderId');\n    }\n\n    if (!apiToken) {\n      return throwError('getOrderByToken() called without apiToken');\n    }\n\n    return this.apiService\n      .get<OrderData>(`orders/${orderId}`, {\n        headers: this.orderHeaders.set(ApiService.TOKEN_HEADER_KEY, apiToken),\n        params,\n        skipApiErrorHandling: true,\n      })\n      .pipe(\n        map(OrderMapper.fromData),\n        catchError(() => EMPTY)\n      );\n  }\n\n  /**\n   * Updates a payment for an order. Used to set redirect query parameters and status after redirect.\n   * If cancel/failure is sent back as redirect status, the order doesn't exist any more.\n   * @param orderId      The (uuid) of the order.\n     @param queryParams  The payment redirect information (parameters and status).\n   * @returns            The orderId\n   */\n  updateOrderPayment(orderId: string, queryParams: { [key: string]: string }): Observable<string> {\n    const params = new HttpParams().set('include', this.allOrderIncludes.join());\n\n    if (!orderId) {\n      return throwError('updateOrderPayment() called without orderId');\n    }\n\n    if (!queryParams) {\n      return throwError('updateOrderPayment() called without query parameter data');\n    }\n\n    if (!queryParams.redirect) {\n      return throwError('updateOrderPayment() called without redirect parameter data');\n    }\n\n    const orderCreation = {\n      status: 'CONTINUE',\n      redirect: {\n        status: queryParams.redirect.toUpperCase(),\n        parameters: Object.entries(queryParams)\n          .filter(([name]) => name !== 'redirect')\n          .map(([name, value]) => ({ name, value })),\n      },\n    };\n\n    return this.apiService\n      .patch<OrderData>(\n        `orders/${orderId}`,\n        { orderCreation },\n        {\n          headers: this.orderHeaders,\n          params,\n        }\n      )\n      .pipe(mapTo(orderId));\n  }\n}\n", "id": "intershop-pwa:src/app/core/services/order/order.service.ts:1a8a76c4-bbeb-43de-aebc-5cd313437d87"}
{"path": "test/log.spec.ts", "project_name": "cocos-game-framework", "text": "import { log } from \"../src/log\";\n\ndescribe(log.name, () => {\n  test.todo(\"\");\n});\n", "id": "cocos-game-framework:test/log.spec.ts:0333d14a-51b9-4e25-a703-849bf36c2b57"}
{"path": "src/app/settings/components/tags-settings/tags-settings.component.ts", "project_name": "cloudstack-ui", "text": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { KeyValuePair, TagEditAction } from '../../../tags/tags-view/tags-view.component';\nimport { Tag } from '../../../shared/models';\n\n@Component({\n  selector: 'cs-tags-settings',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  templateUrl: './tags-settings.component.html',\n})\nexport class TagsSettingsComponent {\n  @Input()\n  query: string;\n  @Input()\n  tags: any;\n  @Input()\n  isLoading: boolean;\n  @Input()\n  tagPage: string;\n  @Output()\n  queryChanged = new EventEmitter<string>();\n  @Output()\n  keyboardLayoutChange = new EventEmitter<string>();\n  @Output()\n  public addTag = new EventEmitter<KeyValuePair>();\n  @Output()\n  public deleteTag = new EventEmitter<Tag>();\n  @Output()\n  public editTag = new EventEmitter<TagEditAction>();\n}\n", "id": "cloudstack-ui:src/app/settings/components/tags-settings/tags-settings.component.ts:6357b448-bc00-46be-83bf-f8cfbeafb0cb"}
{"path": "test/unit/specs/options.factory.spec.ts", "project_name": "angular-gantt", "text": "// tslint:disable:no-unused-expression\n\nimport angular, {IRootScopeService} from 'angular'\nimport 'angular-mocks'\n\nimport { expect } from 'chai'\n\ndescribe('Options', () => {\n  beforeEach(angular.mock.module('gantt'))\n\n  let Options\n  let $rootScope: IRootScopeService\n  let $compile\n\n  beforeEach(inject(['$rootScope', '$compile', 'GanttOptions', function ($tRootScope: IRootScopeService, $tCompile, tOptions) {\n    Options = tOptions\n    $rootScope = $tRootScope\n    $compile = $tCompile\n  }]))\n\n  it('should return undefined for a non existing option value',\n    function () {\n      let $scope = $rootScope.$new()\n\n      let options = new Options($scope, {})\n\n      let value = options.value('non existing')\n\n      expect(value).to.be.undefined\n    }\n  )\n\n  it('should return the value for a existing option value (non-boolean)',\n    function () {\n      let $scope = $rootScope.$new()\n\n      $scope.existing = 100\n      let options = new Options($scope, {})\n\n      let value = options.value('existing')\n\n      expect(value).to.eq(100)\n    }\n  )\n\n  it('should return the default value for a non existing option value (non-boolean)',\n    function () {\n      let $scope = $rootScope.$new()\n\n      let options = new Options($scope, {\n        'default': 100\n      })\n\n      let value = options.value('default')\n\n      expect(value).to.eq(100)\n    }\n  )\n\n  it('should return false for a existing non-truthy option value',\n    function () {\n      let $scope = $rootScope.$new()\n\n      $scope.existing = false\n      let options = new Options($scope, {})\n\n      let value = options.value('existing')\n\n      expect(value).to.eq(false)\n    }\n  )\n\n  it('should return true for a existing truthy option value',\n    function () {\n      let $scope = $rootScope.$new()\n\n      $scope.existing = true\n      let options = new Options($scope, {})\n\n      let value = options.value('existing')\n\n      expect(value).to.eq(true)\n    }\n  )\n\n  it('should return false as default value for a non existing non-truthy option value',\n    function () {\n      let $scope = $rootScope.$new()\n\n      let options = new Options($scope, {\n        'default': false\n      })\n\n      let value = options.value('default')\n\n      expect(value).to.eq(false)\n    }\n  )\n\n  it('should return true as default value for a non existing truthy option value',\n    function () {\n      let $scope = $rootScope.$new()\n\n      let options = new Options($scope, {\n        'default': true\n      })\n\n      let value = options.value('default')\n\n      expect(value).to.eq(true)\n    }\n  )\n\n  it('should return false for a non-truthy option value which has a default value',\n    function () {\n      let $scope = $rootScope.$new()\n\n      $scope.existing = false\n      let options = new Options($scope, {\n        'existing': true\n      })\n\n      let value = options.value('existing')\n\n      expect(value).to.eq(false)\n    }\n  )\n\n  it('should return true for a truthy boolean option value which has a default value',\n    function () {\n      let $scope = $rootScope.$new()\n\n      $scope.existing = true\n      let options = new Options($scope, {\n        'existing': false\n      })\n\n      let value = options.value('existing')\n\n      expect(value).to.eq(true)\n    }\n  )\n\n  it('should set an option value to the specified value',\n    function () {\n      let $scope = $rootScope.$new()\n\n      let options = new Options($scope, {})\n\n      options.set('toSet', 100)\n      expect($scope.toSet).to.eq(100)\n\n      let value = options.value('toSet')\n      expect(value).to.eq(100)\n    }\n  )\n})\n", "id": "angular-gantt:test/unit/specs/options.factory.spec.ts:48a02a20-cf21-4ef3-9989-05b83fd2ebe0"}
{"path": "src/app/fulfilling-bouncing-circle-spinner/fulfilling-bouncing-circle-spinner.module.ts", "project_name": "angular-epic-spinners", "text": "import {NgModule} from '@angular/core';\n\nimport {FulfillingBouncingCircleSpinnerComponent} from './fulfilling-bouncing-circle-spinner.component';\nimport {CommonModule} from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [FulfillingBouncingCircleSpinnerComponent],\n  declarations: [FulfillingBouncingCircleSpinnerComponent],\n  providers: [],\n})\nexport class FulfillingBouncingCircleSpinnerModule {\n}\n", "id": "angular-epic-spinners:src/app/fulfilling-bouncing-circle-spinner/fulfilling-bouncing-circle-spinner.module.ts:24fbe583-f443-4250-952b-ad3c0589406a"}
{"path": "packages/tools-node/src/path.ts", "project_name": "rnx-kit", "text": "/**\n * Escape a path by replacing each backslash ('\\\\') with a double-backslash (\"\\\\\\\\\").\n *\n * @param p Path to escape\n * @returns Escaped path\n */\nexport function escapePath(p: string): string {\n  return p.replace(/\\\\/g, \"\\\\\\\\\");\n}\n\n/**\n * Normalize the separators in a path, converting each backslash ('\\\\') to a foreward\n * slash ('/').\n *\n * @param p Path to normalize\n * @returns Normalized path\n */\nexport function normalizePath(p: string): string {\n  return p.replace(/\\\\/g, \"/\");\n}\n", "id": "rnx-kit:packages/tools-node/src/path.ts:f4f85410-4443-4f77-80b9-59ae458d3bc3"}
{"path": "types/simpleddp/classes/ddpOnChange.d.ts", "project_name": "DefinitelyTyped", "text": "export class ddpOnChange {\n    constructor(obj: object, inst: unknown, listenersArray: unknown[]);\n    /**\n     * Start change listener. This method is being called on instance creation.\n     */\n    start(): void;\n    /**\n     * Stops change listener.\n     */\n    stop(): void;\n}\n", "id": "DefinitelyTyped:types/simpleddp/classes/ddpOnChange.d.ts:5be749ce-eddf-4f33-9184-5eeec53adeb9"}
{"path": "packages/dahlia-scripts/assets/common/App.tsx", "project_name": "dahlia", "text": "import React from 'react'\n\nexport default class App extends React.Component {\n  render() {\n    return <>{this.props.children}</>\n  }\n}\n", "id": "dahlia:packages/dahlia-scripts/assets/common/App.tsx:803f67d4-e19a-4f21-8ce4-67ceab8f58bb"}
{"path": "packages/core/src/modules/discover-features/messages/DiscloseMessage.ts", "project_name": "aries-framework-javascript", "text": "import { Expose, Type } from 'class-transformer'\nimport { Equals, IsInstance, IsOptional, IsString } from 'class-validator'\n\nimport { AgentMessage } from '../../../agent/AgentMessage'\n\nexport interface DiscloseProtocolOptions {\n  protocolId: string\n  roles?: string[]\n}\n\nexport class DiscloseProtocol {\n  public constructor(options: DiscloseProtocolOptions) {\n    if (options) {\n      this.protocolId = options.protocolId\n      this.roles = options.roles\n    }\n  }\n\n  @Expose({ name: 'pid' })\n  @IsString()\n  public protocolId!: string\n\n  @IsString({ each: true })\n  @IsOptional()\n  public roles?: string[]\n}\n\nexport interface DiscoverFeaturesDiscloseMessageOptions {\n  id?: string\n  threadId: string\n  protocols: DiscloseProtocolOptions[]\n}\n\nexport class DiscloseMessage extends AgentMessage {\n  public constructor(options: DiscoverFeaturesDiscloseMessageOptions) {\n    super()\n\n    if (options) {\n      this.id = options.id ?? this.generateId()\n      this.protocols = options.protocols.map((p) => new DiscloseProtocol(p))\n      this.setThread({\n        threadId: options.threadId,\n      })\n    }\n  }\n\n  @Equals(DiscloseMessage.type)\n  public readonly type = DiscloseMessage.type\n  public static readonly type = 'https://didcomm.org/discover-features/1.0/disclose'\n\n  @IsInstance(DiscloseProtocol, { each: true })\n  @Type(() => DiscloseProtocol)\n  public protocols!: DiscloseProtocol[]\n}\n", "id": "aries-framework-javascript:packages/core/src/modules/discover-features/messages/DiscloseMessage.ts:9a418f6a-bfa2-4ab7-bde5-399521f3da68"}
{"path": "projects/ngx-template-streams/src/internal/event-binding-engine.ts", "project_name": "ngx-template-streams", "text": "import { some } from 'fp-ts/lib/Option';\nimport { escapeQuotes, escapeEventPayload } from '../utils/template-helpers';\nimport { INTERNAL_PREFIX } from './constants';\nimport { parseEventBindings } from './event-binding-parser';\n\ntype TemplateOperation = (template: string) => string;\n\nexport function updateEventBindings(template: string, isInlineTemplate = false) {\n  return parseEventBindings(template)\n    .chain(transformEventBindings(template, isInlineTemplate))\n    .getOrElse(template);\n}\n\nfunction transformEventBindings(template: string, isInlineTemplate: boolean) {\n  return (eventBindings: Array<RegExpExecArray>) => {\n    return getTemplateOperations(eventBindings, isInlineTemplate).map(executeOperations(template));\n  };\n}\n\nfunction getTemplateOperations(eventBindings: Array<RegExpExecArray>, isInlineTemplate: boolean) {\n  const operations = eventBindings.map(([fullMatch, event, streamName, eventPayload]) => {\n    const eventBinding = createEventBinding(event, streamName, eventPayload, isInlineTemplate);\n    return createEventBindingOperation(fullMatch, eventBinding);\n  });\n\n  return some(operations);\n}\n\nfunction executeOperations(template: string) {\n  return (operations: Array<TemplateOperation>) => {\n    return operations.reduce<string>((acc: string, operation: TemplateOperation) => {\n      return operation(acc);\n    }, template);\n  };\n}\n\nfunction createEventBinding(event: string, streamName: string, eventPayload = '$event', isInlineTemplate: boolean) {\n  const eventBinding = `(${event})=\"${INTERNAL_PREFIX}${streamName}.next(${escapeEventPayload(eventPayload)})\"`;\n  return isInlineTemplate ? eventBinding : escapeQuotes(eventBinding);\n}\n\nfunction createEventBindingOperation(fullMatch: string, replacement: string): TemplateOperation {\n  return (s: string) => {\n    return s.replace(fullMatch, replacement);\n  };\n}\n", "id": "ngx-template-streams:projects/ngx-template-streams/src/internal/event-binding-engine.ts:146f4e9f-eb30-43fa-be0a-9b18366915a3"}
{"path": "src/utils/color.ts", "project_name": "Gisto", "text": "import { slice } from 'lodash/fp';\n\nexport const hexToRGBA = (hex: string, alpha: number) => {\n  if (!alpha) {\n    return hex;\n  }\n  // @ts-ignore\n  const RR = parseInt(slice(1, 3, hex), 16);\n  // @ts-ignore\n  const GG = parseInt(slice(3, 5, hex), 16);\n  // @ts-ignore\n  const BB = parseInt(slice(5, 7, hex), 16);\n\n  return `rgba(${RR}, ${GG}, ${BB}, ${alpha})`;\n};\n", "id": "Gisto:src/utils/color.ts:a1cf6eca-a7a8-4cf4-a15f-a8b46312cb93"}
{"path": "packages/browser-repl/src/components/types/help-output.tsx", "project_name": "mongosh", "text": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport i18n from '@mongosh/i18n';\n\nconst styles = require('./help-output.less');\n\ntype HelpApiObject = {\n  help: string;\n  docs: string;\n  attr: HelpApiObjectAttr[];\n};\n\ntype HelpApiObjectAttr = {\n  name: string;\n  description: string;\n};\n\ninterface HelpOutputProps {\n  value: HelpApiObject;\n}\n\nexport class HelpOutput extends Component<HelpOutputProps> {\n  static propTypes = {\n    value: PropTypes.object.isRequired\n  };\n\n  renderAttrTable = (attr: HelpApiObjectAttr[]): JSX.Element | undefined => {\n    if (!attr || !attr.length) { return; }\n\n    return (<table>\n      <tbody>{attr.map(this.renderAttrTableRow)}</tbody>\n    </table>);\n  };\n\n  renderAttrTableRow = (attr: HelpApiObjectAttr, i: number): JSX.Element => {\n    return (<tr key={`row-${i}`}>\n      <th>{attr.name}</th>\n      <td>{attr.description}</td>\n    </tr>);\n  };\n\n  renderHelpDocsLink(docs: string): JSX.Element | undefined {\n    if (!docs) { return; }\n\n    return (<div>\n      {i18n.__('cli-repl.args.moreInformation')} <a href={docs} target=\"_blank\">{docs}</a>\n    </div>);\n  }\n\n  renderHelpText(helpText: string): JSX.Element | undefined {\n    if (!helpText) { return; }\n\n    return (<div>{helpText}</div>);\n  }\n\n  render(): JSX.Element {\n    const help = this.props.value;\n\n    const className = classnames(styles['help-output']);\n    return (\n      <div className={className}>\n        {this.renderHelpText(help.help)}\n        {this.renderAttrTable(help.attr)}\n        {this.renderHelpDocsLink(help.docs)}\n      </div>\n    );\n  }\n}\n", "id": "mongosh:packages/browser-repl/src/components/types/help-output.tsx:3c2351d0-97bf-4da6-a6f5-dff044a91128"}
{"path": "test/electron-mocha/urlrouter/server-mock.ts", "project_name": "desktop-app", "text": "const express = require('express');\n\nexport const startDummyServer = () => {\n  const app = express();\n\n  app.get('/secure', (req: any, res: any) => {\n    if (req.headers.cookie.includes('dummy_name=dummy;')) {\n      res.sendStatus(200);\n    } else {\n      res.redirect('http://localhost:4444/login');\n    }\n  });\n\n  app.get('/redirectme', (_: any, res: any) => res.redirect('http://localhost:4444/secure'));\n  app.get('/login', (_: any, res: any) => res.sendStatus(200));\n  app.get('/redirectme-infinite-loop', (_: any, res: any) => res.redirect('http://localhost:4444/infinite-loop'));\n  app.get('/infinite-loop', (_: any, res: any) => res.redirect('http://localhost:4444/redirectme-infinite-loop'));\n  app.get('/infinite-loop-2', (_: any, res: any) => res.redirect('http://localhost:4444/infinite-loop'));\n\n  const server = app.listen(4444, 'localhost');\n\n  return {\n    stop: () => server.close(),\n  };\n};\n", "id": "desktop-app:test/electron-mocha/urlrouter/server-mock.ts:306dd83b-5427-4711-a347-20217e68cac5"}
{"path": "samples/react-kanban-board/src/webparts/kanbanBoard/components/helper.ts", "project_name": "sp-dev-fx-webparts", "text": "import { IKanbanBucket } from \"../../../kanban\";\n\nexport function mergeBucketsWithChoices(inB: IKanbanBucket[], choices: string[]): IKanbanBucket[] {\n    const currentbuckets: IKanbanBucket[] = [];\n    if (inB &&\n        inB.length > 0 &&\n        choices && choices.length > 0) {\n        inB.forEach((b) => {\n            if (choices.filter((c) => c === b.bucket).length === 1) {\n                currentbuckets.push(b);\n            }\n        });\n        return currentbuckets;\n\n    } else if (choices && choices.length) {\n        //Adding with default values\n        choices.forEach((x) => {\n            currentbuckets.push({\n                bucket: x,\n                bucketheadline: x,\n                percentageComplete: 0\n            });\n        });\n        return currentbuckets;\n    } else {\n\n        return undefined;\n    }\n}", "id": "sp-dev-fx-webparts:samples/react-kanban-board/src/webparts/kanbanBoard/components/helper.ts:dccc03bd-5c98-4fbd-9c83-0875532bd481"}
{"path": "packages/jest-environment/test/lit-element/LitElement.test.ts", "project_name": "happy-dom", "text": "import './LitElementComponent';\n\nconst PROP1 = 'PROP1';\n\ndescribe('LitElementComponent', () => {\n\tbeforeEach(() => {\n\t\tdocument.body.innerHTML = `<lit-element-component prop1=\"${PROP1}\"></lit-element-component>`;\n\t});\n\n\tafterEach(() => {\n\t\tdocument.body.innerHTML = '';\n\t});\n\n\tit('Tests integration.', () => {\n\t\tconst shadowRoot = document.body.querySelector('lit-element-component').shadowRoot;\n\n\t\texpect(document.body.innerHTML).toBe(\n\t\t\t`<lit-element-component prop1=\"${PROP1}\"></lit-element-component>`\n\t\t);\n\n\t\texpect(shadowRoot.querySelector('span').innerText).toBe(PROP1);\n\t\texpect(shadowRoot.innerHTML.replace(/[\\s]/gm, '')).toBe(\n\t\t\t`\n\t\t\t<!---->Some text\n\t\t\t<span><!---->${PROP1}<!----></span>!\n\t\t\t<!---->\n\t\t\t<style>\n\t\t\t\tspan {\n\t\t\t\t\tcolor: green;\n\t\t\t\t}\n\t\t    </style>\n\t\t`.replace(/[\\s]/gm, '')\n\t\t);\n\t});\n});\n", "id": "happy-dom:packages/jest-environment/test/lit-element/LitElement.test.ts:f615674f-392a-4ad4-957e-4555fe411068"}
{"path": "frontend/src/utils/dataTransform/dataTransform.ts", "project_name": "metrik", "text": "import { compact } from \"lodash\";\nimport { CascadeValueItem, Option } from \"../../components/MultipleCascadeSelect\";\n\nexport const findOptionByValue = (options: Option[], value?: string): Option | undefined =>\n\toptions.find(o => o.value === value);\n\nexport const generateTagLabel = (options: Option[], tag: CascadeValueItem) => {\n\tconst option = findOptionByValue(options, tag.value) || ({} as Option);\n\treturn compact([\n\t\toption?.label,\n\t\tfindOptionByValue(option?.children ?? [], tag.childValue)?.label,\n\t]).join(\":\");\n};\n", "id": "metrik:frontend/src/utils/dataTransform/dataTransform.ts:62c52a87-9513-4ce4-ad37-2104c55fd5d5"}
{"path": "src/adapter/adapter/port.ts", "project_name": "preact-devtools", "text": "import { DevtoolEvents } from \"../hook\";\nimport { DevtoolsToClient, PageHookName } from \"../../constants\";\n\nexport interface BaseEvent<K extends string, T> {\n\ttype: K;\n\tdata: T;\n}\n\nexport function listenToDevtools<\n\tK extends keyof DevtoolEvents,\n\tT extends DevtoolEvents[K]\n>(ctx: Window, type: K, callback: (message: T) => void) {\n\tctx.addEventListener(\"message\", e => {\n\t\tif (e.source === window && e.data.source === DevtoolsToClient) {\n\t\t\tconst data = e.data;\n\t\t\tif (data.type === type) callback(data.data);\n\t\t}\n\t});\n}\n\nexport function sendToDevtools<K extends keyof DevtoolEvents>(\n\tctx: Window,\n\ttype: K,\n\tdata: DevtoolEvents[K],\n) {\n\tctx.postMessage(\n\t\t{\n\t\t\tsource: PageHookName,\n\t\t\ttype,\n\t\t\tdata,\n\t\t},\n\t\t\"*\",\n\t);\n}\n\n/**\n * A port listens to messages from the devtools and can\n * send messages from the client to the devtools\n */\nexport interface PortPageHook {\n\tsend: <K extends keyof DevtoolEvents, T extends DevtoolEvents[K]>(\n\t\ttype: K,\n\t\tmessage: T,\n\t) => void;\n\tlisten: <K extends keyof DevtoolEvents, T extends DevtoolEvents[K]>(\n\t\ttype: K,\n\t\tcallback: (data: T) => void,\n\t) => void;\n}\n\nexport function createPortForHook(ctx: Window): PortPageHook {\n\treturn {\n\t\tsend: (type, message) => sendToDevtools(ctx, type, message),\n\t\tlisten: (type, callback) => listenToDevtools(ctx, type, callback),\n\t};\n}\n", "id": "preact-devtools:src/adapter/adapter/port.ts:f8c63bda-342b-4847-a0c1-b03680fdbf8b"}
{"path": "src/app/data/poe-ninja/index.ts", "project_name": "PoE-Overlay", "text": "export * from './service/currency-overview-http.service'\nexport * from './service/item-overview-http.service'\n", "id": "PoE-Overlay:src/app/data/poe-ninja/index.ts:6fe4b04b-e8dc-4663-ade5-cd2b79099ea1"}
{"path": "shared/AppInsightsCommon/src/Telemetry/PageView.ts", "project_name": "ApplicationInsights-JS", "text": "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { IPageViewData } from \"../Interfaces/Contracts/IPageViewData\";\nimport { dataSanitizeId, dataSanitizeMeasurements, dataSanitizeProperties, dataSanitizeString, dataSanitizeUrl } from \"./Common/DataSanitizer\";\nimport { ISerializable } from \"../Interfaces/Telemetry/ISerializable\";\nimport { FieldType } from \"../Enums\";\nimport { IDiagnosticLogger } from \"@microsoft/applicationinsights-core-js\";\nimport { msToTimeSpan } from \"../HelperFuncs\";\nimport { strNotSpecified } from \"../Constants\";\n\nexport class PageView implements IPageViewData, ISerializable {\n\n    public static envelopeType = \"Microsoft.ApplicationInsights.{0}.Pageview\";\n    public static dataType = \"PageviewData\";\n\n    public aiDataContract = {\n        ver: FieldType.Required,\n        name: FieldType.Default,\n        url: FieldType.Default,\n        duration: FieldType.Default,\n        properties: FieldType.Default,\n        measurements: FieldType.Default,\n        id: FieldType.Default\n    }\n\n    /**\n     * Schema version\n     */\n    public ver: number; // = 2;\n\n    /**\n     * Event name. Keep it low cardinality to allow proper grouping and useful metrics.\n     */\n    public name: string;\n \n    /**\n     * Collection of custom properties.\n     */\n    public properties: any; // = {};\n \n    /**\n     * Collection of custom measurements.\n     */\n    public measurements: any; // = {};\n \n    /**\n     * Request URL with all query string parameters\n     */\n    public url: string;\n\n    /**\n     * Request duration in format: DD.HH:MM:SS.MMMMMM. For a page view (PageViewData), this is the duration. For a page view with performance information (PageViewPerfData), this is the page load time. Must be less than 1000 days.\n     */\n    public duration: string;\n \n    /**\n     * Identifier of a page view instance. Used for correlation between page view and other telemetry items.\n     */\n    public id: string;\n \n    /**\n     * Constructs a new instance of the PageEventTelemetry object\n     */\n    constructor(logger: IDiagnosticLogger, name?: string, url?: string, durationMs?: number, properties?: {[key: string]: string}, measurements?: {[key: string]: number}, id?: string) {\n        let _self = this;\n        _self.ver = 2;\n        _self.id = dataSanitizeId(logger, id);\n        _self.url = dataSanitizeUrl(logger, url);\n        _self.name = dataSanitizeString(logger, name) || strNotSpecified;\n        if (!isNaN(durationMs)) {\n            _self.duration = msToTimeSpan(durationMs);\n        }\n        _self.properties = dataSanitizeProperties(logger, properties);\n        _self.measurements = dataSanitizeMeasurements(logger, measurements);\n    }\n}\n", "id": "ApplicationInsights-JS:shared/AppInsightsCommon/src/Telemetry/PageView.ts:a78192b4-fae0-493f-a24d-79bff095e030"}
{"path": "extensions/node-menu/renderer.tsx", "project_name": "lens", "text": "/**\n * Copyright (c) OpenLens Authors. All rights reserved.\n * Licensed under MIT License. See LICENSE in root directory for more information.\n */\n\nimport { Renderer } from \"@k8slens/extensions\";\nimport React from \"react\";\nimport type { NodeMenuProps } from \"./src/node-menu\";\nimport { NodeMenu } from \"./src/node-menu\";\n\nexport default class NodeMenuRendererExtension extends Renderer.LensExtension {\n  kubeObjectMenuItems = [\n    {\n      kind: \"Node\",\n      apiVersions: [\"v1\"],\n      components: {\n        MenuItem: (props: NodeMenuProps) => <NodeMenu {...props} />,\n      },\n    },\n  ];\n}\n", "id": "lens:extensions/node-menu/renderer.tsx:f72e87c7-8b9f-42e7-a16a-0b1ff8447262"}
{"path": "src/DetailsView/components/load-assessment-button.tsx", "project_name": "accessibility-insights-web", "text": "// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { AssessmentDataParser } from 'common/assessment-data-parser';\nimport { InsightsCommandButton } from 'common/components/controls/insights-command-button';\nimport { AssessmentStoreData } from 'common/types/store-data/assessment-result-data';\nimport { TabStoreData } from 'common/types/store-data/tab-store-data';\nimport { UrlParser } from 'common/url-parser';\nimport { DetailsViewActionMessageCreator } from 'DetailsView/actions/details-view-action-message-creator';\nimport { LoadAssessmentHelper } from 'DetailsView/components/load-assessment-helper';\nimport * as React from 'react';\n\nexport type LoadAssessmentButtonDeps = {\n    detailsViewActionMessageCreator: DetailsViewActionMessageCreator;\n    assessmentDataParser: AssessmentDataParser;\n    urlParser: UrlParser;\n    loadAssessmentHelper: LoadAssessmentHelper;\n};\nexport interface LoadAssessmentButtonProps {\n    deps: LoadAssessmentButtonDeps;\n    tabStoreData: TabStoreData;\n    assessmentStoreData: AssessmentStoreData;\n    handleLoadAssessmentButtonClick: () => void;\n}\n\nexport const loadAssessmentButtonAutomationId = 'load-assessment-button';\n\nexport class LoadAssessmentButton extends React.Component<LoadAssessmentButtonProps> {\n    public render(): JSX.Element {\n        return (\n            <InsightsCommandButton\n                data-automation-id={loadAssessmentButtonAutomationId}\n                iconProps={{ iconName: 'FabricOpenFolderHorizontal' }}\n                onClick={this.props.handleLoadAssessmentButtonClick}\n            >\n                Load assessment\n            </InsightsCommandButton>\n        );\n    }\n}\n", "id": "accessibility-insights-web:src/DetailsView/components/load-assessment-button.tsx:3b5964f6-d60a-4c89-9c09-eee2f31872ac"}
{"path": "packages/fluentui/accessibility/src/behaviors/Common/hiddenComponentBehavior.ts", "project_name": "fluentui", "text": "import { Accessibility } from '../../types';\n\n/**\n * @specification\n * Adds attribute 'aria-hidden=true' to 'root' slot.\n */\nexport const hiddenComponentBehavior: Accessibility<never> = () => {\n  const definition = {\n    attributes: {\n      root: {\n        'aria-hidden': true,\n      },\n    },\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Override the default trigger's accessibility schema class.\n    definition.attributes.root['data-aa-class'] = 'Hidden';\n  }\n\n  return definition;\n};\n", "id": "fluentui:packages/fluentui/accessibility/src/behaviors/Common/hiddenComponentBehavior.ts:eb100c24-ce0c-4747-bdc2-9f4e8306d936"}
{"path": "tests/decorators/ModelSync.spec.ts", "project_name": "vue-property-decorator", "text": "import 'reflect-metadata'\nimport Vue from 'vue'\nimport Component from 'vue-class-component'\nimport { ModelSync } from '../../src/decorators/ModelSync'\n\nconst mockFunction = jest.fn()\n\ndescribe(ModelSync, () => {\n  const eventName = 'change'\n  const propertyName = 'checked'\n  const accessorName = 'chackedValue'\n  @Component\n  class TestComponent extends Vue {\n    @ModelSync(propertyName, eventName, Boolean) [accessorName]!: boolean\n\n    changeChecked(newValue: boolean) {\n      this[accessorName] = newValue\n    }\n  }\n\n  const initialValue = false\n  let component: TestComponent\n\n  beforeEach(() => {\n    component = new TestComponent({\n      propsData: { [propertyName]: initialValue },\n    })\n    component.$emit = mockFunction\n  })\n\n  test('define model option correctly', () => {\n    expect(component.$options.model).toEqual({\n      prop: propertyName,\n      event: eventName,\n    })\n  })\n\n  test('define props option correctly', () => {\n    const props = (component.$options.props as any) as Record<string, any>\n    expect(props![propertyName]).toEqual({ type: Boolean })\n  })\n\n  test('component recieves prop', () => {\n    expect(component[accessorName]).toBe(initialValue)\n  })\n\n  describe('when props has been changed', () => {\n    const newValue = true\n\n    beforeEach(() => {\n      component.changeChecked(newValue)\n    })\n\n    test('calls $emit method', () => {\n      expect(mockFunction).toHaveBeenCalled()\n    })\n\n    test('emits event with event name', () => {\n      expect(mockFunction.mock.calls[0][0]).toBe(eventName)\n    })\n\n    test('emits event with new value', () => {\n      expect(mockFunction.mock.calls[0][1]).toBe(newValue)\n    })\n  })\n})\n", "id": "vue-property-decorator:tests/decorators/ModelSync.spec.ts:740cbff1-c806-488d-a55c-8d75221ef935"}
{"path": "types/components/Range.d.ts", "project_name": "react-materialize", "text": "import * as React from \"react\";\n\nexport interface RangeProps {\n  min: string;\n  max: string;\n}\n\n/**\n * React Materialize: Range\n */\ndeclare const Range: React.FC<RangeProps>;\n\nexport default Range;\n", "id": "react-materialize:types/components/Range.d.ts:f4ca26fd-5f77-45eb-b12a-23af0cf3f03f"}
{"path": "cmd/ui/assets/src/app/shared/footer/footer.stories.ts", "project_name": "control", "text": "import { storiesOf } from '@storybook/angular';\nimport { FooterComponent } from './footer.component';\n\n// example story\nstoriesOf('Footer', module)\n  .add('Default', () => ({\n    component: FooterComponent,\n  }));\n", "id": "control:cmd/ui/assets/src/app/shared/footer/footer.stories.ts:4f544745-7227-4dc8-bb5c-048d72f8d45c"}
{"path": "src/isEmpty.ts", "project_name": "CSSJSON", "text": "export const isEmpty = function (x: Record<any, any>): boolean {\n  return typeof x == 'undefined' || x.length == 0 || x == null;\n};\n", "id": "CSSJSON:src/isEmpty.ts:7ee946ce-cbfa-415c-97a3-91dda47a21fe"}
{"path": "src/git-hooks/git-hooks-manager.ts", "project_name": "bit", "text": "import * as path from 'path';\nimport R from 'ramda';\nimport { GIT_HOOKS_NAMES } from '../constants';\nimport logger from '../logger/logger';\nimport GitHook from './git-hook';\nimport bitImportGitHook from './fixtures/bit-import-git-hook';\n\nconst HOOKS_DIR_NAME = 'hooks';\n\n/*\n * Setting up block level variable to store class state\n * set's to null by default.\n */\nlet instance = null;\n\n/**\n * A class which manage all the git hooks\n * This is a singleton class which expose getInstance method\n * This class used for add new git hooks\n */\nexport default class GitHooksManager {\n  basePath: string; // path to the .git dir\n  hooks: Map<string, GitHook> = new Map();\n\n  constructor(basePath: string) {\n    this.basePath = basePath;\n    if (!instance) {\n      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n      instance = this;\n    }\n\n    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n    return instance;\n  }\n\n  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n  get hooksDirPath(): string {\n    return path.join(this.basePath, HOOKS_DIR_NAME);\n  }\n\n  /**\n   * Initialize the default hooks\n   */\n  static init(basePath: string) {\n    const self = new GitHooksManager(basePath);\n    GIT_HOOKS_NAMES.forEach((hookName) => {\n      const hook = new GitHook(self.hooksDirPath, hookName, bitImportGitHook);\n      self.hooks.set(hookName, hook);\n    });\n    return self;\n  }\n\n  writeAllHooks() {\n    const alreadyExist = [];\n    const added = [];\n    this.hooks.forEach((hook, hookName) => {\n      const result = hook.writeSync();\n      if (result) {\n        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n        added.push(hookName);\n      } else {\n        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n        alreadyExist.push(hookName);\n      }\n    });\n    return {\n      added,\n      alreadyExist,\n    };\n  }\n\n  /**\n   * Get the instance of the HooksManager\n   * @return {GitHooksManager} instance of the GitHooksManager\n   *\n   */\n  static getInstance(): GitHooksManager | null | undefined {\n    return instance;\n  }\n}\n", "id": "bit:src/git-hooks/git-hooks-manager.ts:ba38aaf5-159f-4816-9d3a-89b96764834c"}
{"path": "test/v2/6.decorators/6.2.inject.test.ts", "project_name": "agentframework", "text": "import { InMemoryDomain, agent, inject, Reflector, InjectAttribute } from '../../../src';\nimport { CreateAgent } from '../../../src';\n\ndescribe('6.2. @inject decorator', () => {\n  describe('# should able to', () => {\n    it('create inject agent', () => {\n      @agent()\n      class Service621 {\n        //\n      }\n\n      @agent()\n      class App621 {\n        @inject()\n        readonly service!: Service621;\n      }\n\n      const service = new Service621();\n\n      const app = new App621();\n\n      expect(app.service).toBe(service);\n\n      expect(\n        Reflector(App621)\n          .property('service')\n          .hasOwnAttribute(InjectAttribute)\n      ).toBeTrue();\n    });\n\n    it('create inject agent using domain', () => {\n      class Service622 {\n        //\n      }\n\n      class App622 {\n        @inject()\n        readonly service!: Service622;\n      }\n\n      const domain = new InMemoryDomain();\n\n      const service = domain.construct(Service622);\n\n      const app = domain.construct(App622);\n\n      expect(app.service).toBe(service);\n    });\n  });\n\n  describe('# should not able to', () => {\n    it('inject non-existing agent', () => {\n      @agent()\n      class Service623 {\n        //\n      }\n\n      @agent()\n      class App623 {\n        @inject()\n        readonly service!: Service623;\n      }\n\n      const app = new App623();\n\n      expect(() => {\n        expect(app.service).toBeUndefined();\n      }).toThrowError('InjectInstanceNotExists: Service623$');\n    });\n\n    it('inject non-existing agent using domain', () => {\n      class Service624 {\n        //\n      }\n\n      class App624 {\n        @inject()\n        readonly service!: Service624;\n      }\n\n      const domain = new InMemoryDomain();\n\n      const app = domain.construct(App624);\n\n      expect(() => {\n        expect(app.service).toBeUndefined();\n      }).toThrowError('InjectInstanceNotExists: Service624');\n    });\n\n    it('inject unknown', () => {\n      @agent()\n      class App625 {\n        @inject()\n        readonly service: undefined;\n      }\n\n      const app = new App625();\n\n      expect(() => {\n        expect(app.service).toBeUndefined();\n      }).toThrowError('UnknownInjectType');\n    });\n\n    it('inject without Domain', () => {\n      class Service626 {}\n\n      class App626 {\n        @inject()\n        readonly service!: Service626;\n      }\n\n      const Agent626 = CreateAgent(App626);\n\n      const app626 = new Agent626();\n\n      expect(() => {\n        expect(app626.service).toBeUndefined();\n      }).toThrowError('DomainNotFound: Service626');\n    });\n  });\n});\n", "id": "agentframework:test/v2/6.decorators/6.2.inject.test.ts:e487877c-e974-4ab7-9079-1c1192337cfa"}
{"path": "packages/@magic-sdk/provider/test/spec/core/json-rpc/json-rpc-response/applyError.spec.ts", "project_name": "magic-js", "text": "import browserEnv from '@ikscodes/browser-env';\nimport { JsonRpcError, JsonRpcRequestPayload } from '@magic-sdk/types';\nimport { JsonRpcResponse } from '../../../../../src/core/json-rpc';\n\nfunction createSourcePayload(): JsonRpcRequestPayload {\n  return {\n    jsonrpc: '2.0',\n    id: 1,\n    method: 'eth_accounts',\n    params: [],\n  };\n}\n\nfunction createJsonRcpError(): JsonRpcError {\n  return {\n    message: 'hello wolrd',\n    code: 1,\n  };\n}\n\nbeforeEach(() => {\n  browserEnv.restore();\n});\n\ntest('Add a formatted error to the response with `JsonRpcError` object as argument', () => {\n  const payload = createSourcePayload();\n  const error = createJsonRcpError();\n\n  const response = new JsonRpcResponse(payload);\n\n  expect(response.hasError).toBe(false);\n  response.applyError(error);\n  expect((response as any)._error).toEqual(error);\n  expect(response.hasError).toBe(true);\n});\n\ntest('Apply `null` or `undefined` errors explicitly', () => {\n  const payload = createSourcePayload();\n  const nullError = null;\n  const undefinedError = undefined;\n\n  const response1 = new JsonRpcResponse(payload);\n  const response2 = new JsonRpcResponse(payload);\n\n  expect(response1.hasError).toBe(false);\n  expect(response2.hasError).toBe(false);\n\n  response1.applyError(nullError);\n  response2.applyError(undefinedError);\n\n  expect((response1 as any)._error).toBe(null);\n  expect((response2 as any)._error).toBe(undefined);\n  expect(response1.hasError).toBe(false);\n  expect(response2.hasError).toBe(false);\n});\n", "id": "magic-js:packages/@magic-sdk/provider/test/spec/core/json-rpc/json-rpc-response/applyError.spec.ts:36734a45-7fe0-4798-b28c-6840da7979e9"}
{"path": "crates/rslint_parser/test_data/ts/ok/types/union-intersection/input.ts", "project_name": "rslint", "text": "let union: number | null | undefined;\nlet intersection: number & string;\nlet precedence1: number | string & boolean;\nlet precedence2: number & string | boolean;\ntype LeadingUnion =\n    | string\n    | number;\ntype LeadingIntersection =\n    & number\n    & string;\n", "id": "rslint:crates/rslint_parser/test_data/ts/ok/types/union-intersection/input.ts:a05a5df1-5e2c-4444-8094-b23c643749f8"}
{"path": "src/modules/client/debounce.ts", "project_name": "GraphQuill", "text": "/**\n * @author : <NAME>\n * @function : debouncing function for use with VS Code document save listener\n * @changelog : ## add changes here\n * * */\n\nfunction debounce(func: Function, wait: number, immediate: boolean) {\n  // label for setTimeout\n  let timeout: ReturnType<typeof setTimeout>|null;\n  // return function that binds passed in func to passed in args and\n  // calls w/setTimeout using wait milliseconds\n  return function (...args: any[]) {\n    // const context = this;\n    // function to reset timeout label to null and invoke func with current\n    // and args if immediate is false\n    const later = function () {\n      timeout = null;\n      if (!immediate) func(...args);\n    };\n    // toggle checking if immediate is truthy and timeout is falsy\n    const callNow = immediate && !timeout;\n    // if timeout is truthy, clear it\n    if (timeout) clearTimeout(timeout);\n    // call setTimeout and label it as timeout\n    timeout = setTimeout(later, wait);\n    // if callNow is truthy invoke func with current context and args\n    if (callNow) func(...args);\n  };\n}\n\nmodule.exports = debounce;\n", "id": "GraphQuill:src/modules/client/debounce.ts:9c432d74-c737-4b64-b51f-b2bf78bd054c"}
{"path": "types/carbon__pictograms-react/es/first--aid/index.d.ts", "project_name": "DefinitelyTyped", "text": "export { FirstAid as default } from \"../../\";\n", "id": "DefinitelyTyped:types/carbon__pictograms-react/es/first--aid/index.d.ts:802a1509-bf2c-46e6-bcce-b9369d9d62cb"}
{"path": "node_modules/twilio/lib/rest/numbers/v2/regulatoryCompliance/bundle/replaceItems.d.ts", "project_name": "The_Student_Life_V1", "text": "/**\n * This code was generated by\n * \\ / _    _  _|   _  _\n *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n *       /       /\n */\n\nimport Page = require('../../../../../base/Page');\nimport Response = require('../../../../../http/response');\nimport V2 = require('../../../V2');\nimport { SerializableClass } from '../../../../../interfaces';\n\ntype ReplaceItemsEndUserType = 'individual'|'business';\n\ntype ReplaceItemsStatus = 'draft'|'pending-review'|'in-review'|'twilio-rejected'|'twilio-approved'|'provisionally-approved';\n\n/**\n * Initialize the ReplaceItemsList\n *\n * PLEASE NOTE that this class contains beta products that are subject to change.\n * Use them with caution.\n *\n * @param version - Version of the resource\n * @param bundleSid - The unique string that identifies the resource.\n */\ndeclare function ReplaceItemsList(version: V2, bundleSid: string): ReplaceItemsListInstance;\n\ninterface ReplaceItemsListInstance {\n  /**\n   * create a ReplaceItemsInstance\n   *\n   * @param opts - Options for request\n   * @param callback - Callback to handle processed record\n   */\n  create(opts: ReplaceItemsListInstanceCreateOptions, callback?: (error: Error | null, item: ReplaceItemsInstance) => any): Promise<ReplaceItemsInstance>;\n  /**\n   * Provide a user-friendly representation\n   */\n  toJSON(): any;\n}\n\n/**\n * Options to pass to create\n *\n * @property fromBundleSid - The source bundle sid to copy the item assignments from\n */\ninterface ReplaceItemsListInstanceCreateOptions {\n  fromBundleSid: string;\n}\n\ninterface ReplaceItemsPayload extends ReplaceItemsResource, Page.TwilioResponsePayload {\n}\n\ninterface ReplaceItemsResource {\n  account_sid: string;\n  date_created: Date;\n  date_updated: Date;\n  email: string;\n  friendly_name: string;\n  regulation_sid: string;\n  sid: string;\n  status: ReplaceItemsStatus;\n  status_callback: string;\n  valid_until: Date;\n}\n\ninterface ReplaceItemsSolution {\n  bundleSid?: string;\n}\n\n\ndeclare class ReplaceItemsInstance extends SerializableClass {\n  /**\n   * Initialize the ReplaceItemsContext\n   *\n   * PLEASE NOTE that this class contains beta products that are subject to change.\n   * Use them with caution.\n   *\n   * @param version - Version of the resource\n   * @param payload - The instance payload\n   * @param bundleSid - The unique string that identifies the resource.\n   */\n  constructor(version: V2, payload: ReplaceItemsPayload, bundleSid: string);\n\n  accountSid: string;\n  dateCreated: Date;\n  dateUpdated: Date;\n  email: string;\n  friendlyName: string;\n  regulationSid: string;\n  sid: string;\n  status: ReplaceItemsStatus;\n  statusCallback: string;\n  /**\n   * Provide a user-friendly representation\n   */\n  toJSON(): any;\n  validUntil: Date;\n}\n\n\ndeclare class ReplaceItemsPage extends Page<V2, ReplaceItemsPayload, ReplaceItemsResource, ReplaceItemsInstance> {\n  /**\n   * Initialize the ReplaceItemsPage\n   *\n   * PLEASE NOTE that this class contains beta products that are subject to change.\n   * Use them with caution.\n   *\n   * @param version - Version of the resource\n   * @param response - Response from the API\n   * @param solution - Path solution\n   */\n  constructor(version: V2, response: Response<string>, solution: ReplaceItemsSolution);\n\n  /**\n   * Build an instance of ReplaceItemsInstance\n   *\n   * @param payload - Payload response from the API\n   */\n  getInstance(payload: ReplaceItemsPayload): ReplaceItemsInstance;\n  /**\n   * Provide a user-friendly representation\n   */\n  toJSON(): any;\n}\n\nexport { ReplaceItemsEndUserType, ReplaceItemsInstance, ReplaceItemsList, ReplaceItemsListInstance, ReplaceItemsListInstanceCreateOptions, ReplaceItemsPage, ReplaceItemsPayload, ReplaceItemsResource, ReplaceItemsSolution, ReplaceItemsStatus }\n", "id": "The_Student_Life_V1:node_modules/twilio/lib/rest/numbers/v2/regulatoryCompliance/bundle/replaceItems.d.ts:92dc24d7-9fac-44f9-8797-d7841310488c"}
{"path": "src/testRunner/unittests/tsserver/refactors.ts", "project_name": "TypeScript", "text": "namespace ts.projectSystem {\r\n    describe(\"unittests:: tsserver:: refactors\", () => {\r\n        it(\"use formatting options\", () => {\r\n            const file = {\r\n                path: \"/a.ts\",\r\n                content: \"function f() {\\n  1;\\n}\",\r\n            };\r\n            const host = createServerHost([file]);\r\n            const session = createSession(host);\r\n            openFilesForSession([file], session);\r\n\r\n            const response0 = session.executeCommandSeq<server.protocol.ConfigureRequest>({\r\n                command: server.protocol.CommandTypes.Configure,\r\n                arguments: {\r\n                    formatOptions: {\r\n                        indentSize: 2,\r\n                    },\r\n                },\r\n            }).response;\r\n            assert.deepEqual(response0, /*expected*/ undefined);\r\n\r\n            const response1 = session.executeCommandSeq<server.protocol.GetEditsForRefactorRequest>({\r\n                command: server.protocol.CommandTypes.GetEditsForRefactor,\r\n                arguments: {\r\n                    refactor: \"Extract Symbol\",\r\n                    action: \"function_scope_1\",\r\n                    file: \"/a.ts\",\r\n                    startLine: 2,\r\n                    startOffset: 3,\r\n                    endLine: 2,\r\n                    endOffset: 4,\r\n                },\r\n            }).response;\r\n            assert.deepEqual(response1, {\r\n                edits: [\r\n                    {\r\n                        fileName: \"/a.ts\",\r\n                        textChanges: [\r\n                            {\r\n                                start: { line: 2, offset: 3 },\r\n                                end: { line: 2, offset: 5 },\r\n                                newText: \"newFunction();\",\r\n                            },\r\n                            {\r\n                                start: { line: 3, offset: 2 },\r\n                                end: { line: 3, offset: 2 },\r\n                                newText: \"\\n\\nfunction newFunction() {\\n  1;\\n}\\n\",\r\n                            },\r\n                        ]\r\n                    }\r\n                ],\r\n                renameFilename: \"/a.ts\",\r\n                renameLocation: { line: 2, offset: 3 },\r\n            });\r\n        });\r\n\r\n        it(\"handles text changes in tsconfig.json\", () => {\r\n            const aTs = {\r\n                path: \"/a.ts\",\r\n                content: \"export const a = 0;\",\r\n            };\r\n            const tsconfig = {\r\n                path: \"/tsconfig.json\",\r\n                content: '{ \"files\": [\"./a.ts\"] }',\r\n            };\r\n\r\n            const session = createSession(createServerHost([aTs, tsconfig]));\r\n            openFilesForSession([aTs], session);\r\n\r\n            const response1 = session.executeCommandSeq<server.protocol.GetEditsForRefactorRequest>({\r\n                command: server.protocol.CommandTypes.GetEditsForRefactor,\r\n                arguments: {\r\n                    refactor: \"Move to a new file\",\r\n                    action: \"Move to a new file\",\r\n                    file: \"/a.ts\",\r\n                    startLine: 1,\r\n                    startOffset: 1,\r\n                    endLine: 1,\r\n                    endOffset: 20,\r\n                },\r\n            }).response;\r\n            assert.deepEqual(response1, {\r\n                edits: [\r\n                    {\r\n                        fileName: \"/a.ts\",\r\n                        textChanges: [\r\n                            {\r\n                                start: { line: 1, offset: 1 },\r\n                                end: { line: 1, offset: 20 },\r\n                                newText: \"\",\r\n                            },\r\n                        ],\r\n                    },\r\n                    {\r\n                        fileName: \"/tsconfig.json\",\r\n                        textChanges: [\r\n                            {\r\n                                start: { line: 1, offset: 21 },\r\n                                end: { line: 1, offset: 21 },\r\n                                newText: \", \\\"./a.1.ts\\\"\",\r\n                            },\r\n                        ],\r\n                    },\r\n                    {\r\n                        fileName: \"/a.1.ts\",\r\n                        textChanges: [\r\n                            {\r\n                                start: { line: 0, offset: 0 },\r\n                                end: { line: 0, offset: 0 },\r\n                                newText: \"export const a = 0;\\n\",\r\n                            },\r\n                        ],\r\n                    }\r\n                ],\r\n                renameFilename: undefined,\r\n                renameLocation: undefined,\r\n            });\r\n        });\r\n\r\n        it(\"handles canonicalization of tsconfig path\", () => {\r\n            const aTs: File = { path: \"/Foo/a.ts\", content: \"const x = 0;\" };\r\n            const tsconfig: File = { path: \"/Foo/tsconfig.json\", content: '{ \"files\": [\"./a.ts\"] }' };\r\n            const session = createSession(createServerHost([aTs, tsconfig]));\r\n            openFilesForSession([aTs], session);\r\n\r\n            const result = executeSessionRequest<protocol.GetEditsForRefactorRequest, protocol.GetEditsForRefactorResponse>(session, protocol.CommandTypes.GetEditsForRefactor, {\r\n                file: aTs.path,\r\n                startLine: 1,\r\n                startOffset: 1,\r\n                endLine: 2,\r\n                endOffset: aTs.content.length,\r\n                refactor: \"Move to a new file\",\r\n                action: \"Move to a new file\",\r\n            });\r\n            assert.deepEqual<protocol.RefactorEditInfo | undefined>(result, {\r\n                edits: [\r\n                    {\r\n                        fileName: aTs.path,\r\n                        textChanges: [{ start: { line: 1, offset: 1 }, end: { line: 1, offset: aTs.content.length + 1 }, newText: \"\" }],\r\n                    },\r\n                    {\r\n                        fileName: tsconfig.path,\r\n                        textChanges: [{ start: { line: 1, offset: 21 }, end: { line: 1, offset: 21 }, newText: ', \"./x.ts\"' }],\r\n                    },\r\n                    {\r\n                        fileName: \"/Foo/x.ts\",\r\n                        textChanges: [{ start: { line: 0, offset: 0 }, end: { line: 0, offset: 0 }, newText: \"const x = 0;\\n\" }],\r\n                    },\r\n                ],\r\n                renameFilename: undefined,\r\n                renameLocation: undefined,\r\n            });\r\n        });\r\n    });\r\n}\r\n", "id": "TypeScript:src/testRunner/unittests/tsserver/refactors.ts:3361b79e-d0fe-421b-8d4c-41643eca914c"}
{"path": "server-side/dotnet-core/RxWebCoreSample/src/app/models/extended-models/data-proc-adj-chnge-ordr-item.ts", "project_name": "rxweb", "text": "import {DataProcAdjChngeOrdrItemBase} from '../database-models/data-proc-adj-chnge-ordr-item-base';\nimport {ChangeOrderLineItemBase} from '../database-models/change-order-line-item-base';\nimport {DataProcAdjLineItemBase} from '../database-models/data-proc-adj-line-item-base';\n//Generated Imports\nexport class DataProcAdjChngeOrdrItem extends DataProcAdjChngeOrdrItemBase \n{\n\n\n\n\n//#region Generated Reference Properties\n//#region changeOrderLineItem Prop\nchangeOrderLineItem : FinancialLineItemBase;\n//#endregion changeOrderLineItem Prop\n//#region dataProcAdjLineItem Prop\ndataProcAdjLineItem : FinancialLineItemBase;\n//#endregion dataProcAdjLineItem Prop\n\n//#endregion Generated Reference Properties\n}", "id": "rxweb:server-side/dotnet-core/RxWebCoreSample/src/app/models/extended-models/data-proc-adj-chnge-ordr-item.ts:8c37830b-d143-4a41-b630-38a7bd69a7f4"}
{"path": "coe-cli/test/commands/aa4am.spec.ts", "project_name": "coe-starter-kit", "text": "\"use strict\";\nimport { AA4AMBranchArguments, AA4AMCommand, AA4AMInstallArguments, AA4AMMakerAddArguments, AA4AMUserArguments } from '../../src/commands/aa4am';\nimport { LoginCommand } from '../../src/commands/login';\nimport { DevOpsCommand } from '../../src/commands/devops';\nimport { mock } from 'jest-mock-extended';\nimport DynamicsWebApi = require('dynamics-web-api');\nimport { AADCommand } from '../../src/commands/aad';\nimport { AxiosStatic } from 'axios';\nimport winston = require('winston');\nimport { GitHubCommand } from '../../src/commands/github';\nimport { PowerPlatformCommand } from '../../src/commands/powerplatform';\n\ndescribe('Install - AAD', () => {\n    test('No command', async () => {\n        // Arrange\n        let logger = mock<winston.Logger>()\n        var command = new AA4AMCommand(logger);\n        let mockLogin = mock<LoginCommand>()\n\n        command.createLoginCommand = () => mockLogin\n\n                // Act\n        let args = new AA4AMInstallArguments();\n        await command.install(args)\n\n        // Assert\n        \n    })\n\n    test('Called', async () => {\n        // Arrange\n        let logger = mock<winston.Logger>()\n        var command = new AA4AMCommand(logger);\n\n        const mockedLoginCommand = mock<LoginCommand>();\n        command.createLoginCommand = () => mockedLoginCommand\n        let mockAADCommand = mock<AADCommand>()\n        command.createAADCommand = () => mockAADCommand\n\n        mockedLoginCommand.azureLogin.mockResolvedValue({})\n\n        let args = new AA4AMInstallArguments();\n        args.components = [ 'aad' ]\n        args.subscription = 'A1'\n        args.azureActiveDirectoryServicePrincipal = 'P1'\n        \n        // Act\n        await command.install(args)\n\n        // Assert\n        expect(mockAADCommand.installAADApplication).toBeCalledTimes(1)\n        expect(mockAADCommand.installAADApplication.mock.calls[0][0].subscription).toBe(\"A1\")\n        expect(mockAADCommand.installAADApplication.mock.calls[0][0].azureActiveDirectoryServicePrincipal).toBe(\"P1\")\n    })\n})\n\ndescribe('Install - DevOps', () => {\n    test('Default', async () => {\n        // Arrange\n        let logger = mock<winston.Logger>()\n        var command = new AA4AMCommand(logger);\n\n        const mockedLoginCommand = mock<LoginCommand>();\n        const mockedDevOpsCommand= mock<DevOpsCommand>();\n        \n        command.createLoginCommand = () => mockedLoginCommand   \n        command.createDevOpsCommand = () => mockedDevOpsCommand    \n\n        mockedLoginCommand.azureLogin.mockResolvedValue({})\n\n        // Act\n        let args = new AA4AMInstallArguments();\n        args.components = ['devops']\n        await command.install(args)\n\n        // Assert\n        expect(mockedLoginCommand.azureLogin).toHaveBeenCalled()\n        expect(mockedDevOpsCommand.install).toHaveBeenCalled()\n    })\n})\n\ndescribe('Install - Enviroment', () => {\n    test('Default', async () => {\n        // Arrange\n        let logger = mock<winston.Logger>()\n        var command = new AA4AMCommand(logger);\n        let addCommand = mock<AADCommand>()\n        let mockLogin = mock<LoginCommand>()\n\n        command.createLoginCommand = () => mockLogin\n\n        const mockedPowerPlatformCommand = mock<PowerPlatformCommand>()\n        const mockedGitHubCommand= mock<GitHubCommand>();\n        const mockedDynamicsWebApi = mock<DynamicsWebApi>();\n        const mockAxios = mock<AxiosStatic>();\n        \n        command.createAADCommand = () => addCommand\n        command.createGitHubCommand = () => mockedGitHubCommand    \n        command.createPowerPlatformCommand = () => mockedPowerPlatformCommand\n        command.createDynamicsWebApi = () => mockedDynamicsWebApi\n        command.getAxios = () => mockAxios\n\n        addCommand.getAADApplication.mockReturnValue(\"A123\");\n        mockedDynamicsWebApi.executeUnboundFunction.mockResolvedValue({BusinessUnitId:\"B1\"})\n        mockedDynamicsWebApi.executeFetchXmlAll.mockResolvedValue({value:[{}]})\n        mockedDynamicsWebApi.associate.mockResolvedValue({})\n        mockAxios.post.mockResolvedValue({})\n\n        // Act\n        let args = new AA4AMInstallArguments();\n        args.components = ['environment']\n        args.environment = \"1\"\n        args.accessTokens = {\n            'https://1.crm.dynamics.com/': '123'\n        }\n        args.azureActiveDirectoryServicePrincipal = \"123\"\n        await command.install(args)\n\n        // Assert\n        expect(mockedPowerPlatformCommand.importSolution).toHaveBeenCalled()\n        expect(mockedGitHubCommand.getRelease).toHaveBeenCalled()\n    })\n})\n\ndescribe('Add User', () => {\n    test('Default', async () => {\n        // Arrange\n        let logger = mock<winston.Logger>()\n        var command = new AA4AMCommand(logger);\n\n        const mockedLoginCommand= mock<LoginCommand>();\n        const mockedDynamicsWebApi= mock<DynamicsWebApi>();\n\n        command.createLoginCommand = () => mockedLoginCommand\n        command.createDynamicsWebApi = (config:DynamicsWebApi.Config) => mockedDynamicsWebApi\n        command.getAxios = () => mock<AxiosStatic>()\n\n        mockedLoginCommand.azureLogin.mockResolvedValue({});\n\n        mockedDynamicsWebApi.executeUnboundFunction.mockReturnValue(Promise.resolve({\n            BusinessUnitId: '123'\n        }))\n\n        mockedDynamicsWebApi.executeFetchXmlAll.mockImplementation((type:string, query:string) => {\n            let response = <DynamicsWebApi.MultipleResponse<any>>{}\n            switch (type) {\n                case 'systemusers':\n                    response.value = [{systemuserid: 'S1'}]\n                    break;\n                case 'roles':\n                    response.value = [{roleid: 'R11'}]\n                    break;\n            }\n            return Promise.resolve(response)\n        })\n\n        mockedDynamicsWebApi.associate.mockReturnValue(Promise.resolve())\n        \n        // Act\n        let args = new AA4AMUserArguments();\n        args.id = \"123\"\n        await command.addUser(args)\n\n        // Assert\n        expect(mockedLoginCommand.azureLogin).toHaveBeenCalled()\n        expect(mockedDynamicsWebApi.executeUnboundFunction).toHaveBeenCalled()\n        expect(mockedDynamicsWebApi.executeFetchXmlAll).toHaveBeenCalled()\n        expect(mockedDynamicsWebApi.associate).toHaveBeenCalled()\n    })\n})\n\ndescribe('Maker Add', () => {\n    test('Default', async () => {\n        // Arrange\n        let logger = mock<winston.Logger>()\n\n        let mockAADCommand = mock<AADCommand>()\n        let mockDevOps = mock<DevOpsCommand>()\n        let mockLogin = mock<LoginCommand>()\n        \n        var command = new AA4AMCommand(logger);\n        command.createAADCommand = () => mockAADCommand\n        command.createDevOpsCommand = () => mockDevOps\n        command.createLoginCommand = () => mockLogin\n\n        mockLogin.azureLogin.mockResolvedValue({})\n\n        let args = new AA4AMMakerAddArguments();\n        args.azureActiveDirectoryMakersGroup = \"G1\"\n        args.azureActiveDirectoryServicePrincipal = \"P1\"\n        args.endpoint = \"prod\"\n        args.organizationName = \"dev12345\"\n        args.project = \"proj1\"\n        args.user = \"U1\"\n        args.environment = \"E1\"\n        args.settings = { 'region': 'NAM' }\n\n        // Act\n        await command.addMaker(args)\n\n        // Assert\n        expect(mockDevOps.createAdvancedMakersServiceConnections).toBeCalledTimes(1)\n\n        expect(mockLogin.azureLogin).toBeCalledTimes(1)\n\n        expect(mockDevOps.createAdvancedMakersServiceConnections.mock.calls[0][0].azureActiveDirectoryServicePrincipal).toBe(args.azureActiveDirectoryServicePrincipal)\n        expect(mockDevOps.createAdvancedMakersServiceConnections.mock.calls[0][0].endpoint).toBe(args.endpoint)\n        expect(mockDevOps.createAdvancedMakersServiceConnections.mock.calls[0][0].organizationName).toBe(args.organizationName)\n        expect(mockDevOps.createAdvancedMakersServiceConnections.mock.calls[0][0].projectName).toBe(args.project)\n        expect(mockDevOps.createAdvancedMakersServiceConnections.mock.calls[0][0].createSecretIfNoExist).toBe(true)\n        expect(mockDevOps.createAdvancedMakersServiceConnections.mock.calls[0][0].environment).toBe(args.environment)\n        \n        expect(mockAADCommand.addUserToGroup).toBeCalledTimes(1) \n        expect(mockAADCommand.addUserToGroup.mock.calls[0][0]).toBe(\"U1\")       \n        expect(mockAADCommand.addUserToGroup.mock.calls[0][1]).toBe(\"G1\")       \n    })\n})\n\ndescribe('Branch', () => {\n    test('Default', async () => {\n        // Arrange\n        let logger = mock<winston.Logger>()\n        var command = new AA4AMCommand(logger);\n\n        const mockedLoginCommand= mock<LoginCommand>();\n        const mockedDevOpsCommand= mock<DevOpsCommand>();\n\n        command.createLoginCommand = () => mockedLoginCommand\n        command.createDevOpsCommand = () => mockedDevOpsCommand\n\n        let tokens : { [id: string] : string } = {}\n        tokens[\"4<PASSWORD>\"] = \"ABC\"\n        mockedLoginCommand.azureLogin.mockResolvedValue(tokens);\n        mockedDevOpsCommand.branch.mockReturnValue(Promise.resolve())\n    \n        // Act\n        let args = new AA4AMBranchArguments();\n        await command.branch(args)\n\n        // Assert\n        expect(mockedLoginCommand.azureLogin).toHaveBeenCalled()\n        expect(mockedDevOpsCommand.branch).toHaveBeenCalled()\n    })\n});\n", "id": "coe-starter-kit:coe-cli/test/commands/aa4am.spec.ts:c932cd4c-9a22-4f50-9671-39973f85f254"}
{"path": "src/object/KeyTypes.ts", "project_name": "type-plus", "text": "/**\n * Type of all keys.\n * To get the keys of an object or array, use the `keyof` keyword.\n * This is just a convenient type as `keyof any` is not obvious.\n */\nexport type KeyTypes = keyof any\n", "id": "type-plus:src/object/KeyTypes.ts:a895f42b-406b-4d18-a3c5-37d1fb2fdefc"}
{"path": "tests/cases/conformance/externalModules/topLevelAwaitNonModule.ts", "project_name": "TypeScript", "text": "// @target: esnext\r\n// @module: es2022,esnext\r\nawait x;\r\n\r\nconst arr = [Promise.resolve()];\r\n\r\nfor await (const item of arr) {\r\n  item;\r\n}\r\n", "id": "TypeScript:tests/cases/conformance/externalModules/topLevelAwaitNonModule.ts:5533eb01-c8c8-41dc-a578-9a521009ddd0"}
{"path": "packages/xplat/src/schematics/helpers/index.spec.ts", "project_name": "xplat", "text": "import { Tree } from '@angular-devkit/schematics';\nimport { Schema } from './schema';\nimport { stringUtils, XplatHelpers } from '@nstudio/xplat';\nimport { setTest } from '@nstudio/xplat-utils';\nimport {\n  isInModuleMetadata,\n  createEmptyWorkspace,\n  getFileContent,\n} from '@nstudio/xplat/testing';\nimport { runSchematic } from '../../utils/testing';\nsetTest();\n\ndescribe('xplat-helper schematic', () => {\n  let appTree: Tree;\n\n  beforeEach(() => {\n    appTree = Tree.empty();\n    appTree = createEmptyWorkspace(appTree);\n  });\n\n  it('generating helper for a platform where the helper is not supported should not do anything', async () => {\n    const optionsXplat: XplatHelpers.Schema = {\n      npmScope: 'testing',\n      prefix: 'tt',\n      platforms: 'web,nativescript',\n    };\n\n    appTree = await runSchematic('init', optionsXplat, appTree);\n    const options: Schema = {\n      name: 'imports',\n      platforms: 'web',\n    };\n    // console.log('appTree:', appTree);\n    const tree = await runSchematic('helpers', options, appTree);\n    const files = tree.files;\n    // console.log(files);\n\n    // xplat helpers\n    expect(\n      files.indexOf('/xplat/nativescript/utils/@nativescript/core.ts')\n    ).toBe(-1);\n    expect(files.indexOf('/xplat/nativescript/utils/@nativescript/ui.ts')).toBe(\n      -1\n    );\n    expect(\n      files.indexOf('/xplat/nativescript/utils/@nativescript/angular/core.ts')\n    ).toBe(-1);\n  });\n});\n", "id": "xplat:packages/xplat/src/schematics/helpers/index.spec.ts:79d41979-0bc6-4fe0-85bf-6631eaf5f7c6"}
{"path": "libs/web/ui/src/components/user-avatar-group/user-avatar-group.component.ts", "project_name": "compito", "text": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nexport interface UserAvatarGroupData {\n  name: string;\n  image: string;\n}\n\n@Component({\n  selector: 'compito-user-avatar-group',\n  template: `\n    <div *ngIf=\"data\">\n      <ul class=\"flex items-center -space-x-4\">\n        <ng-container *ngFor=\"let item of data | slice: 0:itemsToShow\">\n          <li [tippy]=\"item.name\" class=\"rounded-full bg-white p-1 cursor-pointer\">\n            <img\n              class=\"rounded-full pointer-events-none\"\n              [width]=\"size\"\n              [height]=\"size\"\n              [src]=\"item.image\"\n              [alt]=\"item.name\"\n            />\n          </li>\n        </ng-container>\n        <ng-container *ngIf=\"data.length - itemsToShow > 0\">\n          <li class=\"rounded-full bg-gray-100 cursor-pointer\">\n            <div\n              class=\"flex justify-center items-center text-gray-500\"\n              [style.height.px]=\"size\"\n              [style.width.px]=\"size\"\n            >\n              <p class=\"text-sm\">+{{ data.length - itemsToShow }}</p>\n            </div>\n          </li>\n        </ng-container>\n      </ul>\n    </div>\n  `,\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UserAvatarGroupComponent {\n  @Input() data: UserAvatarGroupData[] | null = [];\n  @Input() size = 40;\n  @Input() itemsToShow = 5;\n}\n", "id": "compito:libs/web/ui/src/components/user-avatar-group/user-avatar-group.component.ts:d181c0e6-6780-4320-b790-294d868d6a64"}
{"path": "ui/src/app/components/webcomponents/action-test-data-environment-suggestion.component.ts", "project_name": "testsigma", "text": "import {Component, ElementRef, Inject, OnInit, ViewChild} from '@angular/core';\nimport {Page} from \"../../shared/models/page\";\nimport {Environment} from \"../../models/environment.model\";\nimport {EnvironmentService} from \"../../services/environment.service\";\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {fromEvent} from 'rxjs';\nimport {debounceTime, distinctUntilChanged, filter, tap} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-action-test-data-environment-suggestion',\n  templateUrl: './action-test-data-environment-suggestion.component.html',\n  styles: []\n})\nexport class ActionTestDataEnvironmentSuggestionComponent implements OnInit {\n  public environments: any[];\n  public filteredSuggestion: any[];\n  public currentFocusedIndex: number = 0;\n  public  versionId: number;\n  public showVideo: Boolean = false;\n  public isQueryBased: boolean = false;\n  @ViewChild('searchInput') searchInput: ElementRef;\n  public isFetching: boolean;\n  get getSource() {\n    return \"https://s3.amazonaws.com/assets.testsigma.com/videos/environments/create.mp4\";\n  }\n\n  constructor(\n    private dialogRef: MatDialogRef<ActionTestDataEnvironmentSuggestionComponent, any>,\n    private environmentService: EnvironmentService,\n    @Inject(MAT_DIALOG_DATA) public option: { versionId: number, stepRecorderView: boolean }\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.versionId = this.option.versionId;\n    this.fetchEnvironment();\n    this.attachDebounceEvent();\n    setTimeout(()=> {\n      this.searchInput?.nativeElement?.focus();\n    }, 300);\n  }\n\n  private fetchEnvironment() {\n    this.isFetching = true;\n    this.environmentService.findAll()\n      .subscribe((res: Page<Environment>) => {\n        if(!res.empty) {\n          this.environments = [];\n          res.content.forEach(item => {\n            for (let key in item.parameters) {\n              this.environments.push({'parameter':key, 'name': item.name});\n            }\n          })\n          this.environments = [...new Set(this.environments)];\n          this.filteredSuggestion = this.environments;\n        }\n        this.isFetching = false;\n      }, error => {\n        this.isFetching = false;\n      })\n  }\n\n  attachDebounceEvent() {\n    if (this.searchInput && this.searchInput.nativeElement) {\n      fromEvent(this.searchInput.nativeElement, 'keyup')\n        .pipe(\n          filter(Boolean),\n          debounceTime(200),\n          distinctUntilChanged(),\n          tap((event: KeyboardEvent) => {\n            if ([\"ArrowDown\", \"ArrowUp\"].includes(event.key))\n              return;\n            let searchText = this.environmentNameValue;\n            if (searchText) {\n              this.isQueryBased = true;\n              this.filter(searchText);\n            } else {\n              this.isQueryBased = false;\n              this.filteredSuggestion = this.environments;\n            }\n          })\n        )\n        .subscribe();\n      this.searchInput.nativeElement.focus();\n    } else\n      setTimeout(() => {\n        this.attachDebounceEvent();\n      }, 100);\n  }\n\n  get environmentNameValue() {\n    return this.searchInput.nativeElement.innerHTML.replace(/<br>/g, \"\");\n  }\n\n  filter(searchText?: string) {\n    let filteredSuggestion = [];\n    if (searchText && searchText.length) {\n      this.environments.forEach(suggestion => {\n        if (suggestion.parameter?.toLowerCase().includes(searchText.toLowerCase())) {\n          filteredSuggestion.push(suggestion);\n        }\n      })\n      filteredSuggestion = [...new Set(filteredSuggestion)];\n    } else if (!searchText) {\n      filteredSuggestion = this.environments;\n    }\n    this.filteredSuggestion = [...new Set(filteredSuggestion)];\n  }\n\n  selectedSuggestion(suggestion?: any) {\n    suggestion = suggestion || this.filteredSuggestion[this.currentFocusedIndex];\n    this.dialogRef.close(suggestion);\n  }\n\n  scrollUpEnvParamFocus() {\n    if (this.currentFocusedIndex)\n      --this.currentFocusedIndex;\n    let target = <HTMLElement>document.querySelector(\".h-active\");\n    target.parentElement.scrollTop = target.offsetTop - target.parentElement.offsetTop;\n  }\n\n  scrollDownEnvParamFocus() {\n    if (this.currentFocusedIndex < this.filteredSuggestion.length - 1)\n      ++this.currentFocusedIndex;\n    let target = <HTMLElement>document.querySelector(\".h-active\");\n    target.parentElement.scrollTop = target.offsetTop - target.parentElement.offsetTop;\n  }\n}\n", "id": "testsigma:ui/src/app/components/webcomponents/action-test-data-environment-suggestion.component.ts:b29ac136-baf9-4bab-b824-77a31fa4d804"}
{"path": "backend/files/misc/templates/angular/templates/main/src/app/helpers/magic-selector/magic-selector.component.ts", "project_name": "magic", "text": "\n// Angular imports.\nimport { Observable } from 'rxjs';\nimport { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\n\n/**\n * Selector component allowing you to have a selector dropdown list\n * during editing/creating of items, for items where you have a foreign key,\n * which is a lookup into another database table. Usage would be\n * something like the following in your HTML.\n\n  <app-magic-selector\n    *ngIf=\"canEditColumn('locale_id')\"\n    [model]=\"data.entity\"\n    field=\"locale_id\"\n    key=\"id\"\n    value=\"language\"\n    placeholder=\"Choose a language\"\n    class=\"entity-edit-field\"\n    (change)=\"changed('locale_id')\"\n    [getItems]=\"service.languages.read({limit:-1})\">\n  </app-magic-selector>\n\n * The above would create a select list for you, allowing you to\n * select from a list of items, declared in a database table, instead\n * of having user to manually type in the correct key.\n *\n * In the above example the main table has a field called 'locale_id',\n * which is a foreign key leading into the 'languages' 'id' column,\n * and you want to display the 'language' field to the end user.\n * \n * The (change) part is an output emitter, invoked as the currently selected\n * value has been changed.\n */\n@Component({\n  selector: 'app-magic-selector',\n  templateUrl: './magic-selector.component.html',\n  styleUrls: ['./magic-selector.component.scss'],\n})\nexport class MagicSelectorComponent implements OnInit {\n  /**\n   * Model you're databinding towards.\n   */\n  @Input() public model: any;\n\n  /**\n   * Field in the model that is databound towards the selected key.\n   */\n  @Input() public field: string;\n\n  /**\n   * Key in the referenced table that the field is changed to as\n   * an item is selected.\n   */\n  @Input() public key: string;\n\n  /**\n   * Field in the referenced table that is displayed to the user\n   * allowing him to select a specific item.\n   */\n  @Input() public value: string;\n\n  /**\n   * Placeholder value (tooltip) of selector component.\n   */\n  @Input() public placeholder: string;\n\n  /**\n   * Observable callback for component to retrieve items\n   * to databound towards from backend HTTP service.\n   */\n  @Input() public getItems: Observable<any>;\n\n  /**\n   * Callback to invoke once item is changed.\n   */\n  @Output() public change: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Contains actual databound items, after having fetched\n   * them from the backend.\n   */\n  public items: any[];\n\n  /**\n   * OnInit implementation.\n   */\n  public ngOnInit() {\n    // Retrieving items from callback provided by consumer.\n    this.getItems.subscribe(\n      (res) => {\n        // Assigning model.\n        this.items = res;\n      },\n      (error: any) => console.error('Could not get items in MagicSelector')\n    );\n  }\n\n  /**\n   * Invoked when value is changed.\n   */\n  public valueChanged() {\n    // Emitting changed event, if consumer provided a callback for it\n    this.change?.emit();\n  }\n}\n", "id": "magic:backend/files/misc/templates/angular/templates/main/src/app/helpers/magic-selector/magic-selector.component.ts:1f979ce6-d7a6-4e91-9ff0-71602eae672d"}
{"path": "web/frontend/node_modules/rxjs/src/operator/takeLast.ts", "project_name": "ENELPI---Soru-Cevap-Sistemi", "text": "export * from 'rxjs-compat/operator/takeLast';\n", "id": "ENELPI---Soru-Cevap-Sistemi:web/frontend/node_modules/rxjs/src/operator/takeLast.ts:d4e032a6-c0a2-419a-a0c8-025fc452d799"}
{"path": "packages/cheetah-grid/src/js/internal/paste-utils.ts", "project_name": "cheetah-grid", "text": "import type { PasteRangeBoxValues } from \"../ts-types\";\n\nexport function parsePasteRangeBoxValues(value: string): PasteRangeBoxValues {\n  const normalizeValue = value.replace(/\\r?\\n$/, \"\");\n  const lines = normalizeValue.split(/(?:\\r?\\n)|[\\u2028\\u2029]/g);\n  const values = lines.map((line) => line.split(/\\t/g));\n  const colCount = values.reduce((n, cells) => Math.max(n, cells.length), 0);\n  return {\n    colCount,\n    rowCount: values.length,\n    getCellValue(offsetCol: number, offsetRow: number): string {\n      return values[offsetRow]?.[offsetCol] || \"\";\n    },\n  };\n}\n", "id": "cheetah-grid:packages/cheetah-grid/src/js/internal/paste-utils.ts:1054b2f0-d95c-4c43-bf48-594d39f51c0c"}
{"path": "plasmicpkgs/antd/src/registerButton.ts", "project_name": "plasmic", "text": "import registerComponent, {\n  ComponentMeta,\n} from \"@plasmicapp/host/registerComponent\";\nimport { Button, ButtonProps } from \"antd\";\nimport { Registerable } from \"./registerable\";\n\nexport const buttonMeta: ComponentMeta<ButtonProps> = {\n  name: \"AntdButton\",\n  displayName: \"Antd Button\",\n  props: {\n    type: {\n      type: \"choice\",\n      options: [\"default\", \"primary\", \"ghost\", \"dashed\", \"link\", \"text\"],\n      description: \"Can be set to primary, ghost, dashed, link, text, default\",\n    },\n    size: {\n      type: \"choice\",\n      options: [\"small\", \"medium\", \"large\"],\n      description: \"Set the size of button\",\n    },\n    shape: {\n      type: \"choice\",\n      options: [\"default\", \"circle\", \"round\"],\n      description: \"Can be set button shape\",\n    },\n    disabled: {\n      type: \"boolean\",\n      description: \"Disabled state of button\",\n    },\n    ghost: {\n      type: \"boolean\",\n      description:\n        \"Make background transparent and invert text and border colors\",\n    },\n    danger: {\n      type: \"boolean\",\n      description: \"Set the danger status of button\",\n    },\n    block: {\n      type: \"boolean\",\n      description: \"Option to fit button width to its parent width\",\n    },\n    loading: {\n      type: \"boolean\",\n      description: \"Set the loading status of button\",\n    },\n    href: {\n      type: \"string\",\n      description: \"Redirect url of link button\",\n    },\n    target: {\n      type: \"choice\",\n      options: [\"_blank\", \"_self\", \"_parent\", \"_top\"],\n      description:\n        \"Same as target attribute of a, works when href is specified\",\n    },\n    children: {\n      type: \"slot\",\n      defaultValue: [\n        {\n          type: \"text\",\n          value: \"Button\",\n        },\n      ],\n    },\n  },\n  importPath: \"antd\",\n  importName: \"Button\",\n};\n\nexport function registerButton(\n  loader?: Registerable,\n  customButtonMeta?: ComponentMeta<ButtonProps>\n) {\n  const doRegisterComponent: typeof registerComponent = (...args) =>\n    loader ? loader.registerComponent(...args) : registerComponent(...args);\n  doRegisterComponent(Button, customButtonMeta ?? buttonMeta);\n}\n", "id": "plasmic:plasmicpkgs/antd/src/registerButton.ts:a7550b51-d80d-49f5-9c82-2b2714bde1f4"}
{"path": "libraries/botbuilder-adapter-twitter/src/twitterDirectMessage.ts", "project_name": "botbuilder-community-js", "text": "import * as request from 'request-promise';\nimport { TwitterDirectMessage } from './schema';\n\n/**\n * @module botbuildercommunity/adapter-twitter\n */\n\nexport class TwitterDirectMessageManager {\n    public constructor() {\n\n    }\n    \n    public static async sendDirectMessage(consumerKey: string, consumerSecret: string, accessToken: string, accessSecret: string, payload: TwitterDirectMessage): Promise<TwitterDirectMessage> {\n        const opts = {\n            uri: `https://api.twitter.com/1.1/direct_messages/events/new.json`,\n            method: 'POST',\n            oauth: {\n                consumer_key: consumerKey,\n                consumer_secret: consumerSecret,\n                token: accessToken,\n                token_secret: accessSecret\n            },\n            body: {\n                event: payload\n            },\n            json: true,\n            resolveWithFullResponse: true\n        };\n        try {\n            const res: request.RequestPromise = await request(opts);\n            const result: TwitterDirectMessage = (res.body as any).event;\n            return result;\n        }\n        catch(e) {\n            return null;\n        }\n    }\n}\n", "id": "botbuilder-community-js:libraries/botbuilder-adapter-twitter/src/twitterDirectMessage.ts:f9794ab5-2aef-4eba-b5f6-1fe401c8ef3a"}
{"path": "tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts", "project_name": "TypeScript", "text": "//super call in class constructor with no base type\r\nclass NoBase {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    //super call in class member function with no base type\r\n    fn() {\r\n        super();\r\n    }\r\n\r\n    //super call in class accessor (get and set) with no base type\r\n    get foo() {\r\n        super();\r\n        return null;\r\n    }\r\n    set foo(v) {\r\n        super();\r\n    }\r\n\r\n    //super call in class member initializer with no base type\r\n    p = super();\r\n\r\n    //super call in static class member function with no base type\r\n    static fn() {\r\n        super();\r\n    }\r\n\r\n    //super call in static class member initializer with no base type\r\n    static k = super();\r\n\r\n    //super call in static class accessor (get and set) with no base type\r\n    static get q() {\r\n        super();\r\n        return null;\r\n    }\r\n    static set q(n) {\r\n        super();\r\n    }\r\n}\r\n\r\nclass Base<T> { private n: T; }\r\nclass Derived<T> extends Base<T> {\r\n    //super call with type arguments \r\n    constructor() {\r\n        super<string>();\r\n        super();\r\n    }\r\n}\r\n\r\n\r\nclass OtherBase {\r\n    private n: string;\r\n}\r\n\r\nclass OtherDerived extends OtherBase {\r\n    //super call in class member initializer of derived type\r\n    t = super();\r\n\r\n    fn() {\r\n        //super call in class member function of derived type\r\n        super();\r\n    }\r\n\r\n    //super call in class accessor (get and set) of derived type\r\n    get foo() {\r\n        super();\r\n        return null;\r\n    }\r\n    set foo(n) {\r\n        super();\r\n    }\r\n}\r\n", "id": "TypeScript:tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:cc2165fd-2eb7-4236-8abf-dc0b3bc20bac"}
{"path": "packages/web-components/fast-foundation/src/anchored-region/anchored-region-config.ts", "project_name": "fast", "text": "import type {\n    AutoUpdateMode,\n    AxisPositioningMode,\n    AxisScalingMode,\n    HorizontalPosition,\n    VerticalPosition,\n} from \"./anchored-region.js\";\n\n/**\n * A utility interface to store anchored region\n * configurations that correspond to various common flyout\n * positioning schemes\n *\n * @public\n */\nexport interface AnchoredRegionConfig {\n    /**\n     * Whether the region is positioned using css \"position: fixed\".\n     * Otherwise the region uses \"position: absolute\".\n     * Fixed placement allows the region to break out of parent containers,\n     */\n    readonly fixedPlacement?: boolean;\n\n    /**\n     * The auto-update setting of the component\n     */\n    readonly autoUpdateMode?: AutoUpdateMode;\n\n    /**\n     * Sets what logic the component uses to determine vertical placement.\n     */\n    readonly verticalPositioningMode?: AxisPositioningMode;\n\n    /**\n     * The default vertical position of the region relative to the anchor element\n     */\n    readonly verticalDefaultPosition?: VerticalPosition;\n\n    /**\n     * Whether the region overlaps the anchor on the vertical axis\n     */\n    readonly verticalInset?: boolean;\n\n    /**\n     * Defines how the height of the region is calculated\n     */\n    readonly verticalScaling?: AxisScalingMode;\n\n    /**\n     * How short the space allocated to the default position has to be before the tallest area\n     * is selected for layout\n     */\n    readonly verticalThreshold?: number;\n\n    /**\n     * Whether the region remains in the viewport (ie. detaches from the anchor) on the vertical axis\n     */\n    readonly verticalViewportLock?: boolean;\n\n    /**\n     * Sets what logic the component uses to determine horizontal placement.\n     */\n    readonly horizontalPositioningMode?: AxisPositioningMode;\n\n    /**\n     * The default horizontal position of the region relative to the anchor element\n     */\n    readonly horizontalDefaultPosition?: HorizontalPosition;\n\n    /**\n     *  hether the region overlaps the anchor on the horizontal axis\n     */\n    readonly horizontalInset?: boolean;\n\n    /**\n     * Defines how the width of the region is calculate\n     */\n    readonly horizontalScaling?: AxisScalingMode;\n\n    /**\n     * Whether the region remains in the viewport (ie. detaches from the anchor) on the horizontal axis\n     */\n    readonly horizontalViewportLock?: boolean;\n\n    /**\n     * How short the space allocated to the default position has to be before the widest area\n     * is selected for layout\n     */\n    readonly horizontalThreshold?: number;\n}\n\n/**\n * Building blocks - partial configs\n */\n\n/**\n * A region that matches the size and position of the anchor horizontally\n */\nconst horizontalAnchorOverlay: AnchoredRegionConfig = {\n    horizontalDefaultPosition: \"center\",\n    horizontalPositioningMode: \"locktodefault\",\n    horizontalInset: false,\n    horizontalScaling: \"anchor\",\n};\n\n/**\n * Exported configs\n */\n\n/**\n * A region that always places itself above the anchor, has\n * a width to match the anchor, and is sized vertically by content\n *\n * @public\n */\nexport const FlyoutPosTop: AnchoredRegionConfig = {\n    ...horizontalAnchorOverlay,\n    verticalDefaultPosition: \"top\",\n    verticalPositioningMode: \"locktodefault\",\n    verticalInset: false,\n    verticalScaling: \"content\",\n};\n\n/**\n * A region that always places itself below the anchor, has\n * a width to match the anchor, and is sized vertically by content\n *\n * @public\n */\nexport const FlyoutPosBottom: AnchoredRegionConfig = {\n    ...horizontalAnchorOverlay,\n    verticalDefaultPosition: \"bottom\",\n    verticalPositioningMode: \"locktodefault\",\n    verticalInset: false,\n    verticalScaling: \"content\",\n};\n\n/**\n * A region that places itself above or below the anchor\n * based on available space, has a width to match the anchor,\n * and is sized vertically by content\n *\n * @public\n */\nexport const FlyoutPosTallest: AnchoredRegionConfig = {\n    ...horizontalAnchorOverlay,\n    verticalPositioningMode: \"dynamic\",\n    verticalInset: false,\n    verticalScaling: \"content\",\n};\n\n/**\n * A region that always places itself above the anchor, has\n * a width to match the anchor, and is sized vertically by available space\n *\n * @public\n */\nexport const FlyoutPosTopFill: AnchoredRegionConfig = {\n    ...FlyoutPosTop,\n    verticalScaling: \"fill\",\n};\n\n/**\n * A region that always places itself below the anchor, has\n * a width to match the anchor, and is sized vertically by available space\n *\n * @public\n */\nexport const FlyoutPosBottomFill: AnchoredRegionConfig = {\n    ...FlyoutPosBottom,\n    verticalScaling: \"fill\",\n};\n\n/**\n * A region that places itself above or below the anchor\n * based on available space, has a width to match the anchor,\n * and is sized vertically by available space\n *\n * @public\n */\nexport const FlyoutPosTallestFill: AnchoredRegionConfig = {\n    ...FlyoutPosTallest,\n    verticalScaling: \"fill\",\n};\n", "id": "fast:packages/web-components/fast-foundation/src/anchored-region/anchored-region-config.ts:5b5c4925-7ad1-4435-8d93-68c6b8c03bd6"}
{"path": "frameless-titlebar-master/src/title-bar/components/bar.tsx", "project_name": "frameless-titlebar", "text": "import React, { useContext, useRef, useCallback } from 'react';\nimport { ThemeContext } from '../theme';\nimport styles from '../style.css';\nimport { BarProps } from '../typings';\n\nconst Bar = ({\n  onDoubleClick,\n  children,\n  bottomBar\n}: BarProps) => {\n  const {\n    platform,\n    bar: {\n      height,\n      borderBottom,\n      background,\n      fontFamily,\n      color,\n    },\n    menu: {\n      style,\n    }\n  } = useContext(ThemeContext);\n  const ref = useRef(null);\n  const dblClick = useCallback((e) => {\n    if (e.target == ref.current) {\n      onDoubleClick && onDoubleClick(e);\n    }\n  }, [ref.current, onDoubleClick])\n  const isDarwin = platform === 'darwin';\n  return (\n    <div\n      className={styles.Bar}\n      ref={ref}\n      style={{\n        padding: isDarwin ? '0 70px' : 0,\n        borderBottom: (style === 'stacked' && !bottomBar) ? '' : borderBottom,\n        background,\n        color,\n        height,\n        fontFamily,\n      }}\n      onDoubleClick={dblClick}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Bar;\n", "id": "frameless-titlebar:frameless-titlebar-master/src/title-bar/components/bar.tsx:5418b47d-f290-4f4f-a55d-586a405003e6"}
{"path": "tests/cases/fourslash/referencesForAmbients2.ts", "project_name": "TypeScript", "text": "/// <reference path='fourslash.ts'/>\r\n\r\n// @Filename: /defA.ts\r\n////declare module \"a\" {\r\n////    [|export type [|{| \"isWriteAccess\": true, \"isDefinition\": true, \"contextRangeIndex\": 0 |}T|] = number;|]\r\n////}\r\n\r\n// @Filename: /defB.ts\r\n////declare module \"b\" {\r\n////    export import a = require(\"a\");\r\n////    export const x: a.[|T|];\r\n////}\r\n\r\n// @Filename: /defC.ts\r\n////declare module \"c\" {\r\n////    import b = require(\"b\");\r\n////    const x: b.a.[|T|];\r\n////}\r\n\r\nverify.noErrors();\r\nverify.singleReferenceGroup(\"type T = number\", \"T\");\r\n", "id": "TypeScript:tests/cases/fourslash/referencesForAmbients2.ts:efcecaaa-b5d4-4ba1-bf96-bb1b2e90aeff"}
{"path": "packages/studio721/src/pages/mint.tsx", "project_name": "studio721", "text": "import { Interface } from '@ethersproject/abi';\nimport { Contract } from '@ethersproject/contracts';\nimport { getLuminance } from '@openpalette/color';\nimport { CHAIN_ID } from '@openpalette/contract';\nimport {\n  CheckIcon,\n  ExternalLinkIcon,\n  Pencil1Icon,\n} from '@radix-ui/react-icons';\nimport {\n  Blockquote,\n  Body,\n  ConnectionDisplay,\n  Divider,\n  FormRow,\n  Heading2,\n  Heading3,\n  HStack,\n  Small,\n  SpacerHorizontal,\n  SpacerVertical,\n  VStack,\n} from 'components';\nimport { useAddress, useChainId, useWeb3API, useWeb3Data } from 'contexts';\nimport { useReadOnlyContractData } from 'contract-data';\nimport { parseCSSColor } from 'csscolorparser-ts';\nimport { Button, InputField } from 'designsystem';\nimport { useFetch } from 'hooks';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport {\n  createInitialMintStyle,\n  mintStyleReducer,\n  MintStyleState,\n} from 'state';\nimport { getEtherActorBaseURL, getEtherscanAddressUrl } from 'web3-utils';\nimport delegatedAbi from '../assets/slim-gwei-abi.json';\nimport { BackgroundFill } from '../components/mint/BackgroundFill';\nimport { ColorPicker } from '../components/mint/ColorPicker';\nimport { MintingCard } from '../components/mint/MintingCard';\nimport { SimplePrimaryButton } from '../components/mint/MintingCardDetails';\nimport {\n  decodeConfigParameter,\n  useUrlConfigReducer,\n} from '../hooks/useUrlConfigReducer';\n\ninterface ServerProps {\n  isAddressLocked: boolean;\n  isCreatorLocked: boolean;\n  abi: any;\n}\n\n// If this is a delegated contract, we need to add in the delegated\n// ABI to be able to call those functions. This primitive check for\n// `implementation` could be improved, but is probably fine for now\n//\n// Currently it seems ether.actor doesn't support calling the delegated\n// functions, so this will only work if there's a connected wallet\nfunction addDelegatedImplementation(abi: any) {\n  const isDelegatedContract = abi.find(\n    (item: any) => item.name === 'implementation',\n  );\n\n  return isDelegatedContract ? [...abi, ...delegatedAbi] : abi;\n}\n\nexport default function Mint({\n  isAddressLocked,\n  isCreatorLocked,\n  abi: serverAbi,\n}: ServerProps) {\n  const { connect } = useWeb3API();\n  const address = useAddress();\n  const provider = useWeb3Data()?.provider;\n  const chainId = useChainId() ?? CHAIN_ID.MAINNET;\n\n  const [style, dispatch] = useUrlConfigReducer({\n    reducer: mintStyleReducer,\n    createInitialState: createInitialMintStyle,\n  });\n\n  const [showStyleEditor, setShowStyleEditor] = useState(false);\n\n  const etherActorAbi = useFetch<{ abi: any }>(\n    style.contractAddress\n      ? `${getEtherActorBaseURL(style.chainId || chainId)}/${\n          style.contractAddress\n        }.json`\n      : undefined,\n  );\n\n  useEffect(() => {\n    if (!serverAbi && etherActorAbi.type !== 'success') return;\n\n    // If there's already a chainId, don't overwrite\n    if (style.chainId) return;\n\n    // Note that this also updates the url in the case where we have a serverAbi\n    // but no style.chainId. It will default to mainnet.\n    dispatch({ type: 'setChainId', value: chainId });\n  }, [serverAbi, etherActorAbi, style.chainId, chainId, dispatch]);\n\n  useEffect(() => {\n    if (isCreatorLocked || !address) return;\n\n    dispatch({ type: 'setCreatorAddress', value: address });\n  }, [isCreatorLocked, address, dispatch]);\n\n  const abi = useMemo(() => {\n    if (serverAbi) {\n      return new Interface(addDelegatedImplementation(serverAbi));\n    }\n\n    if (etherActorAbi.type !== 'success') return;\n\n    return new Interface(addDelegatedImplementation(etherActorAbi.value.abi));\n  }, [etherActorAbi, serverAbi]);\n\n  const contract = useMemo(() => {\n    if (!abi) return;\n\n    return new Contract(style.contractAddress, abi, provider);\n  }, [style.contractAddress, abi, provider]);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  const parsedBackground = parseCSSColor(style.background);\n  const parsedCardBackground = parseCSSColor(style.cardBackground);\n  const actualBackground =\n    parsedCardBackground && parsedCardBackground[3] > 0\n      ? parsedCardBackground\n      : parsedBackground;\n  const invertForeground = actualBackground\n    ? getLuminance({\n        r: actualBackground[0] / 255,\n        g: actualBackground[1] / 255,\n        b: actualBackground[2] / 255,\n      }) > 0.5\n    : false;\n\n  const nameFunction = abi ? abi.functions['name()'] : undefined;\n  const nameResult = useReadOnlyContractData<string>({\n    fragment: nameFunction,\n    contract,\n    chainId: style.chainId,\n  });\n\n  // TODO: When abi is fetched and we know contract address is OK, put\n  // chainname in config and use that to fetch from server. Show error if\n  // user's wallet is connected to the wrong network\n\n  return (\n    <VStack flex={'1 1 auto'} position=\"relative\">\n      {!abi && <BackgroundFill background={style.background} />}\n      {!serverAbi && etherActorAbi.type !== 'success' && (\n        <VStack flex=\"1\" alignItems=\"center\" justifyContent=\"center\">\n          <VStack width={450} gap={20}>\n            <VStack>\n              <Heading2 textAlign=\"center\">Contract Address</Heading2>\n              <SpacerVertical size={20} />\n              <HStack>\n                <InputField.Root id=\"input-contract-address\" flex=\"1\">\n                  <InputField.Input\n                    ref={inputRef}\n                    disabled={isAddressLocked}\n                    value={style.contractAddress}\n                    placeholder={'Enter Contract Address'}\n                    type=\"text\"\n                    style={{\n                      textAlign: 'center',\n                      padding: '8px 8px',\n                      fontSize: '16px',\n                      fontFamily: 'monospace',\n                    }}\n                    onChange={(value) => {\n                      dispatch({ type: 'setContractAddress', value });\n                    }}\n                  />\n                </InputField.Root>\n              </HStack>\n              <SpacerVertical size={10} />\n              {style.contractAddress && etherActorAbi.type === 'pending' && (\n                <>\n                  <Body\n                    textAlign=\"center\"\n                    fontFamily=\"monospace\"\n                    className=\"flickerAnimation\"\n                  >\n                    Loading...\n                  </Body>\n                </>\n              )}\n              {etherActorAbi.type === 'failure' && (\n                <>\n                  <Body textAlign=\"center\" color=\"red\" fontFamily=\"monospace\">\n                    {etherActorAbi.value.message}\n                  </Body>\n                  {!provider && (\n                    <>\n                      <SpacerVertical size={10} />\n                      <Blockquote>\n                        If this contract is on a network other than Ethereum\n                        mainnet, please connect your wallet first.\n                      </Blockquote>\n                    </>\n                  )}\n                </>\n              )}\n            </VStack>\n            <Divider variant=\"light\" />\n            <VStack>\n              <HStack alignItems=\"center\">\n                <Heading3>Connected Wallet</Heading3>\n                <SpacerHorizontal />\n                {provider ? (\n                  <ConnectionDisplay />\n                ) : (\n                  <SimplePrimaryButton onClick={connect}>\n                    Connect wallet\n                  </SimplePrimaryButton>\n                )}\n              </HStack>\n            </VStack>\n          </VStack>\n        </VStack>\n      )}\n      {abi && style.chainId && (\n        <HStack flex=\"1 1 auto\" position=\"relative\">\n          <BackgroundFill background={style.background} />\n          <VStack\n            flex=\"2\"\n            padding={40}\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            position=\"relative\"\n            breakpoints={{\n              [600]: {\n                padding: 20,\n              },\n            }}\n          >\n            <VStack position=\"relative\" gap={20}>\n              <MintingCard\n                dispatch={dispatch}\n                editing={showStyleEditor}\n                intrinsicName={nameResult}\n                title={style.title}\n                description={style.description || undefined}\n                abi={abi}\n                contract={contract}\n                background={style.cardBackground}\n                invertForeground={invertForeground}\n                coverAsset={style.coverAsset}\n                contractChainId={style.chainId}\n                dataSources={style.dataSources}\n              />\n              {(!isAddressLocked || style.creatorAddress === address) && (\n                <VStack\n                  position=\"absolute\"\n                  left={'calc(100% + 20px)'}\n                  top={0}\n                  alignItems=\"flex-start\"\n                  gap={20}\n                  breakpoints={{\n                    [800]: {\n                      position: 'unset',\n                    },\n                  }}\n                >\n                  <HStack background=\"#222\" borderRadius={4}>\n                    <Button\n                      onClick={() => setShowStyleEditor(!showStyleEditor)}\n                    >\n                      {showStyleEditor ? <CheckIcon /> : <Pencil1Icon />}\n                      <SpacerHorizontal size={8} inline />\n                      {showStyleEditor ? 'Confirm' : 'Edit'}\n                    </Button>\n                  </HStack>\n                  {showStyleEditor && (\n                    <VStack\n                      minWidth={300}\n                      gap={8}\n                      background=\"#222\"\n                      borderRadius={4}\n                      padding=\"4px 6px\"\n                    >\n                      <FormRow\n                        variant=\"small\"\n                        title=\"Background\"\n                        tooltip={\n                          <VStack gap={20}>\n                            <Small>\n                              This field supports any CSS background value. You\n                              can use solid colors, gradients, images, multiple\n                              backgrounds, and more.\n                            </Small>\n                            <Small>\n                              Example gradient:{' '}\n                              <code\n                                style={{\n                                  background: '#222',\n                                  padding: '2px 4px',\n                                  borderRadius: '2px',\n                                }}\n                              >\n                                linear-gradient(pink, black)\n                              </code>\n                            </Small>\n                            <Small>\n                              Example Image:{' '}\n                              <code\n                                style={{\n                                  background: '#222',\n                                  padding: '2px 4px',\n                                  borderRadius: '2px',\n                                }}\n                              >\n                                center/cover\n                                url(\"https://picsum.photos/id/237/500/500\")\n                              </code>\n                            </Small>\n                          </VStack>\n                        }\n                      >\n                        <HStack flex=\"1\" gap={6}>\n                          <ColorPicker\n                            color={style.background}\n                            onChange={(value) => {\n                              dispatch({ type: 'setBackground', value });\n                            }}\n                          />\n                          <InputField.Root>\n                            <InputField.Input\n                              value={style.background}\n                              onChange={(value) => {\n                                dispatch({ type: 'setBackground', value });\n                              }}\n                            />\n                          </InputField.Root>\n                        </HStack>\n                      </FormRow>\n                      <FormRow variant=\"small\" title=\"Card Color\">\n                        <HStack flex=\"1\" gap={6}>\n                          <ColorPicker\n                            color={style.cardBackground}\n                            onChange={(value) => {\n                              dispatch({ type: 'setCardBackground', value });\n                            }}\n                          />\n                          <InputField.Root>\n                            <InputField.Input\n                              value={style.cardBackground}\n                              onChange={(value) => {\n                                dispatch({\n                                  type: 'setCardBackground',\n                                  value,\n                                });\n                              }}\n                            />\n                          </InputField.Root>\n                        </HStack>\n                      </FormRow>\n                    </VStack>\n                  )}\n                  {showStyleEditor && (\n                    <VStack\n                      minWidth={300}\n                      gap={8}\n                      background=\"#222\"\n                      borderRadius={4}\n                      padding=\"4px 6px\"\n                      alignSelf=\"start\"\n                    >\n                      <Heading3>How it works</Heading3>\n                      <Small>\n                        The configuration for this page is stored in your\n                        browser's URL (address bar). When you're done editing,\n                        you can share the URL and collectors can mint with it.\n                      </Small>\n                      <Small>\n                        We recommend using a URL shortener like{' '}\n                        <a\n                          href=\"https://bitly.com/\"\n                          target=\"_blank\"\n                          rel=\"noreferrer\"\n                        >\n                          bitly →\n                        </a>\n                        , both so the URL looks nicer, and so you can make\n                        updates to it after sharing.\n                      </Small>\n                      <Small>\n                        You can edit your page if you connect with the same\n                        wallet. If you make edits, you'll need to re-share the\n                        new URL and/or update any shortened URL links.\n                      </Small>\n                    </VStack>\n                  )}\n                </VStack>\n              )}\n            </VStack>\n          </VStack>\n        </HStack>\n      )}\n      {abi && (\n        <HStack\n          position=\"relative\"\n          padding={'20px 40px'}\n          gap={20}\n          breakpoints={{\n            [1000]: {\n              flexDirection: 'column',\n              padding: '20px',\n              order: 0,\n            },\n          }}\n        >\n          <BackgroundFill\n            background={style.cardBackground || style.background}\n          />\n          <HStack\n            flex=\"1\"\n            alignItems=\"center\"\n            gap={20}\n            filter={invertForeground ? 'invert()' : undefined}\n          >\n            <Heading3>NFT Contract Address</Heading3>\n            <HStack alignSelf=\"stretch\" gap={10} flex=\"1\" maxWidth={470}>\n              <InputField.Root id=\"input-multi-mint\" flex=\"1\">\n                <InputField.Input\n                  value={style.contractAddress}\n                  // disabled\n                  type=\"text\"\n                  style={{\n                    textAlign: 'center',\n                    padding: '8px 8px',\n                    fontSize: '16px',\n                    fontFamily: 'monospace',\n                  }}\n                  onChange={(value) => {}}\n                />\n              </InputField.Root>\n              <Button\n                as=\"a\"\n                {...{\n                  href: getEtherscanAddressUrl(chainId, style.contractAddress),\n                  target: '_blank',\n                  rel: 'noreferrer',\n                }}\n              >\n                <ExternalLinkIcon />\n              </Button>\n            </HStack>\n          </HStack>\n          {address && (\n            <HStack\n              alignItems=\"center\"\n              gap={20}\n              filter={invertForeground ? 'invert()' : undefined}\n            >\n              <Heading3>Wallet</Heading3>\n              <ConnectionDisplay />\n            </HStack>\n          )}\n        </HStack>\n      )}\n    </VStack>\n  );\n}\n\nexport async function getServerSideProps(\n  context: any,\n): Promise<{ props: ServerProps }> {\n  const parsedConfig: Partial<MintStyleState> = decodeConfigParameter(\n    context.query.config,\n  );\n\n  let abi: any;\n\n  try {\n    if (parsedConfig.contractAddress) {\n      const response = await fetch(\n        `${getEtherActorBaseURL(parsedConfig.chainId ?? CHAIN_ID.MAINNET)}/${\n          parsedConfig.contractAddress\n        }.json`,\n      );\n      const data = await response.json();\n      abi = data.abi;\n    }\n  } catch {\n    //\n  }\n\n  return {\n    props: {\n      isAddressLocked: !!parsedConfig.contractAddress,\n      isCreatorLocked: !!parsedConfig.creatorAddress,\n      ...(abi && { abi }),\n    },\n  };\n}\n", "id": "studio721:packages/studio721/src/pages/mint.tsx:d66cff92-a071-4f5e-9554-665f6ac0a0c9"}
{"path": "packages/proppy/src/withState.ts", "project_name": "proppy", "text": "import { ProppyFactory } from './types';\nimport { create } from './create';\n\nexport function withState(stateName, setterName, initialState): ProppyFactory {\n  return create({\n    initialize() {\n      this.props[stateName] = initialState;\n      this.props[setterName] = (value) => {\n        this.set({\n          [stateName]: value,\n        });\n      };\n    },\n  });\n}\n", "id": "proppy:packages/proppy/src/withState.ts:8a481e56-7035-445a-9197-7920fac45ea7"}
{"path": "packages/migrate/src/index.ts", "project_name": "kosko", "text": "/**\n * @packageDocumentation\n * @module @kosko/migrate\n */\n\nexport * from \"./migrate\";\n", "id": "kosko:packages/migrate/src/index.ts:65e232ec-a78e-4fad-ad3f-ce556ad70a4a"}
{"path": "test/cfc/fixture/Fixture.tsx", "project_name": "egjs-flicking", "text": "import { FlickingEvents, FlickingOptions, Plugin } from \"@egjs/flicking\";\n\ntype Fixture = (props?: {\n  options?: Partial<FlickingOptions>;\n  events?: Partial<{ [key in keyof FlickingEvents]: (e: FlickingEvents[key]) => any }>;\n  plugins?: Plugin[];\n}) => JSX.Element;\n\nexport default Fixture;\n", "id": "egjs-flicking:test/cfc/fixture/Fixture.tsx:86ff6111-af76-4e28-a06b-b6219c553c27"}
{"path": "example/src/pages/Test.tsx", "project_name": "ui-neumorphism", "text": "import React from 'react'\n\nimport { Dialog } from 'ui-neumorphism';\n\nexport class Abc extends React.Component {\n  render() {\n    return <div><Dialog  ></Dialog></div>\n  }\n}", "id": "ui-neumorphism:example/src/pages/Test.tsx:203c3b8c-cc4a-4cf5-aed4-52d772604ab7"}
{"path": "sonarQuest-frontend/src/app/Interfaces/Participation.ts", "project_name": "sonarQuest", "text": "import {Task} from './Task';\nimport {User} from './User';\nimport {Quest} from './Quest';\n\nexport interface Participation {\n  id: number,\n  tasks?: Task[],\n  quest?: Quest,\n  user: User;\n}\n", "id": "sonarQuest:sonarQuest-frontend/src/app/Interfaces/Participation.ts:db24c1fb-c54a-499c-bb92-4fc9071a7db0"}
{"path": "quix-frontend/service/src/modules/search/parser.spec.ts", "project_name": "quix", "text": "import {parse} from './parser';\nimport {SearchQuery, SearchTextType} from '@wix/quix-shared';\n\ndescribe('search query parser', () => {\n  describe('basic', () => {\n    it('handle basic text search', () => {\n      const input = 'select 1 from foo';\n      const expected: SearchQuery = {\n        fullText: input,\n        content: [\n          {type: SearchTextType.WORD, text: 'select'},\n          {type: SearchTextType.WORD, text: '1'},\n          {type: SearchTextType.WORD, text: 'from'},\n          {type: SearchTextType.WORD, text: 'foo'},\n        ],\n      };\n      expect(parse(input)).toEqual(expected);\n    });\n\n    it('handle weird characters', () => {\n      const input = 'select $START_TIME from foo';\n      const expected: SearchQuery = {\n        fullText: input,\n        content: [\n          {type: SearchTextType.WORD, text: 'select'},\n          {type: SearchTextType.WORD, text: '$START_TIME'},\n          {type: SearchTextType.WORD, text: 'from'},\n          {type: SearchTextType.WORD, text: 'foo'},\n        ],\n      };\n      expect(parse(input)).toEqual(expected);\n    });\n\n    it('handle expression wrapped in quotes', () => {\n      const input = '\"select bar from\" foo';\n      const expected: SearchQuery = {\n        fullText: input,\n        content: [\n          {type: SearchTextType.PHRASE, text: 'select bar from'},\n          {type: SearchTextType.WORD, text: 'foo'},\n        ],\n      };\n      expect(parse(input)).toEqual(expected);\n    });\n\n    it('handle multiple spaces', () => {\n      const input = 'select\\t1    from\\nfoo';\n      const expected: SearchQuery = {\n        fullText: input,\n        content: [\n          {type: SearchTextType.WORD, text: 'select'},\n          {type: SearchTextType.WORD, text: '1'},\n          {type: SearchTextType.WORD, text: 'from'},\n          {type: SearchTextType.WORD, text: 'foo'},\n        ],\n      };\n      expect(parse(input)).toEqual(expected);\n    });\n  });\n\n  describe('with special operators', () => {\n    it('handle user operator', () => {\n      const input = 'user:<EMAIL> select 1 from foo';\n      const expected: SearchQuery = {\n        fullText: input,\n        content: [\n          {type: SearchTextType.WORD, text: 'select'},\n          {type: SearchTextType.WORD, text: '1'},\n          {type: SearchTextType.WORD, text: 'from'},\n          {type: SearchTextType.WORD, text: 'foo'},\n        ],\n        owner: '<EMAIL>',\n      };\n      expect(parse(input)).toEqual(expected);\n    });\n\n    it('handle user operator without any string', () => {\n      const input = 'user:<EMAIL>';\n      const expected: SearchQuery = {\n        fullText: input,\n        content: [],\n        owner: '<EMAIL>',\n      };\n      expect(parse(input)).toEqual(expected);\n    });\n\n    it('do not handle user operator in the middle of a sentence', () => {\n      const input = 'select bar user:<EMAIL> from foo';\n      const expected: SearchQuery = {\n        fullText: input,\n        content: [\n          {type: SearchTextType.WORD, text: 'select'},\n          {type: SearchTextType.WORD, text: 'bar'},\n          {type: SearchTextType.WORD, text: 'user:foo wix.com'},\n          {type: SearchTextType.WORD, text: 'from'},\n          {type: SearchTextType.WORD, text: 'foo'},\n        ],\n      };\n      expect(parse(input)).toEqual(expected);\n    });\n\n    it('do not handle user operator in the middle of a sentence', () => {\n      const input = 'select bar from foo user:<EMAIL>';\n      const expected: SearchQuery = {\n        fullText: input,\n        content: [\n          {type: SearchTextType.WORD, text: 'select'},\n          {type: SearchTextType.WORD, text: 'bar'},\n          {type: SearchTextType.WORD, text: 'from'},\n          {type: SearchTextType.WORD, text: 'foo'},\n        ],\n        owner: '<EMAIL>',\n      };\n      expect(parse(input)).toEqual(expected);\n    });\n\n    it('handle name operator', () => {\n      const input = 'name:anewnotebook select 1 from foo';\n      const expected: SearchQuery = {\n        fullText: input,\n        content: [\n          {type: SearchTextType.WORD, text: 'select'},\n          {type: SearchTextType.WORD, text: '1'},\n          {type: SearchTextType.WORD, text: 'from'},\n          {type: SearchTextType.WORD, text: 'foo'},\n        ],\n        name: 'anewnotebook',\n      };\n      expect(parse(input)).toEqual(expected);\n    });\n\n    it('handle name operator with spaces', () => {\n      const input = 'name:\"a new notebook\" select 1 from foo';\n      const expected: SearchQuery = {\n        fullText: input,\n        content: [\n          {type: SearchTextType.WORD, text: 'select'},\n          {type: SearchTextType.WORD, text: '1'},\n          {type: SearchTextType.WORD, text: 'from'},\n          {type: SearchTextType.WORD, text: 'foo'},\n        ],\n        name: 'a new notebook',\n      };\n      expect(parse(input)).toEqual(expected);\n    });\n\n    it('handle type operator', () => {\n      const input = 'type:python select 1 from foo';\n      const input2 = 'select 1 from foo type:python';\n      const expected1: SearchQuery = {\n        fullText: input,\n        content: [\n          {type: SearchTextType.WORD, text: 'select'},\n          {type: SearchTextType.WORD, text: '1'},\n          {type: SearchTextType.WORD, text: 'from'},\n          {type: SearchTextType.WORD, text: 'foo'},\n        ],\n        type: 'python',\n      };\n      const expected2: SearchQuery = {...expected1, fullText: input2};\n      expect(parse(input)).toEqual(expected1);\n      expect(parse(input2)).toEqual(expected2);\n    });\n\n    it('multiple operators', () => {\n      const input =\n        'type:python name:\"a new notebook\" select 1 from foo user:<EMAIL>';\n      const expected: SearchQuery = {\n        fullText: input,\n        content: [\n          {type: SearchTextType.WORD, text: 'select'},\n          {type: SearchTextType.WORD, text: '1'},\n          {type: SearchTextType.WORD, text: 'from'},\n          {type: SearchTextType.WORD, text: 'foo'},\n        ],\n        type: 'python',\n        name: 'a new notebook',\n        owner: '<EMAIL>',\n      };\n      expect(parse(input)).toEqual(expected);\n    });\n  });\n});\n", "id": "quix:quix-frontend/service/src/modules/search/parser.spec.ts:fc8b0aa2-d502-47cc-9598-e19f10f6b085"}
{"path": "js/packages/common/src/models/packs/accounts/PackCard.ts", "project_name": "metaplex", "text": "import { Connection } from '@solana/web3.js';\nimport { deserializeUnchecked } from 'borsh';\n\nimport { PackKey, MAX_PACK_CARD_SIZE } from '..';\nimport { AccountAndPubkey, PACK_CREATE_ID, StringPublicKey } from '../../..';\nimport { getProgramAccounts } from '../../../contexts/meta/web3';\n\nexport class PackCard {\n  key: PackKey = PackKey.PackCard;\n  packSet: StringPublicKey;\n  master: StringPublicKey;\n  metadata: StringPublicKey;\n  tokenAccount: StringPublicKey;\n  maxSupply: number;\n  weight: number;\n\n  constructor(args: {\n    key: PackKey;\n    packSet: StringPublicKey;\n    master: StringPublicKey;\n    metadata: StringPublicKey;\n    tokenAccount: StringPublicKey;\n    maxSupply: number;\n    weight: number;\n  }) {\n    this.key = PackKey.PackSet;\n    this.packSet = args.packSet;\n    this.master = args.master;\n    this.metadata = args.metadata;\n    this.tokenAccount = args.tokenAccount;\n    this.maxSupply = args.maxSupply;\n    this.weight = args.weight;\n  }\n}\n\nexport const PACK_CARD_SCHEMA = new Map<any, any>([\n  [\n    PackCard,\n    {\n      kind: 'struct',\n      fields: [\n        ['key', 'u8'],\n        ['packSet', 'pubkeyAsString'],\n        ['master', 'pubkeyAsString'],\n        ['metadata', 'pubkeyAsString'],\n        ['tokenAccount', 'pubkeyAsString'],\n        ['maxSupply', 'u32'],\n        ['weight', 'u16'],\n      ],\n    },\n  ],\n]);\n\nexport const decodePackCard = (buffer: Buffer) => {\n  return deserializeUnchecked(PACK_CARD_SCHEMA, PackCard, buffer) as PackCard;\n};\n\nexport const getCardsByPackSet = ({\n  connection,\n  packSetKey,\n}: {\n  connection: Connection;\n  packSetKey: StringPublicKey;\n}): Promise<AccountAndPubkey[]> =>\n  getProgramAccounts(connection, PACK_CREATE_ID.toString(), {\n    filters: [\n      {\n        dataSize: MAX_PACK_CARD_SIZE,\n      },\n      {\n        memcmp: {\n          offset: 1,\n          bytes: packSetKey,\n        },\n      },\n    ],\n  });\n", "id": "metaplex:js/packages/common/src/models/packs/accounts/PackCard.ts:677e72fa-f260-490d-84f6-6c16f99873b7"}
{"path": "packages/playground/src/playground/Sidebar.tsx", "project_name": "velcro", "text": "import styled from '@emotion/styled/macro';\nimport * as Monaco from 'monaco-editor';\nimport React, { useContext, useRef } from 'react';\nimport { Button } from 'reakit/Button';\nimport { Tooltip, TooltipReference, useTooltipState } from 'reakit/Tooltip';\nimport { useDirectory, EntryKind } from '../lib/hooks';\nimport { useActiveModel, EditorManagerContext } from '../lib/EditorManager';\n\nconst Entry = styled.div<{ modelFocused: boolean }>`\n  background-color: ${props => (props.modelFocused ? '#008cba' : 'inherit')};\n  text-decoration: none;\n  color: ${props => (props.modelFocused ? '#fff' : '#262626')};\n\n  height: 25px;\n  padding: 0 0 0 8px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  & > span {\n    flex: 1;\n  }\n\n  & > button {\n    display: none;\n  }\n\n  &:hover > button {\n    display: block;\n  }\n\n  ${props =>\n    props.modelFocused\n      ? {\n          ':hover': {\n            color: '#f5f5f5',\n            cursor: 'pointer',\n          },\n        }\n      : {\n          ':hover': {\n            backgroundColor: '#eee',\n            color: '#262626',\n            cursor: 'pointer',\n          },\n        }}\n`;\n\nconst CreateEntry = styled.div`\n  text-decoration: none;\n  color: '#262626';\n\n  height: 25px;\n  padding: 0 0 0 8px;\n  display: flex;\n  align-items: center;\n\n  :hover {\n    background-color: #eee;\n    cursor: pointer;\n  }\n`;\n\nconst SidebarFileDelete = styled(Button)`\n  border: none;\n  background: none;\n\n  :hover {\n    cursor: pointer;\n  }\n`;\n\nconst StyledTooltip = styled.div`\n  font-family: Open Sans, Helvetica Neue, Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 1.4;\n  background-color: #333;\n  color: #fff;\n  border-radius: 4px;\n  opacity: 0.9;\n  padding: 0.2em 0.4em;\n`;\n\nconst SidebarFile: React.FC<{ className?: string; model: Monaco.editor.ITextModel }> = ({ className, model }) => {\n  const activeModel = useActiveModel();\n  const editorManager = useContext(EditorManagerContext);\n  const tooltip = useTooltipState({ gutter: 0 });\n\n  const onClickDelete = () => {\n    model.dispose();\n  };\n\n  return (\n    <Entry className={className} modelFocused={model === activeModel}>\n      <span onClick={() => editorManager.focusModel(model)}>{model.uri.fsPath.slice(1)}</span>\n      <TooltipReference {...tooltip} as={SidebarFileDelete} onClick={() => onClickDelete()}>\n        <span role=\"img\" aria-label=\"Delete file\">\n          ❌\n        </span>\n      </TooltipReference>\n      <Tooltip {...tooltip} as={StyledTooltip}>\n        Delete file\n      </Tooltip>\n    </Entry>\n  );\n};\n\nconst Sidebar: React.FC<{ className?: string }> = props => {\n  const rootDir = useRef(Monaco.Uri.file('/'));\n  const entries = useDirectory(rootDir.current);\n  const editorManager = useContext(EditorManagerContext);\n\n  const onClickCreate = () => {\n    const filename = prompt('Filename?');\n\n    if (filename) {\n      editorManager.createModel(filename);\n    }\n  };\n\n  return (\n    <div className={props.className}>\n      {entries.map(entry =>\n        entry.type === EntryKind.Directory ? (\n          <div>{entry.uri.fsPath.slice(1)}</div>\n        ) : (\n          <SidebarFile key={entry.uri.toString(true)} model={entry.model}></SidebarFile>\n        )\n      )}\n      <CreateEntry onClick={() => onClickCreate()}>Create...</CreateEntry>\n    </div>\n  );\n};\n\nexport default styled(Sidebar)`\n  display: flex;\n  flex-direction: column;\n`;\n", "id": "velcro:packages/playground/src/playground/Sidebar.tsx:e00cb151-b919-4fe9-91db-aa82f92ea885"}
{"path": "test/transformer/descriptor/utils/object/object.ts", "project_name": "ts-auto-mock", "text": "// eslint-disable-next-line @typescript-eslint/typedef\nexport const anImportedObject = { a: 'hello world', b: 123 };\n", "id": "ts-auto-mock:test/transformer/descriptor/utils/object/object.ts:b6fc4816-b726-48f6-9fb3-5106b4dad604"}
{"path": "src/ui/src/app/job/job-container-create/job-container-create.component.ts", "project_name": "board", "text": "import { Component, Input, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { JobContainer, JobImage, JobImageDetailInfo, JobImageInfo } from '../job.type';\nimport { CsModalChildBase } from '../../shared/cs-modal-base/cs-modal-child-base';\nimport { JobService } from '../job.service';\nimport { MessageService } from '../../shared.service/message.service';\n\n@Component({\n  selector: 'app-job-container-create',\n  templateUrl: './job-container-create.component.html',\n  styleUrls: ['./job-container-create.component.css']\n})\nexport class JobContainerCreateComponent extends CsModalChildBase implements OnInit {\n  @Input() containerList: Array<JobContainer>;\n  imageList: Array<JobImageInfo>;\n  imageDetailList: Array<JobImageDetailInfo>;\n  isLoading = false;\n  selectedImageName: string;\n  selectedImageTag: string;\n  createSuccess: Subject<JobContainer>;\n\n  constructor(private jobService: JobService,\n              private messageService: MessageService) {\n    super();\n    this.imageList = Array<JobImageInfo>();\n    this.imageDetailList = Array<JobImageDetailInfo>();\n    this.createSuccess = new Subject();\n  }\n\n  ngOnInit() {\n    this.selectedImageName = '';\n    this.selectedImageTag = '';\n    this.isLoading = true;\n    this.jobService.getImageList().subscribe((res: Array<JobImageInfo>) => {\n      if (res && res.length > 0) {\n        this.imageList = res;\n        this.getImageDetail(this.imageList[0]);\n      }\n    }, () => this.isLoading = false, () => this.isLoading = false);\n  }\n\n  getImageDetail(image: JobImageInfo) {\n    this.isLoading = true;\n    this.selectedImageName = image.imageName;\n    this.selectedImageTag = '';\n    this.jobService.getImageDetailList(image.imageName).subscribe(\n      (res: Array<JobImageDetailInfo>) => {\n        if (res && res.length > 0) {\n          this.imageDetailList = res;\n        }\n      }, () => this.isLoading = false, () => this.isLoading = false);\n  }\n\n  setImageTag(detail: JobImageDetailInfo) {\n    this.selectedImageTag = detail.imageTag;\n  }\n\n  checkImageAndTag(): boolean {\n    return this.containerList.find((jobContainer: JobContainer) =>\n      jobContainer.image.imageTag === this.selectedImageTag &&\n      jobContainer.image.imageName === this.selectedImageName) !== undefined;\n  }\n\n  createNewContainer() {\n    if (this.selectedImageName === '' || this.selectedImageTag === '') {\n      this.messageService.showAlert('JOB.JOB_CREATE_SELECT_IMAGE_TIP', {alertType: 'warning', view: this.alertView});\n    } else if (this.checkImageAndTag()) {\n      this.messageService.showAlert('JOB.JOB_CREATE_SELECT_IMAGE_EXISTS', {alertType: 'warning', view: this.alertView});\n    } else {\n      const container = new JobContainer();\n      const jobImage = new JobImage();\n      jobImage.imageName = this.selectedImageName;\n      jobImage.imageTag = this.selectedImageTag;\n      container.image = jobImage;\n      this.createSuccess.next(container);\n      this.modalOpened = false;\n    }\n  }\n}\n", "id": "board:src/ui/src/app/job/job-container-create/job-container-create.component.ts:76bf4ebc-ae3d-4227-89bf-43b99471beab"}
{"path": "durablefunctionsmonitor.react/src/services/VsCodeBackendClient.ts", "project_name": "DurableFunctionsMonitor", "text": "import { Method } from 'axios';\nimport { IBackendClient } from './IBackendClient';\n\n// Defines handlers for messages being sent by VsCode extension\nexport type VsCodeCustomMessageHandlers = {\n    purgeHistory: (data: any) => void;\n    cleanEntityStorage: (data: any) => void;\n    startNewInstance: (data: any) => void;\n};\n\n// IBackendClient implementation for VsCode extension, forwards HTTP requests to VsCode\nexport class VsCodeBackendClient implements IBackendClient {\n\n    get isVsCode(): boolean { return true; }\n\n    get routePrefixAndTaskHubName(): string { return null; }\n\n    constructor(private _vsCodeApi: any) {\n\n        // Handling responses from VsCode\n        window.addEventListener('message', event => {\n\n            const message = event.data;\n\n            // handling menu commands\n            if (!!this._handlers && (!!this._handlers[message.id])) {\n\n                try {\n                    this._handlers[message.id](message.data);\n                } catch(err) {\n                    console.log('Failed to handle response from VsCode: ' + err);\n                }\n\n                return;\n            }\n\n            // handling HTTP responses\n            const requestPromise = this._requests[message.id];\n            if (!requestPromise) {\n                return;\n            }\n\n            if (!!message.err) {\n                requestPromise.reject(message.err);\n            } else {\n                requestPromise.resolve(message.data);\n            }\n\n            delete this._requests[message.id];\n        });\n    }\n\n    call(method: Method | 'OpenInNewWindow', url: string, data?: any): Promise<any> {\n\n        const requestId = Math.random().toString();\n\n        // Sending request to VsCode\n        this._vsCodeApi.postMessage({ id: requestId, method, url, data });\n\n        return new Promise<any>((resolve, reject) => {\n            this._requests[requestId] = { resolve, reject };\n        });\n    }\n\n    showDetails(instanceId: string) {\n        this.call('OpenInNewWindow', instanceId);\n    }\n\n    setCustomHandlers(handlers: VsCodeCustomMessageHandlers) {\n\n        this._handlers = handlers;\n\n        // Notifying VsCode that we're ready to process messages\n        // Cannot do this in ctor, because VsCodeBackendClient and PurgeHistoryDialogState depend on each other\n        this._vsCodeApi.postMessage({ method: 'IAmReady' });\n    }\n\n    private _handlers: VsCodeCustomMessageHandlers;\n\n    private _requests: {\n        [id: string]: {\n            resolve: (value?: any) => void,\n            reject: (reason?: any) => void\n        }\n    } = {};\n}", "id": "DurableFunctionsMonitor:durablefunctionsmonitor.react/src/services/VsCodeBackendClient.ts:40c7931e-55d5-47a3-a639-1796b1acd393"}
{"path": "apps/gauzy/src/app/@core/utils/selector.service.ts", "project_name": "gauzy", "text": "import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class SelectorService {\n\t/**\n\t * Returns boolean values of selectors\n\t * Used to decide whether or not to show organization, employees etc\n\t * in the header and organization shortcuts in the sidebar\n\t * @param url Usually the current url\n\t */\n\tpublic showSelectors(\n\t\turl: string\n\t): {\n\t\tshowEmployeesSelector: boolean;\n\t\tshowDateSelector: boolean;\n\t\tshowOrganizationsSelector: boolean;\n\t\tshowOrganizationShortcuts: boolean;\n\t} {\n\t\tlet showEmployeesSelector = true;\n\t\tlet showDateSelector = true;\n\t\tlet showOrganizationsSelector = true;\n\t\tlet showOrganizationShortcuts = true;\n\n\t\tif (url.endsWith('/employees')) {\n\t\t\tshowEmployeesSelector = false;\n\t\t\tshowDateSelector = false;\n\t\t}\n\n\t\tconst profileRegex = RegExp('/pages/employees/edit/.*/profile', 'i');\n\t\tconst organizationRegex = RegExp(\n\t\t\t'/pages/organizations/edit/.*/settings',\n\t\t\t'i'\n\t\t);\n\n\t\tif (profileRegex.test(url)) {\n\t\t\tshowEmployeesSelector = false;\n\t\t\tshowDateSelector = false;\n\t\t\tshowOrganizationsSelector = false;\n\t\t\tshowOrganizationShortcuts = false;\n\t\t}\n\n\t\tif (organizationRegex.test(url)) {\n\t\t\tshowEmployeesSelector = false;\n\t\t\tshowDateSelector = false;\n\t\t\tshowOrganizationsSelector = false;\n\t\t\tshowOrganizationShortcuts = true;\n\t\t}\n\n\t\tif (url.endsWith('/pages/auth/profile')) {\n\t\t\tshowEmployeesSelector = false;\n\t\t\tshowDateSelector = false;\n\t\t\tshowOrganizationsSelector = false;\n\t\t\tshowOrganizationShortcuts = false;\n\t\t}\n\n\t\tif (url.endsWith('/organizations')) {\n\t\t\tshowEmployeesSelector = false;\n\t\t\tshowDateSelector = false;\n\t\t\tshowOrganizationsSelector = false;\n\t\t\tshowOrganizationShortcuts = false;\n\t\t}\n\n\t\tconst organizationEditRegex = RegExp(\n\t\t\t'/pages/organizations/edit/[A-Za-z0-9-]+$',\n\t\t\t'i'\n\t\t);\n\n\t\tif (organizationEditRegex.test(url)) {\n\t\t\tshowEmployeesSelector = false;\n\t\t\tshowDateSelector = true;\n\t\t\tshowOrganizationsSelector = true;\n\t\t\tshowOrganizationShortcuts = true;\n\t\t}\n\n\t\treturn {\n\t\t\tshowEmployeesSelector,\n\t\t\tshowDateSelector,\n\t\t\tshowOrganizationsSelector,\n\t\t\tshowOrganizationShortcuts\n\t\t};\n\t}\n}\n", "id": "gauzy:apps/gauzy/src/app/@core/utils/selector.service.ts:e6ed1521-b2fb-489b-a3cd-71ceba456b46"}
{"path": "src/app/views/dashboard/games/manage/game/packages/add/add.route.ts", "project_name": "gamejolt", "text": "import { RouteConfig } from 'vue-router';\n\nexport const routeDashGamesManageGamePackagesAdd: RouteConfig = {\n\tname: 'dash.games.manage.game.packages.add',\n\tpath: 'packages/add',\n\tcomponent: () =>\n\t\timport(/* webpackChunkName: \"routeDashGamesManageGamePackagesAdd\" */ './add.vue'),\n};\n", "id": "gamejolt:src/app/views/dashboard/games/manage/game/packages/add/add.route.ts:6f414977-3a46-49c3-a426-c5ea8b769371"}
{"path": "src/cli/analyze/parseFile.ts", "project_name": "lightwindcss", "text": "import { parse } from \"@babel/parser\";\nimport traverse from \"@babel/traverse\";\nimport * as types from \"@babel/types\";\nimport { readFile } from \"fs/promises\";\nimport { findCssReferences } from \"../../ast/findCssReferences\";\nimport { AnalyzeContext } from \"./context\";\nimport { analyzeReference } from \"./references\";\n\nexport async function parseFile(filePath: string, context: AnalyzeContext) {\n  const parsed = parse(await readFile(filePath, \"utf8\"), {\n    strictMode: true,\n    sourceType: \"module\",\n    plugins: [\"jsx\", \"typescript\"],\n  });\n\n  traverse(parsed, {\n    ImportDeclaration(path) {\n      const references = findCssReferences(path, types);\n      for (const ref of references) {\n        analyzeReference(ref, context);\n      }\n    },\n  });\n}\n", "id": "lightwindcss:src/cli/analyze/parseFile.ts:cbd673b2-2d8c-4743-911e-726accc31af8"}
{"path": "libs/auth-nest-tools/src/index.ts", "project_name": "island.is", "text": "export * from './lib/auth.module'\nexport * from './lib/jwt.strategy'\nexport * from './lib/scopes.decorator'\nexport * from './lib/current-user.decorator'\nexport * from './lib/current-auth.decorator'\nexport * from './lib/current-actor.decorator'\nexport * from './lib/scopes.guard'\nexport * from './lib/ids-auth.guard'\nexport * from './lib/ids-user.guard'\nexport * from './lib/mock-auth.guard'\nexport * from './lib/user'\nexport * from './lib/auth'\nexport * from './lib/auth.middleware'\nexport * from './lib/bypass-auth.decorator'\nexport type { GraphQLContext } from './lib/graphql.context'\nexport { getRequest } from './lib/getRequest'\n", "id": "island.is:libs/auth-nest-tools/src/index.ts:1c76e626-6c30-4291-b8ef-240817be7d50"}
{"path": "src/util.ts", "project_name": "libreact", "text": "import * as React from 'react';\n\nexport type TComponent<TProps> = React.ComponentClass<TProps> | React.StatelessComponent<TProps>;\nexport type THoc<P1, P2> = (Comp: TComponent<P1>) => TComponent<P2>\n\nexport const noop: (...args) => any = () => {};\n\nexport const idx = (obj, accessor) => {\n  try {\n    return accessor(obj);\n  } catch (error) {\n    return undefined;\n  }\n};\n\nexport const isClient = typeof window === 'object';\n\nexport const on = (obj, ...args) => obj.addEventListener(...args);\n\nexport const off = (obj, ...args) => obj.removeEventListener(...args);\n\nexport const ns = (name) => `@@libreact/${name}`;\n\nconst hasSymbols = typeof Symbol !== 'undefined';\n\nexport const sym = (name) => {\n  return hasSymbols ? Symbol(name) : ns(name);\n};\n\nexport const isFn = (fn) => typeof fn === 'function';\n\nexport const h = React.createElement;\n", "id": "libreact:src/util.ts:2bcd0987-43f6-4a56-8307-ad101dc90391"}
{"path": "src/@stbui/core/auth.service.ts", "project_name": "Smart-Analysis", "text": "import { Injectable } from \"@angular/core\";\nimport { Observable, of } from \"rxjs\";\nimport { switchMap, startWith, tap, filter } from \"rxjs/operators\";\n\nimport { NotifyService } from \"./notify.service\";\n\ninterface User {\n  uid: string;\n  email?: string | null;\n  photoURL?: string;\n  displayName?: string;\n}\n\n@Injectable()\nexport class AuthService {\n  user: Observable<User | null>;\n\n  constructor(private notify: NotifyService) { }\n\n  githubLogin() {\n    return Promise.reject();\n  }\n\n  googleLogin() {\n    return Promise.reject();\n  }\n\n  twitterLogin() {\n    return Promise.reject();\n  }\n\n  facebookLogin() {\n    return Promise.reject();\n  }\n\n  /**\n   * 匿名登陆\n   */\n  anonymousLogin() {\n    return Promise.reject();\n  }\n\n  /**\n   * 邮箱登陆\n   * @param email\n   * @param password\n   */\n  emailLogin(email: string, password: string) {\n    return Promise.reject();\n  }\n\n  /**\n   * 邮箱注册\n   * @param email 邮箱\n   * @param password 密码\n   */\n  emailSignUp(email: string, password: string) {\n    return Promise.reject();\n  }\n\n  /**\n   * 重置密码\n   * @param email 邮箱\n   */\n  resetPassword(email: string) {\n    return Promise.reject();\n  }\n\n  /**\n   * 退出登录\n   */\n  signOut() {\n    return Promise.reject();\n  }\n\n  private oAuthLogin(provider: any) { }\n\n  private updateUserData(user: User) { }\n\n  private handleError(error: Error) { }\n}\n", "id": "Smart-Analysis:src/@stbui/core/auth.service.ts:9756209e-effa-4b08-a906-0335d0f9e988"}
{"path": "samples/react-at-a-glance/src/interfaces/IArticle.ts", "project_name": "sp-dev-fx-webparts", "text": "export interface IArticle {\n    title?: string;\n    link?: string;\n    imageUrl?: string;\n    content?: string;\n}", "id": "sp-dev-fx-webparts:samples/react-at-a-glance/src/interfaces/IArticle.ts:abdee9ca-1e95-465c-92e8-4307ce48335e"}
{"path": "theatre/core/src/projects/store/types/SheetState_Historic.ts", "project_name": "theatre", "text": "import type {KeyframeId, SequenceTrackId} from '@theatre/shared/utils/ids'\nimport type {SerializableMap, StrictRecord} from '@theatre/shared/utils/types'\n\nexport interface SheetState_Historic {\n  /**\n   * @remarks\n   * Notes for when we implement FSMs:\n   *\n   * Each FSM state will have overrides of its own. Since a state could be a descendant\n   * of another state, it will be able to inherit the overrides from ancestor states.\n   */\n  staticOverrides: {\n    byObject: StrictRecord<string, SerializableMap>\n  }\n  sequence?: Sequence\n}\n\ntype Sequence = PositionalSequence\n\ntype PositionalSequence = {\n  type: 'PositionalSequence'\n  length: number\n  /**\n   * If set to, say, 30, then the keyframe editor will try to snap all keyframes\n   * to a 30fps grid\n   */\n  subUnitsPerUnit: number\n\n  tracksByObject: StrictRecord<\n    string,\n    {\n      trackIdByPropPath: StrictRecord<string, SequenceTrackId>\n      trackData: StrictRecord<SequenceTrackId, TrackData>\n    }\n  >\n}\n\nexport type TrackData = BasicKeyframedTrack\n\nexport type Keyframe = {\n  id: KeyframeId\n  value: unknown\n  position: number\n  handles: [leftX: number, leftY: number, rightX: number, rightY: number]\n  connectedRight: boolean\n}\n\nexport type BasicKeyframedTrack = {\n  type: 'BasicKeyframedTrack'\n  keyframes: Keyframe[]\n}\n", "id": "theatre:theatre/core/src/projects/store/types/SheetState_Historic.ts:4e41d7eb-628d-4d04-9a73-777250a12ac4"}
{"path": "packages/ngx-infinitegrid/stories/5-DataLoading/2-Placeholder.stories.ts", "project_name": "egjs-infinitegrid", "text": "import { AppComponent } from './apps/NgxPlaceholderApp/app.component';\n\nexport const PlaceholderTemplate = (props: any) => ({\n  component: AppComponent,\n  props: {\n    ...props,\n    key: JSON.stringify(props),\n  },\n});\nPlaceholderTemplate.storyName = \"Placeholder\";\n", "id": "egjs-infinitegrid:packages/ngx-infinitegrid/stories/5-DataLoading/2-Placeholder.stories.ts:4f3ba198-f8f3-4c05-ac80-bf13b1253964"}
{"path": "src/extensions/uv-seadragon-extension/ISeadragonExtensionData.ts", "project_name": "universalviewer", "text": "import {IUVData} from \"../../IUVData\";\n\nexport interface ISeadragonExtensionData extends IUVData {\n    highlight: string | null;\n    rotation: number | null;\n    xywh: string | null;\n}", "id": "universalviewer:src/extensions/uv-seadragon-extension/ISeadragonExtensionData.ts:dbe17c90-c20e-4739-8574-a0cfffc594be"}
{"path": "types/exit/exit-tests.ts", "project_name": "DefinitelyTyped", "text": "import exit = require('exit');\n\nexit(42);\nexit(42, [process.stdout, process.stderr]);\n", "id": "DefinitelyTyped:types/exit/exit-tests.ts:04288947-c236-445b-92ce-9b72eefaaa9a"}
{"path": "dialogflow-messenger/src/rich-content/Text.tsx", "project_name": "dialogflow-integrations", "text": "import {UserMessage, AgentMessage} from \"../Styles\";\nimport {Message} from \"../utilities/types\";\n\nexport const Text = ({message}: {message: Message}) => {\n  const TypedMessage = message.type === 'user' ? UserMessage : AgentMessage;\n\n  return (\n    <TypedMessage>\n      {message.text}\n    </TypedMessage>\n  )\n}\n", "id": "dialogflow-integrations:dialogflow-messenger/src/rich-content/Text.tsx:d873737e-b2f1-4332-88bc-17add7aebee8"}
{"path": "libs/platform/src/lib/table/table-scroll-dispatcher.service.ts", "project_name": "fundamental-ngx", "text": "import { ElementRef, Injectable, InjectionToken, OnDestroy } from '@angular/core';\nimport { Observable, Subject, Subscription } from 'rxjs';\n\nexport interface TableScrollable {\n    /** Returns observable that emits when a scroll event is fired on the host element. */\n    getScrollStream(): Observable<Event>;\n\n    /** Returns observable that emits when a vertical scroll event is happened on the host element. */\n    getVerticalScrollStream(): Observable<Event>;\n\n    /** Returns observable that emits when a horizontal scroll event is happened on the host element. */\n    getHorizontalScrollStream(): Observable<Event>;\n\n    /** Returns scrollTop position of the host element. */\n    getScrollTop(): number;\n\n    /** Returns scrollLeft position of the host element. */\n    getScrollLeft(): number;\n\n    /** Set scrollTop position of the host element. */\n    setScrollTop(scrollTop: number, emitEvent: boolean): void;\n\n    /** Set scrollLeft position of the host element. */\n    setScrollLeft(scrollLeft: number, emitEvent: boolean): void;\n\n    /** Get scrollable ElementRef of. */\n    getElementRef(): ElementRef<HTMLElement>;\n}\n\nexport const TABLE_SCROLLABLE = new InjectionToken<TableScrollable>('Table Scrollable');\n\n@Injectable()\nexport class TableScrollDispatcherService implements OnDestroy {\n    private _scrollSubject: Subject<TableScrollable> = new Subject();\n    private _verticalScrollSubject: Subject<TableScrollable> = new Subject();\n    private _horizontalScrollSubject: Subject<TableScrollable> = new Subject();\n    private _scrollableSubscriptionsMap: Map<TableScrollable, Subscription> = new Map();\n\n    register(scrollable: TableScrollable): void {\n        if (this._scrollableSubscriptionsMap.has(scrollable)) {\n            return;\n        }\n\n        this._scrollableSubscriptionsMap.set(\n            scrollable,\n            new Subscription()\n                .add(scrollable.getScrollStream().subscribe(() => this._scrollSubject.next(scrollable)))\n                .add(\n                    scrollable\n                        .getHorizontalScrollStream()\n                        .subscribe(() => this._horizontalScrollSubject.next(scrollable))\n                )\n                .add(scrollable.getVerticalScrollStream().subscribe(() => this._verticalScrollSubject.next(scrollable)))\n        );\n    }\n\n    deregister(scrollable: TableScrollable): void {\n        if (!this._scrollableSubscriptionsMap.has(scrollable)) {\n            return;\n        }\n\n        this._scrollableSubscriptionsMap.get(scrollable).unsubscribe();\n    }\n\n    /** Scroll stream */\n    scrolled(): Observable<TableScrollable> {\n        return this._scrollSubject.asObservable();\n    }\n\n    /** Horizontal scroll stream */\n    horizontallyScrolled(): Observable<TableScrollable> {\n        return this._horizontalScrollSubject.asObservable();\n    }\n\n    /** Vertical scroll stream */\n    verticallyScrolled(): Observable<TableScrollable> {\n        return this._verticalScrollSubject.asObservable();\n    }\n\n    /** @hidden */\n    ngOnDestroy(): void {\n        Array.from(this._scrollableSubscriptionsMap.values()).forEach((subscription) => subscription.unsubscribe());\n\n        this._scrollableSubscriptionsMap.clear();\n    }\n}\n", "id": "fundamental-ngx:libs/platform/src/lib/table/table-scroll-dispatcher.service.ts:7b720561-98f6-4b04-98ab-fc0f11a61944"}
{"path": "src/tslint/eofline/test.ts", "project_name": "tslint-config-prettier", "text": "console.log(\"no-eof\");", "id": "tslint-config-prettier:src/tslint/eofline/test.ts:5eb3582b-b18e-4b44-9af4-b4e17da7d604"}
{"path": "packages/query-graphql/__tests__/types/update-one-input.type.spec.ts", "project_name": "nestjs-query", "text": "// eslint-disable-next-line max-classes-per-file\nimport { plainToClass } from 'class-transformer';\nimport { validateSync, MinLength } from 'class-validator';\nimport { InputType, Resolver, Args, Field, Query, Int, ID, ObjectType } from '@nestjs/graphql';\nimport { IDField, UpdateOneInputType } from '../../src';\nimport { generateSchema } from '../__fixtures__';\n\ndescribe('UpdateOneInputType', (): void => {\n  @ObjectType()\n  class FakeDTO {\n    @Field(() => ID)\n    id!: string;\n  }\n\n  @InputType()\n  class FakeUpdateOneType {\n    @Field()\n    @MinLength(5)\n    name!: string;\n  }\n\n  @InputType()\n  class UpdateOne extends UpdateOneInputType(FakeDTO, FakeUpdateOneType) {}\n\n  it('should create an input type with the id and update type as fields', async () => {\n    @Resolver()\n    class UpdateOneInputTypeSpec {\n      @Query(() => Int)\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      updateTest(@Args('input') input: UpdateOne): number {\n        return 1;\n      }\n    }\n    const schema = await generateSchema([UpdateOneInputTypeSpec]);\n    expect(schema).toMatchSnapshot();\n  });\n\n  it('should create an input type with a custom id and update type as fields', async () => {\n    @ObjectType()\n    class FakeIDDTO {\n      @IDField(() => String)\n      id!: string;\n    }\n\n    @InputType()\n    class UpdateOneCustomId extends UpdateOneInputType(FakeIDDTO, FakeUpdateOneType) {}\n\n    @Resolver()\n    class UpdateOneCustomIdInputTypeSpec {\n      @Query(() => Int)\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      updateTest(@Args('input') input: UpdateOneCustomId): number {\n        return 1;\n      }\n    }\n    const schema = await generateSchema([UpdateOneCustomIdInputTypeSpec]);\n    expect(schema).toMatchSnapshot();\n  });\n\n  describe('validation', () => {\n    it('should validate id is defined is not empty', () => {\n      const Type = UpdateOneInputType(FakeDTO, FakeUpdateOneType);\n      const input = { update: { name: '<NAME>' } };\n      const it = plainToClass(Type, input);\n      const errors = validateSync(it);\n      expect(errors).toEqual([\n        {\n          children: [],\n          constraints: {\n            isNotEmpty: 'id should not be empty',\n          },\n          property: 'id',\n          target: input,\n        },\n      ]);\n    });\n\n    it('should validate id is not empty is defined is not empty', () => {\n      const Type = UpdateOneInputType(FakeDTO, FakeUpdateOneType);\n      const input = { id: '', update: { name: 'hello world' } };\n      const it = plainToClass(Type, input);\n      const errors = validateSync(it);\n      expect(errors).toEqual([\n        {\n          children: [],\n          constraints: {\n            isNotEmpty: 'id should not be empty',\n          },\n          property: 'id',\n          target: input,\n          value: input.id,\n        },\n      ]);\n    });\n\n    it('should validate the update input', () => {\n      const Type = UpdateOneInputType(FakeDTO, FakeUpdateOneType);\n      const input = { id: 'id-1', update: {} };\n      const it = plainToClass(Type, input);\n      const errors = validateSync(it);\n      expect(errors).toEqual([\n        {\n          children: [\n            {\n              children: [],\n              constraints: {\n                minLength: 'name must be longer than or equal to 5 characters',\n              },\n              property: 'name',\n              target: {},\n            },\n          ],\n          property: 'update',\n          target: it,\n          value: it.update,\n        },\n      ]);\n    });\n  });\n});\n", "id": "nestjs-query:packages/query-graphql/__tests__/types/update-one-input.type.spec.ts:776a426e-d1f5-41f4-8fb9-b0463353d4db"}
{"path": "packages/core/src/sink/SafeSink.ts", "project_name": "core", "text": "/** @license MIT License (c) copyright 2010-2016 original author or authors */\n/** @author <NAME> */\n/** @author <NAME> */\nimport { Sink, Time } from '@most/types'\n\nexport default class SafeSink<A> implements Sink<A> {\n  private readonly sink: Sink<A>\n  private active: boolean;\n\n  constructor(sink: Sink<A>) {\n    this.sink = sink\n    this.active = true\n  }\n\n  event(t: Time, x: A): void {\n    if (!this.active) {\n      return\n    }\n    this.sink.event(t, x)\n  }\n\n  end(t: Time): void{\n    if (!this.active) {\n      return\n    }\n    this.disable()\n    this.sink.end(t)\n  }\n\n  error(t: Time, e: Error): void{\n    this.disable()\n    this.sink.error(t, e)\n  }\n\n  disable(): Sink<A> {\n    this.active = false\n    return this.sink\n  }\n}\n", "id": "core:packages/core/src/sink/SafeSink.ts:a8b79b01-f85b-4b7a-b3a8-2ae60c9fdfa3"}
{"path": "indexer/scripts/buildData.ts", "project_name": "marketplace", "text": "import * as https from 'https'\nimport * as url from 'url'\nimport * as fs from 'fs'\nimport * as path from 'path'\n\nenum Network {\n  MAINNET = 'mainnet',\n  ROPSTEN = 'ropsten'\n}\nenum ContractName {\n  MANAToken = 'MANAToken',\n  ERC721Bid = 'ERC721Bid',\n  LANDProxy = 'LANDProxy',\n  EstateProxy = 'EstateProxy',\n  MarketplaceProxy = 'MarketplaceProxy',\n  DCLRegistrar = 'DCLRegistrar'\n}\ntype ContractsResponse = Record<Network, Record<ContractName, string>>\n\nconst startBlockByNetwork: Record<Network, Record<ContractName, number>> = {\n  [Network.MAINNET]: {\n    MANAToken: 4162050,\n    ERC721Bid: 7270906,\n    LANDProxy: 4944642,\n    EstateProxy: 6236547,\n    MarketplaceProxy: 6496012,\n    DCLRegistrar: 9412979\n  },\n  [Network.ROPSTEN]: {\n    MANAToken: 1891200,\n    ERC721Bid: 5058246,\n    LANDProxy: 2482847,\n    EstateProxy: 3890399,\n    MarketplaceProxy: 4202120,\n    DCLRegistrar: 7170497\n  }\n}\n\nconst contractNameToProxy: Record<string, ContractName> = {\n  MANAToken: ContractName.MANAToken,\n  LANDRegistry: ContractName.LANDProxy,\n  EstateRegistry: ContractName.EstateProxy,\n  Marketplace: ContractName.MarketplaceProxy\n}\n\n// TODO: Handle ctrl+C\nasync function build() {\n  const network = getNetwork()\n  const basePath = path.resolve(__dirname, '../')\n\n  const ethereum = new Ethereum(network)\n  await ethereum.fetchContracts()\n\n  const template = new TemplateFile(ethereum)\n\n  await Promise.all([\n    template.write(\n      `${basePath}/src/data/.addresses.ts`,\n      `${basePath}/src/data/addresses.ts`\n    ),\n    template.write(`${basePath}/.subgraph.yaml`, `${basePath}/subgraph.yaml`)\n  ])\n}\n\n// ------------------------------------------------------------------\n// Parser -----------------------------------------------------------\n\nclass TemplateFile {\n  constructor(public ethereum: Ethereum) {}\n\n  async write(src: string, destination: string) {\n    const contents = await readFile(src)\n\n    try {\n      const newContents = new Parser(contents, this.ethereum).parse()\n\n      await writeFile(destination, newContents)\n    } catch (error) {\n      await deleteFile(destination)\n      throw error\n    }\n  }\n}\n\nclass Ethereum {\n  network: Network\n\n  contractAddresses: Record<ContractName, string>\n  startBlocks: Record<ContractName, number>\n\n  constructor(network: Network) {\n    this.network = network\n    this.startBlocks = startBlockByNetwork[network]\n  }\n\n  async fetchContracts() {\n    const contractsByNetwork: ContractsResponse = await fetch(\n      'https://contracts.decentraland.org/addresses.json'\n    )\n    this.contractAddresses = contractsByNetwork[this.network]\n  }\n\n  getAddress(contractName: string) {\n    return (\n      this.contractAddresses[this.getProxyContractName(contractName)] ||\n      this.getDefaultAddress()\n    )\n  }\n\n  getStartBlock(contractName: string) {\n    return (\n      this.startBlocks[this.getProxyContractName(contractName)] ||\n      this.getDefaultStartBlock()\n    )\n  }\n\n  private getProxyContractName(contractName: string) {\n    return contractNameToProxy[contractName] || contractName\n  }\n\n  private getDefaultAddress() {\n    return '0x0000000000000000000000000000000000000000'\n  }\n\n  private getDefaultStartBlock() {\n    return 0\n  }\n}\n\nclass Parser {\n  constructor(public text: string, public ethereum: Ethereum) {}\n\n  parse() {\n    let newText = this.replaceNetworks(this.text)\n    newText = this.replaceAddresses(newText)\n    newText = this.replaceStartBlocks(newText)\n    return newText\n  }\n\n  replaceAddresses(text = this.text) {\n    for (const placeholder of this.getPlaceholders('address')) {\n      const contractName = this.getPlaceholderValue(placeholder)\n      const address = this.ethereum.getAddress(contractName)\n      text = text.replace(placeholder, address)\n    }\n    return text\n  }\n\n  replaceStartBlocks(text = this.text) {\n    for (const placeholder of this.getPlaceholders('startBlock')) {\n      const contractName = this.getPlaceholderValue(placeholder)\n      const startBlock = this.ethereum.getStartBlock(contractName)\n      text = text.replace(placeholder, startBlock.toString())\n    }\n    return text\n  }\n\n  replaceNetworks(text = this.text) {\n    return text.replace(/{{network}}/g, this.ethereum.network)\n  }\n\n  getPlaceholders(name: string, text = this.text) {\n    const regexp = new RegExp(`{{${name}\\:[a-zA-Z0-9]+}}`, 'g')\n    return text.match(regexp) || []\n  }\n\n  getPlaceholderValue(placeholder: string) {\n    // Example: {{operator:value}}\n    const [_, value] = placeholder.replace(/{|}/g, '').split(':')\n    return value\n  }\n}\n\n// ------------------------------------------------------------------\n// HTTPS ------------------------------------------------------------\n\nasync function fetch(uri: string, method = 'GET'): Promise<any> {\n  const { protocol, hostname, path } = url.parse(uri)\n\n  if (protocol !== 'https:') {\n    throw new Error('Only https is supported')\n  }\n\n  const options = {\n    hostname,\n    method,\n    port: 443,\n    path\n  }\n  return new Promise(function(resolve, reject) {\n    const req = https.request(options, function(res) {\n      if (res.statusCode < 200 || res.statusCode >= 300) {\n        return reject(new Error(`Invalid request: ${res.statusCode}`))\n      }\n\n      let body = []\n      res.on('data', chunk => body.push(chunk))\n\n      res.on('end', () => {\n        try {\n          body = JSON.parse(Buffer.concat(body).toString())\n          resolve(body)\n        } catch (e) {\n          reject(e)\n        }\n      })\n    })\n\n    req.on('error', err => reject(err))\n    req.end()\n  })\n}\n\n// ------------------------------------------------------------------\n// File -------------------------------------------------------------\n\nasync function readFile(path: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, 'utf-8', (err, data) =>\n      err ? reject(err) : resolve(data)\n    )\n  })\n}\n\nasync function deleteFile(path: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (!fs.existsSync(path)) {\n      resolve()\n    }\n    fs.unlink(path, err => (err ? reject(err) : resolve()))\n  })\n}\n\nasync function writeFile(path: string, data: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(path, data, 'utf-8', err => (err ? reject(err) : resolve()))\n  })\n}\n\n// ------------------------------------------------------------------\n// Args -------------------------------------------------------------\n\nfunction getNetwork() {\n  let network: Network = process.env.ETHEREUM_NETWORK as Network\n\n  if (!network) {\n    for (let i = 0; i < process.argv.length; i++) {\n      if (process.argv[i] === '--network') {\n        network = process.argv[i + 1] as Network\n        break\n      }\n    }\n  }\n\n  if (!network || !Object.values(Network).includes(network)) {\n    throw new Error(\n      \"Supply a valid network using --network. Use `npm run build -- --network mainnet` if you're using npm\"\n    )\n  }\n  return network\n}\n\nbuild().then(() => console.log('All done'))\n", "id": "marketplace:indexer/scripts/buildData.ts:bc4ab944-d2ca-4ab5-90e5-0e0dc5a915df"}
{"path": "src/components/macros/sensors.tsx", "project_name": "thorium", "text": "import React from \"react\";\nimport {FormGroup, Label, Input} from \"helpers/reactstrap\";\nimport {MacroConfigProps} from \"helpers/genericTypes\";\n\nconst SensorScanResult: React.FC<MacroConfigProps> = ({updateArgs, args}) => {\n  return (\n    <FormGroup className=\"macro-template\">\n      <Label>\n        Domain\n        <Input\n          type=\"select\"\n          defaultValue={args.domain || \"external\"}\n          onChange={e => updateArgs(\"domain\", e.target.value)}\n        >\n          <option value=\"external\">External</option>\n          <option value=\"internal\">Internal</option>\n        </Input>\n      </Label>\n      <Label>\n        Results\n        <Input\n          type=\"textarea\"\n          defaultValue={args.result || \"\"}\n          onChange={e => updateArgs(\"result\", e.target.value)}\n        />\n      </Label>\n    </FormGroup>\n  );\n};\n\nexport const sensorScanResult = SensorScanResult;\n", "id": "thorium:src/components/macros/sensors.tsx:c2814aa5-fb48-40fd-a864-690f1dbb262d"}
{"path": "index.ts", "project_name": "react-native-anchor-point", "text": "import type { TransformsStyle } from \"react-native\";\n\nexport interface Point {\n    x: number;\n    y: number;\n}\n\nexport interface Size {\n    width: number;\n    height: number;\n}\n\nconst isValidSize = (size: Size): boolean => {\n    return size && size.width > 0 && size.height > 0;\n}; \n\nconst defaultAnchorPoint = { x: 0.5, y: 0.5 };\n\nexport const withAnchorPoint = (transform: TransformsStyle, anchorPoint: Point, size: Size) => {\n    if(!isValidSize(size)) {\n        return transform;\n    }\n\n    let injectedTransform = transform.transform;\n    if (!injectedTransform) {\n        return transform;\n    }\n\n    if (anchorPoint.x !== defaultAnchorPoint.x && size.width) {\n        const shiftTranslateX = [];\n\n        // shift before rotation\n        shiftTranslateX.push({\n            translateX: size.width * (anchorPoint.x - defaultAnchorPoint.x),\n        });\n        injectedTransform = [...shiftTranslateX, ...injectedTransform];\n        // shift after rotation\n        injectedTransform.push({\n            translateX: size.width * (defaultAnchorPoint.x - anchorPoint.x),\n        });\n    }\n\n    if (!Array.isArray(injectedTransform)) {\n        return { transform: injectedTransform };\n    }\n\n    if (anchorPoint.y !== defaultAnchorPoint.y && size.height) {\n        let shiftTranslateY = [];\n        // shift before rotation\n        shiftTranslateY.push({\n            translateY: size.height * (anchorPoint.y - defaultAnchorPoint.y),\n        });\n        injectedTransform = [...shiftTranslateY, ...injectedTransform];\n        // shift after rotation\n        injectedTransform.push({\n            translateY: size.height * (defaultAnchorPoint.y - anchorPoint.y),\n        });\n    }\n\n    return { transform: injectedTransform };\n};\n", "id": "react-native-anchor-point:index.ts:d452d2f7-dd40-4fbd-ae8b-04b035c31209"}
{"path": "packages/demos/types/SwitchDemo.d.ts", "project_name": "tamagui", "text": "/// <reference types=\"react\" />\nexport default function SwitchDemo(): JSX.Element;\n//# sourceMappingURL=SwitchDemo.d.ts.map", "id": "tamagui:packages/demos/types/SwitchDemo.d.ts:84632beb-fdb8-4512-b5d4-17537100bb0b"}
{"path": "types/carbon__pictograms-react/lib/visual--recognition/index.d.ts", "project_name": "DefinitelyTyped", "text": "import { VisualRecognition } from \"../../\";\n\nexport = VisualRecognition;\n", "id": "DefinitelyTyped:types/carbon__pictograms-react/lib/visual--recognition/index.d.ts:a85c99d6-d239-4401-b010-99a060c2dbb9"}
{"path": "frontend/projects/project/src/app/project/create-project/create-project.component.spec.ts", "project_name": "kraken-master", "text": "import {ComponentFixture, TestBed, waitForAsync} from '@angular/core/testing';\n\nimport {CreateProjectComponent} from './create-project.component';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {activatedRouteSpy, routerSpy} from 'projects/commons/src/lib/mock/router.mock.spec';\nimport {ProjectService} from 'projects/project/src/app/project/project.service';\nimport {projectServiceSpy} from 'projects/project/src/app/project/project.service.spec';\nimport {VendorsModule} from 'projects/vendors/src/lib/vendors.module';\nimport {testProject} from 'projects/project/src/app/project/entities/project.spec';\nimport {of} from 'rxjs';\nimport {applicationInputComponentSpy} from 'projects/project/src/app/project/application-input/application-input.component.spec';\nimport {projectNameInputComponentSpy} from 'projects/project/src/app/project/project-name-input/project-name-input.component.spec';\nimport SpyObj = jasmine.SpyObj;\n\ndescribe('CreateProjectComponent', () => {\n  let component: CreateProjectComponent;\n  let fixture: ComponentFixture<CreateProjectComponent>;\n  let router: SpyObj<Router>;\n  let activatedRoute: SpyObj<ActivatedRoute>;\n  let projectService: SpyObj<ProjectService>;\n\n  beforeEach(waitForAsync(() => {\n    router = routerSpy();\n    activatedRoute = activatedRouteSpy();\n    projectService = projectServiceSpy();\n\n    TestBed.configureTestingModule({\n      declarations: [CreateProjectComponent],\n      imports: [VendorsModule],\n      providers: [\n        {provide: Router, useValue: router},\n        {provide: ActivatedRoute, useValue: activatedRoute},\n        {provide: ProjectService, useValue: projectService},\n      ]\n    })\n      .overrideTemplate(CreateProjectComponent, '')\n      .compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(CreateProjectComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should create', () => {\n    component.applicationId = applicationInputComponentSpy();\n    component.projectName = projectNameInputComponentSpy();\n    component.applicationId.applicationId.setValue('applicationId');\n    component.projectName.projectName.setValue('projectName');\n    projectService.createProject.and.returnValue(of(testProject()));\n    component.create();\n    expect(router.navigate).toHaveBeenCalledWith(['..'], {relativeTo: activatedRoute});\n    expect(projectService.createProject).toHaveBeenCalledWith('projectName', 'applicationId');\n  });\n});\n", "id": "kraken-master:frontend/projects/project/src/app/project/create-project/create-project.component.spec.ts:2ac1635d-481f-4251-b74a-4f84814b6674"}
{"path": "libs/error-analysis/src/lib/ErrorAnalysisDashboard/Controls/Matrix/MatrixArea/StatsAggregator.ts", "project_name": "responsible-ai-widgets", "text": "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  ErrorCohortStats,\n  IErrorAnalysisMatrixNode,\n  MetricCohortStats,\n  Metrics\n} from \"@responsible-ai/core-ui\";\n\n/**\n * Temporary abstract class for cohort statistics.\n */\nexport abstract class BaseStats {\n  public metricName: string;\n  public constructor(metricName: string) {\n    this.metricName = metricName;\n  }\n\n  public abstract updateCohort(value: IErrorAnalysisMatrixNode): void;\n\n  public abstract updateGlobal(value: IErrorAnalysisMatrixNode): void;\n\n  public abstract createCohortStats(): MetricCohortStats;\n}\n\n/**\n * Temporary abstract class for aggregating cohort stats.\n */\nexport abstract class BaseStatsAggregator extends BaseStats {\n  public totalCohortCount = 0;\n  public totalGlobalCount = 0;\n  public existsSelectedCell = false;\n\n  public updateCohort(value: IErrorAnalysisMatrixNode): void {\n    this.updateCohortStats(value);\n    this.updateCohortCount(value.count);\n    this.existsSelectedCell = true;\n  }\n\n  public updateGlobal(value: IErrorAnalysisMatrixNode): void {\n    this.updateGlobalStats(value);\n    this.updateGlobalCount(value.count);\n  }\n\n  protected updateCohortCount(count: number): void {\n    this.totalCohortCount += count;\n  }\n\n  protected updateGlobalCount(count: number): void {\n    this.totalGlobalCount += count;\n  }\n\n  protected abstract updateCohortStats(value: IErrorAnalysisMatrixNode): void;\n\n  protected abstract updateGlobalStats(value: IErrorAnalysisMatrixNode): void;\n}\n\n/**\n * Temporary class for aggregating cohort stats for error rate.\n */\nexport class ErrorRateStatsAggregator extends BaseStatsAggregator {\n  public falseCohortCount = 0;\n  public falseGlobalCount = 0;\n\n  public updateCohortStats(value: IErrorAnalysisMatrixNode): void {\n    if (value.falseCount !== undefined) {\n      this.falseCohortCount += value.falseCount;\n    }\n  }\n\n  public updateGlobalStats(value: IErrorAnalysisMatrixNode): void {\n    if (value.falseCount !== undefined) {\n      this.falseGlobalCount += value.falseCount;\n    }\n  }\n\n  public createCohortStats(): MetricCohortStats {\n    if (this.existsSelectedCell) {\n      const metricValue = (this.falseCohortCount / this.totalCohortCount) * 100;\n      return new ErrorCohortStats(\n        this.falseCohortCount,\n        this.totalCohortCount,\n        this.falseGlobalCount,\n        this.totalGlobalCount,\n        metricValue,\n        this.metricName\n      );\n    }\n    const metricValue = (this.falseGlobalCount / this.totalGlobalCount) * 100;\n    return new ErrorCohortStats(\n      this.falseGlobalCount,\n      this.totalGlobalCount,\n      this.falseGlobalCount,\n      this.totalGlobalCount,\n      metricValue,\n      this.metricName\n    );\n  }\n}\n\n/**\n * Temporary class for aggregating cohort stats for metrics.\n */\nexport class MetricStatsAggregator extends BaseStatsAggregator {\n  public totalCohortError = 0;\n  public totalGlobalError = 0;\n\n  public updateCohortStats(value: IErrorAnalysisMatrixNode): void {\n    if (value.metricValue !== undefined) {\n      this.totalCohortError += value.metricValue * value.count;\n    }\n  }\n\n  public updateGlobalStats(value: IErrorAnalysisMatrixNode): void {\n    if (value.metricValue !== undefined) {\n      this.totalGlobalError += value.metricValue * value.count;\n    }\n  }\n\n  public createCohortStats(): MetricCohortStats {\n    if (this.existsSelectedCell) {\n      const metricValue = this.totalCohortError / this.totalCohortCount;\n      const coverage = (this.totalCohortError / this.totalGlobalError) * 100;\n      return new MetricCohortStats(\n        this.totalCohortCount,\n        this.totalGlobalCount,\n        metricValue,\n        this.metricName,\n        coverage\n      );\n    }\n    const metricValue = this.totalGlobalError / this.totalGlobalCount;\n    const coverage = 100;\n    return new MetricCohortStats(\n      this.totalCohortCount,\n      this.totalGlobalCount,\n      metricValue,\n      this.metricName,\n      coverage\n    );\n  }\n}\n\n/**\n * Temporary class for aggregating cohort stats for precision.\n */\nexport class PrecisionStatsAggregator extends BaseStatsAggregator {\n  public totalCohortError = 0;\n  public totalGlobalError = 0;\n  public tpCohort: number[] = [];\n  public tpGlobal: number[] = [];\n  public fpCohort: number[] = [];\n  public fpGlobal: number[] = [];\n\n  public updateCohortStats(value: IErrorAnalysisMatrixNode): void {\n    if (value.error !== undefined) {\n      this.totalCohortError += value.error;\n      if (this.tpCohort.length === 0) {\n        this.tpCohort = [...value.tp];\n      } else {\n        this.tpCohort = this.tpCohort.map((num, idx) => num + value.tp[idx]);\n      }\n      if (this.fpCohort.length === 0) {\n        this.fpCohort = [...value.fp];\n      } else {\n        this.fpCohort = this.fpCohort.map((num, idx) => num + value.fp[idx]);\n      }\n    }\n  }\n\n  public updateGlobalStats(value: IErrorAnalysisMatrixNode): void {\n    if (value.error !== undefined) {\n      this.totalGlobalError += value.error;\n    }\n    if (this.tpGlobal.length === 0) {\n      this.tpGlobal = [...value.tp];\n    } else {\n      this.tpGlobal = this.tpGlobal.map((num, idx) => num + value.tp[idx]);\n    }\n    if (this.fpGlobal.length === 0) {\n      this.fpGlobal = [...value.fp];\n    } else {\n      this.fpGlobal = this.fpGlobal.map((num, idx) => num + value.fp[idx]);\n    }\n  }\n\n  public createCohortStats(): MetricCohortStats {\n    let metricValue = 0;\n    let coverage = 0;\n    if (this.existsSelectedCell) {\n      metricValue = this.computeMetricValue(this.tpCohort, this.fpCohort);\n      coverage = (this.totalCohortError / this.totalGlobalError) * 100;\n    } else {\n      metricValue = this.computeMetricValue(this.tpGlobal, this.fpGlobal);\n      coverage = 100;\n    }\n    return new MetricCohortStats(\n      this.totalCohortCount,\n      this.totalGlobalCount,\n      metricValue,\n      this.metricName,\n      coverage\n    );\n  }\n\n  private computeMetricValue(tp: number[], fp: number[]) {\n    let metricValue = 0;\n    if (this.metricName === Metrics.PrecisionScore) {\n      if (tp.length === 2) {\n        // For binary case where negative and positive labels exist\n        metricValue = tp[1] / (tp[1] + fp[1]);\n      } else {\n        // For binary case where only positive labels specified\n        metricValue = tp[0] / (tp[0] + fp[0]);\n      }\n    } else if (this.metricName === Metrics.MicroPrecisionScore) {\n      // Take aggregate across all classes\n      const tpSum = tp.reduce((sum, value) => sum + value, 0);\n      const fpSum = fp.reduce((sum, value) => sum + value, 0);\n      metricValue = tpSum / (tpSum + fpSum);\n    } else if (this.metricName === Metrics.MacroPrecisionScore) {\n      // Compute per class and then average\n      const perClassMetrics: number[] = [];\n      tp.map((num, idx) => perClassMetrics.push(num / (num + fp[idx])));\n      metricValue =\n        perClassMetrics.reduce((sum, value) => sum + value, 0) /\n        perClassMetrics.length;\n    }\n    return metricValue;\n  }\n}\n\n/**\n * Temporary class for aggregating cohort stats for recall.\n */\nexport class RecallStatsAggregator extends BaseStatsAggregator {\n  public totalCohortError = 0;\n  public totalGlobalError = 0;\n  public tpCohort: number[] = [];\n  public tpGlobal: number[] = [];\n  public fnCohort: number[] = [];\n  public fnGlobal: number[] = [];\n\n  public updateCohortStats(value: IErrorAnalysisMatrixNode): void {\n    if (value.error !== undefined) {\n      this.totalCohortError += value.error;\n      if (this.tpCohort.length === 0) {\n        this.tpCohort = [...value.tp];\n      } else {\n        this.tpCohort = this.tpCohort.map((num, idx) => num + value.tp[idx]);\n      }\n      if (this.fnCohort.length === 0) {\n        this.fnCohort = [...value.fn];\n      } else {\n        this.fnCohort = this.fnCohort.map((num, idx) => num + value.fn[idx]);\n      }\n    }\n  }\n\n  public updateGlobalStats(value: IErrorAnalysisMatrixNode): void {\n    if (value.error !== undefined) {\n      this.totalGlobalError += value.error;\n    }\n    if (this.tpGlobal.length === 0) {\n      this.tpGlobal = [...value.tp];\n    } else {\n      this.tpGlobal = this.tpGlobal.map((num, idx) => num + value.tp[idx]);\n    }\n    if (this.fnGlobal.length === 0) {\n      this.fnGlobal = [...value.fn];\n    } else {\n      this.fnGlobal = this.fnGlobal.map((num, idx) => num + value.fn[idx]);\n    }\n  }\n\n  public createCohortStats(): MetricCohortStats {\n    let metricValue = 0;\n    let coverage = 0;\n    if (this.existsSelectedCell) {\n      metricValue = this.computeMetricValue(this.tpCohort, this.fnCohort);\n      coverage = (this.totalCohortError / this.totalGlobalError) * 100;\n    } else {\n      metricValue = this.computeMetricValue(this.tpGlobal, this.fnGlobal);\n      coverage = 100;\n    }\n    return new MetricCohortStats(\n      this.totalCohortCount,\n      this.totalGlobalCount,\n      metricValue,\n      this.metricName,\n      coverage\n    );\n  }\n\n  private computeMetricValue(tp: number[], fn: number[]) {\n    let metricValue = 0;\n    if (this.metricName === Metrics.RecallScore) {\n      if (tp.length === 2) {\n        // For binary case where negative and positive labels exist\n        metricValue = tp[1] / (tp[1] + fn[1]);\n      } else {\n        // For binary case where only positive labels specified\n        metricValue = tp[0] / (tp[0] + fn[0]);\n      }\n    } else if (this.metricName === Metrics.MicroRecallScore) {\n      // Take aggregate across all classes\n      const tpSum = tp.reduce((sum, value) => sum + value, 0);\n      const fnSum = fn.reduce((sum, value) => sum + value, 0);\n      metricValue = tpSum / (tpSum + fnSum);\n    } else if (this.metricName === Metrics.MacroRecallScore) {\n      // Compute per class and then average\n      const perClassMetrics: number[] = [];\n      tp.map((num, idx) => perClassMetrics.push(num / (num + fn[idx])));\n      metricValue =\n        perClassMetrics.reduce((sum, value) => sum + value, 0) /\n        perClassMetrics.length;\n    }\n    return metricValue;\n  }\n}\n\n/**\n * Temporary class for aggregating cohort stats for F1 score.\n */\nexport class F1ScoreStatsAggregator extends BaseStats {\n  public precisionAggregator: PrecisionStatsAggregator;\n  public recallAggregator: RecallStatsAggregator;\n  public constructor(metricName: string) {\n    super(metricName);\n    let precisionMetric: string = Metrics.PrecisionScore;\n    let recallMetric: string = Metrics.RecallScore;\n    if (metricName === Metrics.MicroF1Score) {\n      precisionMetric = Metrics.MicroPrecisionScore;\n      recallMetric = Metrics.MicroRecallScore;\n    } else if (metricName === Metrics.MacroF1Score) {\n      precisionMetric = Metrics.MacroPrecisionScore;\n      recallMetric = Metrics.MacroRecallScore;\n    }\n    this.precisionAggregator = new PrecisionStatsAggregator(precisionMetric);\n    this.recallAggregator = new RecallStatsAggregator(recallMetric);\n  }\n\n  public updateCohort(value: IErrorAnalysisMatrixNode): void {\n    this.precisionAggregator.updateCohort(value);\n    this.recallAggregator.updateCohort(value);\n  }\n\n  public updateGlobal(value: IErrorAnalysisMatrixNode): void {\n    this.precisionAggregator.updateGlobal(value);\n    this.recallAggregator.updateGlobal(value);\n  }\n\n  public createCohortStats(): MetricCohortStats {\n    let metricValue = 0;\n    const precisionCohortStats = this.precisionAggregator.createCohortStats();\n    const recallCohortStats = this.recallAggregator.createCohortStats();\n    if (this.metricName !== Metrics.MacroF1Score) {\n      const precisionMetric = precisionCohortStats.metricValue;\n      const recallMetric = recallCohortStats.metricValue;\n      metricValue =\n        (2 * (precisionMetric * recallMetric)) /\n        (precisionMetric + recallMetric);\n    } else if (this.precisionAggregator.existsSelectedCell) {\n      metricValue = this.computeMacroF1MetricValue(\n        this.precisionAggregator.tpCohort,\n        this.precisionAggregator.fpCohort,\n        this.recallAggregator.fnCohort\n      );\n    } else {\n      metricValue = this.computeMacroF1MetricValue(\n        this.precisionAggregator.tpGlobal,\n        this.precisionAggregator.fpGlobal,\n        this.recallAggregator.fnGlobal\n      );\n    }\n    return new MetricCohortStats(\n      precisionCohortStats.totalCohort,\n      precisionCohortStats.totalAll,\n      metricValue,\n      this.metricName,\n      precisionCohortStats.errorCoverage\n    );\n  }\n\n  public computeMacroF1MetricValue(\n    tp: number[],\n    fp: number[],\n    fn: number[]\n  ): number {\n    const perClassPrecision: number[] = [];\n    tp.map((num, idx) => perClassPrecision.push(num / (num + fp[idx])));\n    const perClassRecall: number[] = [];\n    tp.map((num, idx) => perClassRecall.push(num / (num + fn[idx])));\n    const perClassF1Score: number[] = [];\n    perClassPrecision.forEach((precision, idx) => {\n      const recall = perClassRecall[idx];\n      const f1Score = (2 * precision * recall) / (precision + recall);\n      perClassF1Score.push(f1Score);\n    });\n    return (\n      perClassF1Score.reduce((sum, value) => sum + value, 0) /\n      perClassF1Score.length\n    );\n  }\n}\n\n/**\n * Temporary class for aggregating cohort stats for accuracy.\n */\nexport class AccuracyStatsAggregator extends BaseStatsAggregator {\n  public totalCohortError = 0;\n  public totalGlobalError = 0;\n  public tpCohort: number[] = [];\n  public tpGlobal: number[] = [];\n  public tnCohort: number[] = [];\n  public tnGlobal: number[] = [];\n  public fpCohort: number[] = [];\n  public fpGlobal: number[] = [];\n  public fnCohort: number[] = [];\n  public fnGlobal: number[] = [];\n\n  public updateCohortStats(value: IErrorAnalysisMatrixNode): void {\n    if (value.error !== undefined) {\n      this.totalCohortError += value.error;\n      if (this.tpCohort.length === 0) {\n        this.tpCohort = [...value.tp];\n      } else {\n        this.tpCohort = this.tpCohort.map((num, idx) => num + value.tp[idx]);\n      }\n      if (this.tnCohort.length === 0) {\n        this.tnCohort = [...value.tn];\n      } else {\n        this.tnCohort = this.tnCohort.map((num, idx) => num + value.tn[idx]);\n      }\n      if (this.fpCohort.length === 0) {\n        this.fpCohort = [...value.fp];\n      } else {\n        this.fpCohort = this.fpCohort.map((num, idx) => num + value.fp[idx]);\n      }\n      if (this.fnCohort.length === 0) {\n        this.fnCohort = [...value.fn];\n      } else {\n        this.fnCohort = this.fnCohort.map((num, idx) => num + value.fn[idx]);\n      }\n    }\n  }\n\n  public updateGlobalStats(value: IErrorAnalysisMatrixNode): void {\n    if (value.error !== undefined) {\n      this.totalGlobalError += value.error;\n    }\n    if (this.tpGlobal.length === 0) {\n      this.tpGlobal = [...value.tp];\n    } else {\n      this.tpGlobal = this.tpGlobal.map((num, idx) => num + value.tp[idx]);\n    }\n    if (this.tnGlobal.length === 0) {\n      this.tnGlobal = [...value.tn];\n    } else {\n      this.tnGlobal = this.tnGlobal.map((num, idx) => num + value.tn[idx]);\n    }\n    if (this.fpGlobal.length === 0) {\n      this.fpGlobal = [...value.fp];\n    } else {\n      this.fpGlobal = this.fpGlobal.map((num, idx) => num + value.fp[idx]);\n    }\n    if (this.fnGlobal.length === 0) {\n      this.fnGlobal = [...value.fn];\n    } else {\n      this.fnGlobal = this.fnGlobal.map((num, idx) => num + value.fn[idx]);\n    }\n  }\n\n  public createCohortStats(): MetricCohortStats {\n    let metricValue = 0;\n    let coverage = 0;\n    if (this.existsSelectedCell) {\n      metricValue = this.computeMetricValue(\n        this.tpCohort,\n        this.tnCohort,\n        this.fpCohort,\n        this.fnCohort\n      );\n      coverage = (this.totalCohortError / this.totalGlobalError) * 100;\n    } else {\n      metricValue = this.computeMetricValue(\n        this.tpGlobal,\n        this.tnGlobal,\n        this.fpGlobal,\n        this.fnGlobal\n      );\n      coverage = 100;\n    }\n    return new MetricCohortStats(\n      this.totalCohortCount,\n      this.totalGlobalCount,\n      metricValue,\n      this.metricName,\n      coverage\n    );\n  }\n\n  private computeMetricValue(\n    tp: number[],\n    tn: number[],\n    fp: number[],\n    fn: number[]\n  ) {\n    let metricValue = 0;\n    if (tp.length === 1) {\n      // For binary case where only positive labels specified\n      metricValue = (tp[0] + tn[0]) / (tp[0] + tn[0] + fp[0] + fn[0]);\n    } else {\n      // When all labels specified\n      const tpSum = tp.reduce((sum, value) => sum + value, 0);\n      metricValue = tpSum / (tp[0] + tn[0] + fp[0] + fn[0]);\n    }\n    return metricValue;\n  }\n}\n", "id": "responsible-ai-widgets:libs/error-analysis/src/lib/ErrorAnalysisDashboard/Controls/Matrix/MatrixArea/StatsAggregator.ts:acf087ab-1047-4fd2-8a71-87f933082438"}
{"path": "examples/cli-example/.angular-playground/main.playground.ts", "project_name": "angular-playground", "text": "import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { PlaygroundModule } from 'angular-playground';\nimport { SandboxesDefined } from './sandboxes';\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\nplatformBrowserDynamic().bootstrapModule(PlaygroundModule\n  .configure({\n    selector: 'app-root',\n    overlay: true,\n    modules: [\n      BrowserAnimationsModule\n    ],\n    sandboxesDefined: SandboxesDefined\n  }))\n  .catch(err => console.error(err));\n", "id": "angular-playground:examples/cli-example/.angular-playground/main.playground.ts:ec5a520d-a68e-4a07-ac17-e3959ffae25c"}
{"path": "packages/runtime/runtime-utils/src/runtimeFactoryHelper.ts", "project_name": "FluidFramework", "text": "/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    IContainerContext,\n    IRuntime,\n    IRuntimeFactory,\n} from \"@fluidframework/container-definitions\";\nimport { IContainerRuntime } from \"@fluidframework/container-runtime-definitions\";\n\nexport abstract class RuntimeFactoryHelper<T = IContainerRuntime> implements IRuntimeFactory {\n    public get IRuntimeFactory() { return this; }\n\n    public async instantiateRuntime(\n        context: IContainerContext,\n        existing?: boolean,\n    ): Promise<IRuntime> {\n        const fromExisting = existing === undefined\n            ? context.existing === true\n            : existing;\n        const runtime = await this.preInitialize(context, fromExisting);\n\n        if (fromExisting) {\n            await this.instantiateFromExisting(runtime);\n        } else {\n            await this.instantiateFirstTime(runtime);\n        }\n\n        await this.hasInitialized(runtime);\n        return runtime;\n    }\n\n    public abstract preInitialize(context: IContainerContext, existing: boolean): Promise<IRuntime & T>;\n    public async instantiateFirstTime(_runtime: T): Promise<void> {}\n    public async instantiateFromExisting(_runtime: T): Promise<void> {}\n    public async hasInitialized(_runtime: T): Promise<void> {}\n}\n", "id": "FluidFramework:packages/runtime/runtime-utils/src/runtimeFactoryHelper.ts:e2b6abf8-c89f-49cd-b37e-995866025639"}
{"path": "ts/global.d.ts", "project_name": "wireui", "text": "/// <reference types=\"jest-extended\" />\n", "id": "wireui:ts/global.d.ts:abe64ec4-38bf-497d-918b-52fce78ba65e"}
{"path": "src/h.ts", "project_name": "domplotter", "text": "import { VNode, VNodeChild, VNodeProperties } from \"./interfaces\";\n\nlet toTextVNode = (data: string): VNode => {\n  return {\n    vnodeSelector: \"\",\n    properties: undefined,\n    children: undefined,\n    text: data.toString(),\n    domNode: null,\n  };\n};\n\nlet appendChildren = (parentSelector: string, insertions: VNodeChild[], main: VNode[]) => {\n  for (let i = 0, length = insertions.length; i < length; i++) {\n    let item = insertions[i];\n    if (Array.isArray(item)) {\n      appendChildren(parentSelector, item, main);\n    } else {\n      if (item !== null && item !== undefined && item !== false) {\n        if (typeof item === \"string\") {\n          item = toTextVNode(item);\n        }\n        main.push(item);\n      }\n    }\n  }\n};\n\n/**\n * The `h` function is used to create a virtual DOM node.\n * This function is largely inspired by the mercuryjs and mithril frameworks.\n * The `h` stands for (virtual) hyperscript.\n *\n * @param selector    Contains the tagName, id and fixed css classnames in CSS selector format.\n *                    It is formatted as follows: `tagname.cssclass1.cssclass2#id`.\n * @param properties  An object literal containing properties that will be placed on the DOM node.\n * @param children    Virtual DOM nodes and strings to add as child nodes.\n *                    `children` may contain [[VNode]]s, `string`s, nested arrays, `null` and `undefined`.\n *                    Nested arrays are flattened, `null` and `undefined` are removed.\n *\n * @returns           A VNode object, used to render a real DOM later.\n *\n * NOTE: There are {@link http://maquettejs.org/docs/rules.html|two basic rules} you should be aware of when updating the virtual DOM.\n */\nexport function h(\n  selector: string,\n  properties?: VNodeProperties,\n  children?: VNodeChild[] | null\n): VNode;\n/**\n * The `h` function is used to create a virtual DOM node.\n * This function is largely inspired by the mercuryjs and mithril frameworks.\n * The `h` stands for (virtual) hyperscript.\n *\n * @param selector    Contains the tagName, id and fixed css classnames in CSS selector format.\n *                    It is formatted as follows: `tagname.cssclass1.cssclass2#id`.\n * @param children    Virtual DOM nodes and strings to add as child nodes.\n *                    `children` may contain [[VNode]]s, `string`s, nested arrays, `null` and `undefined`.\n *                    Nested arrays are flattened, `null` and `undefined` are removed.\n *\n * @returns           A VNode object, used to render a real DOM later.\n *\n * NOTE: There are {@link http://maquettejs.org/docs/rules.html|two basic rules} you should be aware of when updating the virtual DOM.\n */\nexport function h(selector: string, children: VNodeChild[]): VNode;\n\nexport function h(\n  selector: string,\n  properties?: VNodeProperties,\n  children?: VNodeChild[] | null\n): VNode {\n  if (Array.isArray(properties)) {\n    children = properties;\n    properties = undefined;\n  } else if (\n    (properties && (typeof (properties as any) === \"string\" || properties.vnodeSelector)) ||\n    (children && (typeof (children as any) === \"string\" || (children as any).vnodeSelector))\n  ) {\n    throw new Error(\"h called with invalid arguments\");\n  }\n  let text: string | undefined;\n  let flattenedChildren: VNode[] | undefined;\n  // Recognize a common special case where there is only a single text node\n  if (children && children.length === 1 && typeof children[0] === \"string\") {\n    text = children[0];\n  } else if (children) {\n    flattenedChildren = [];\n    appendChildren(selector, children, flattenedChildren);\n    if (flattenedChildren.length === 0) {\n      flattenedChildren = undefined;\n    }\n  }\n  return {\n    vnodeSelector: selector,\n    properties: properties,\n    children: flattenedChildren,\n    text: text === \"\" ? undefined : text,\n    domNode: null,\n  };\n}\n", "id": "domplotter:src/h.ts:fed9f31b-2309-4408-bb83-bd491b5f2b50"}
{"path": "lib/db/master/sqliteMasterColumn.ts", "project_name": "geopackage-js", "text": "/**\n * SQLite Master table (sqlite_master) column keywords\n */\nexport enum SQLiteMasterColumn {\n\n\t/**\n\t * The sqlite_master.type column will be one of the following text strings:\n\t * 'table', 'index', 'view', or 'trigger' according to the type of object\n\t * defined. The 'table' string is used for both ordinary and virtual tables.\n\t */\n\tTYPE,\n\n\t/**\n\t * The sqlite_master.name column will hold the name of the object.\n\t */\n\tNAME,\n\n\t/**\n\t * The sqlite_master.tbl_name column holds the name of a table or view that\n\t * the object is associated with. For a table or view, the tbl_name column\n\t * is a copy of the name column. For an index, the tbl_name is the name of\n\t * the table that is indexed. For a trigger, the tbl_name column stores the\n\t * name of the table or view that causes the trigger to fire.\n\t */\n\tTBL_NAME,\n\n\t/**\n\t * The sqlite_master.rootpage column stores the page number of the root\n\t * b-tree page for tables and indexes. For rows that define views, triggers,\n\t * and virtual tables, the rootpage column is 0 or NULL.\n\t */\n\tROOTPAGE,\n\n\t/**\n\t * The sqlite_master.sql column stores SQL text that describes the object.\n\t * This SQL text is a CREATE TABLE, CREATE VIRTUAL TABLE, CREATE INDEX,\n\t * CREATE VIEW, or CREATE TRIGGER statement that if evaluated against the\n\t * database file when it is the main database of a database connection would\n\t * recreate the object.\n\t */\n\tSQL\n}\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace SQLiteMasterColumn {\n\texport function nameFromType(type: SQLiteMasterColumn): string {\n\t\treturn SQLiteMasterColumn[type];\n\t}\n\n\texport function fromName(type: string): SQLiteMasterColumn {\n\t\treturn SQLiteMasterColumn[type as keyof typeof SQLiteMasterColumn] as SQLiteMasterColumn;\n\t}\n\n\texport function asArray(): SQLiteMasterColumn[] {\n\t\treturn [SQLiteMasterColumn.TYPE, SQLiteMasterColumn.NAME, SQLiteMasterColumn.TBL_NAME, SQLiteMasterColumn.ROOTPAGE, SQLiteMasterColumn.SQL]\n\t}\n}\n", "id": "geopackage-js:lib/db/master/sqliteMasterColumn.ts:f16e1e56-586b-40b0-b98b-843ac8ae40c5"}
{"path": "docs/examples/subTable.tsx", "project_name": "table", "text": "import React from 'react';\nimport Table from 'rc-table';\nimport '../../assets/index.less';\n\nconst generateData = () => {\n  const temp = [];\n\n  for (let i = 0; i < 100; i += 1) {\n    temp.push({\n      a: i,\n      b: 'bbbb'.repeat(Math.floor(Math.random() * 10)),\n      children: [\n        {\n          a: `${i}_${i}`,\n          b: 'test',\n          children: [\n            {\n              a: `${i}_${i}_${i}`,\n              b: 'testtest',\n            },\n            {\n              a: `${i}_${i}_${i}_${i}`,\n              b: 'testtest',\n            },\n            {\n              a: `${i}_${i}_${i}_${i}_${i}`,\n              b: 'testtest',\n            },\n          ],\n        },\n      ],\n    });\n  }\n\n  return temp;\n};\n\nconst data = generateData();\n\nclass Demo extends React.Component {\n  handleClick = (record, e) => {\n    e.preventDefault();\n    console.log(record.a);\n  };\n\n  render() {\n    const columns = [\n      {\n        title: 'title1',\n        dataIndex: 'a',\n        key: 'a',\n        width: 100,\n        render(text, record, index) {\n          return index;\n        },\n      },\n      { title: 'title2', dataIndex: 'b', key: 'b', width: 100 },\n      { title: 'title3', dataIndex: 'c', key: 'c', width: 200 },\n      {\n        title: 'Operations',\n        dataIndex: '',\n        key: 'x',\n        render: (text, record) => (\n          <a href=\"#\" onClick={e => this.handleClick(record, e)}>\n            click {record.a}\n          </a>\n        ),\n      },\n    ];\n    return (\n      <div>\n        <h2>sub table</h2>\n        <Table columns={columns} data={data} rowKey={record => record.a} scroll={{ y: 500 }} />\n      </div>\n    );\n  }\n}\n\nexport default Demo;\n", "id": "table:docs/examples/subTable.tsx:69d3ff13-2334-47c2-ba8b-346eb15b9eb0"}
{"path": "src/common/types.ts", "project_name": "project-clippi", "text": "/* eslint-disable @typescript-eslint/no-explicit-any */\nexport interface TwitchUser {\n  displayName: string;\n  profilePictureUrl: string;\n  name: string;\n}\n\nexport interface TwitchClip {\n  clipID: string;\n  channel: string;\n  timestamp: Date;\n}\n\n// Types to bind update status and payload type\nexport enum UpdateStatus {\n  NO_UPDATE = \"NO_UPDATE\",\n  UPDATE_AVAILABLE = \"UPDATE_AVAILABLE\",\n  DOWNLOAD_COMPLETE = \"DOWNLOAD_COMPLETE\",\n  UPDATE_ERROR = \"UPDATE_ERROR\",\n}\n\ntype UpdateTypeMap<M extends { [index: string]: any }> = {\n  [Key in keyof M]: M[Key] extends undefined\n    ? {\n        status: Key;\n      }\n    : {\n        status: Key;\n        payload: M[Key];\n      };\n};\n\ntype UpdateTypePayload = {\n  // main to renderer\n  [UpdateStatus.DOWNLOAD_COMPLETE]: never;\n  [UpdateStatus.UPDATE_ERROR]: string;\n  [UpdateStatus.UPDATE_AVAILABLE]: {\n    version: string;\n    lastChecked: string;\n  };\n  [UpdateStatus.NO_UPDATE]: {\n    version: string;\n    lastChecked: string;\n  };\n};\n\nexport type VersionUpdatePayload = UpdateTypeMap<UpdateTypePayload>[keyof UpdateTypeMap<UpdateTypePayload>];\n\nexport enum Message {\n  // renderer to main\n  AuthenticateTwitch = \"authenticateTwitch\",\n  SignOutTwitch = \"signOutTwitch\",\n  CreateTwitchClip = \"createTwitchClip\",\n  Notify = \"notify\",\n  SelectDirectory = \"selectDirectory\",\n  ToggleTheme = \"toggleTheme\",\n  CheckForUpdates = \"checkForUpdates\",\n  DownloadUpdate = \"downloadUpdate\",\n  InstallUpdateAndRestart = \"installUpdateAndRestart\",\n\n  // main to renderer\n  VersionUpdateStatus = \"versionUpdateStatus\",\n}\n\nexport type ResponseType<X extends Message> =\n  // main to renderer\n  X extends Message.AuthenticateTwitch\n    ? TwitchUser | null // Respond with an error message if necessary\n    : X extends Message.CreateTwitchClip\n    ? TwitchClip | null // clip ID or null if error\n    : X extends Message.SignOutTwitch\n    ? any\n    : X extends Message.Notify\n    ? void\n    : X extends Message.ToggleTheme\n    ? void // Return any payload to renderer\n    : X extends Message.SelectDirectory\n    ? string[]\n    : X extends Message.CheckForUpdates\n    ? void\n    : X extends Message.InstallUpdateAndRestart\n    ? void\n    : X extends Message.DownloadUpdate\n    ? void\n    : X extends Message.VersionUpdateStatus\n    ? VersionUpdatePayload\n    : never;\n\nexport type RequestType<X extends Message> =\n  // renderer to main\n  X extends Message.AuthenticateTwitch\n    ? { scopes: string[] }\n    : X extends Message.CreateTwitchClip\n    ? { channel?: string; postToChat?: boolean }\n    : X extends Message.SignOutTwitch\n    ? any\n    : X extends Message.Notify\n    ? { message: string; title?: string }\n    : X extends Message.SelectDirectory\n    ? { options: any; save?: boolean }\n    : X extends Message.ToggleTheme\n    ? { theme: \"light\" | \"dark\" } // Tell the main process which theme we want to apply\n    : X extends Message.CheckForUpdates\n    ? void\n    : never;\n", "id": "project-clippi:src/common/types.ts:154b4257-36b0-4a1e-80a5-07ad3aae5f0b"}
{"path": "apps/dep-graph-client/src/app/util-cytoscape/index.ts", "project_name": "nx", "text": "export * from './cytoscape.models';\nexport * from './edge';\nexport * from './parent-node';\nexport * from './project-node';\n", "id": "nx:apps/dep-graph-client/src/app/util-cytoscape/index.ts:20a97470-833d-4f02-9585-df5123b83fed"}
{"path": "ui/src/Components/AlertAck/index.test.tsx", "project_name": "karma", "text": "import { act } from \"react-dom/test-utils\";\n\nimport { mount } from \"enzyme\";\n\nimport toDiffableHtml from \"diffable-html\";\n\nimport fetchMock from \"fetch-mock\";\n\nimport { MockAlertGroup, MockAlert } from \"__fixtures__/Alerts\";\nimport type { APIAlertT, APIAlertGroupT } from \"Models/APITypes\";\nimport { AlertStore } from \"Stores/AlertStore\";\nimport { SilenceFormStore } from \"Stores/SilenceFormStore\";\nimport { AlertAck } from \".\";\n\nlet alertStore: AlertStore;\nlet silenceFormStore: SilenceFormStore;\nlet alerts: APIAlertT[];\nlet group: APIAlertGroupT;\n\nbeforeEach(() => {\n  jest.useFakeTimers(\"modern\");\n  jest.setSystemTime(new Date(Date.UTC(2000, 1, 1, 0, 0, 0)));\n\n  alertStore = new AlertStore([]);\n  silenceFormStore = new SilenceFormStore();\n\n  alertStore.settings.setValues({\n    ...alertStore.settings.values,\n    ...{\n      alertAcknowledgement: {\n        enabled: true,\n        durationSeconds: 123,\n        author: \"default author\",\n        comment: \"COMMENT\",\n      },\n    },\n  });\n\n  alertStore.data.setUpstreams({\n    counters: { total: 1, healthy: 1, failed: 0 },\n    clusters: { default: [\"default\"] },\n    instances: [\n      {\n        name: \"default\",\n        uri: \"http://localhost\",\n        publicURI: \"http://example.com\",\n        readonly: false,\n        headers: { foo: \"bar\" },\n        corsCredentials: \"include\",\n        error: \"\",\n        version: \"0.17.0\",\n        cluster: \"default\",\n        clusterMembers: [\"default\"],\n      },\n    ],\n  });\n\n  alerts = [\n    MockAlert([], [{ name: \"foo\", value: \"bar\" }], \"active\"),\n    MockAlert([], [{ name: \"foo\", value: \"baz\" }], \"active\"),\n    MockAlert([], [{ name: \"foo\", value: \"ignore\" }], \"suppressed\"),\n  ];\n  group = MockAlertGroup(\n    [{ name: \"alertname\", value: \"Fake Alert\" }],\n    alerts,\n    [],\n    [],\n    {}\n  );\n  group.allLabels.active = {\n    alertname: [\"Fake Alert\"],\n    foo: [\"bar\", \"baz\"],\n  };\n\n  fetchMock.resetHistory();\n  fetchMock.mock(\n    \"*\",\n    {\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ silenceID: \"123\" }),\n    },\n    {\n      overwriteRoutes: true,\n    }\n  );\n});\n\nafterEach(() => {\n  fetchMock.resetHistory();\n  jest.clearAllTimers();\n  jest.clearAllMocks();\n  jest.restoreAllMocks();\n  jest.useRealTimers();\n});\n\nconst MountedAlertAck = () => {\n  return mount(\n    <AlertAck\n      alertStore={alertStore}\n      silenceFormStore={silenceFormStore}\n      group={group}\n    />\n  );\n};\n\nconst MountAndClick = async () => {\n  const tree = MountedAlertAck();\n  const button = tree.find(\"span.badge\");\n  button.simulate(\"click\");\n  await act(async () => {\n    await fetchMock.flush(true);\n  });\n};\n\ndescribe(\"<AlertAck />\", () => {\n  it(\"is null when acks are disabled\", () => {\n    alertStore.settings.setValues({\n      ...alertStore.settings.values,\n      ...{\n        alertAcknowledgement: {\n          enabled: false,\n          durationSeconds: 123,\n          author: \"default author\",\n          comment: \"COMMENT\",\n        },\n      },\n    });\n    const tree = MountedAlertAck();\n    expect(tree.html()).toBe(\"\");\n  });\n\n  it(\"uses faCheck icon when idle\", () => {\n    const tree = MountedAlertAck();\n    expect(toDiffableHtml(tree.html())).toMatch(/fa-check/);\n  });\n\n  it(\"uses faExclamationCircle after failed fetch\", async () => {\n    fetchMock.mock(\n      \"*\",\n      {\n        status: 500,\n        body: \"error message\",\n      },\n      {\n        overwriteRoutes: true,\n      }\n    );\n    const tree = MountedAlertAck();\n    const button = tree.find(\"span.badge\");\n    button.simulate(\"click\");\n    await act(async () => {\n      await fetchMock.flush(true);\n    });\n    expect(toDiffableHtml(tree.html())).toMatch(/fa-exclamation-circle/);\n  });\n\n  it(\"resets faExclamationCircle after 20s\", async () => {\n    fetchMock.mock(\n      \"*\",\n      {\n        status: 500,\n        body: \"error message\",\n      },\n      {\n        overwriteRoutes: true,\n      }\n    );\n    const tree = MountedAlertAck();\n    const button = tree.find(\"span.badge\");\n    button.simulate(\"click\");\n    await act(async () => {\n      await fetchMock.flush(true);\n    });\n    expect(toDiffableHtml(tree.html())).toMatch(/fa-exclamation-circle/);\n\n    act(() => {\n      jest.advanceTimersByTime(21 * 1000);\n    });\n    tree.update();\n    expect(toDiffableHtml(tree.html())).not.toMatch(/fa-exclamation-circle/);\n    expect(toDiffableHtml(tree.html())).toMatch(/fa-check/);\n  });\n\n  it(\"uses faCheckCircle after successful fetch\", async () => {\n    const tree = MountedAlertAck();\n    const button = tree.find(\"span.badge\");\n    button.simulate(\"click\");\n    await act(async () => {\n      await fetchMock.flush(true);\n    });\n    expect(toDiffableHtml(tree.html())).toMatch(/fa-check-circle/);\n  });\n\n  it(\"sends a POST request on click\", async () => {\n    await MountAndClick();\n    expect(fetchMock.calls()).toHaveLength(1);\n    expect(fetchMock.lastOptions()).toMatchObject({\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  });\n\n  it(\"sends a POST request to every cluster\", async () => {\n    alertStore.data.setUpstreams({\n      counters: { total: 4, healthy: 4, failed: 0 },\n      clusters: { c1: [\"m1\", \"m2\"], c2: [\"m3\", \"m4\"] },\n      instances: [\"m1\", \"m2\", \"m3\", \"m4\"].map((a) => ({\n        name: a,\n        uri: `http://${a}.example.com`,\n        publicURI: `http://${a}.example.com`,\n        readonly: false,\n        headers: { \"X-Cluster\": a === \"m1\" || a === \"2\" ? \"c1\" : \"c2\" },\n        corsCredentials: a === \"m1\" || a === \"2\" ? \"same-origin\" : \"include\",\n        error: \"\",\n        version: \"0.17.0\",\n        cluster: a === \"m1\" || a === \"2\" ? \"c1\" : \"c2\",\n        clusterMembers: a === \"m1\" || a === \"2\" ? [\"m1\", \"m2\"] : [\"m3\", \"m4\"],\n      })),\n    });\n    group.alertmanagerCount = {\n      m1: 1,\n      m2: 1,\n      m3: 1,\n      m4: 1,\n    };\n\n    await MountAndClick();\n    expect(fetchMock.calls()).toHaveLength(2);\n    expect(fetchMock.calls()[0][0]).toBe(\n      \"http://m1.example.com/api/v2/silences\"\n    );\n    expect(fetchMock.calls()[0][1]).toMatchObject({\n      method: \"POST\",\n      credentials: \"same-origin\",\n      headers: { \"X-Cluster\": \"c1\" },\n    });\n    expect(fetchMock.calls()[1][0]).toBe(\n      \"http://m3.example.com/api/v2/silences\"\n    );\n    expect(fetchMock.calls()[1][1]).toMatchObject({\n      method: \"POST\",\n      credentials: \"include\",\n      headers: { \"X-Cluster\": \"c2\" },\n    });\n  });\n\n  it(\"skips readonly alertmanagers\", async () => {\n    alertStore.data.setUpstreams({\n      counters: { total: 4, healthy: 4, failed: 0 },\n      clusters: { c1: [\"m1\", \"m2\"], c2: [\"m3\", \"m4\"] },\n      instances: [\"m1\", \"m2\", \"m3\", \"m4\"].map((a) => ({\n        name: a,\n        uri: `http://${a}.example.com`,\n        publicURI: `http://${a}.example.com`,\n        readonly: a === \"m1\" || a === \"m3\" ? true : false,\n        headers: { \"X-Cluster\": a === \"m1\" || a === \"2\" ? \"c1\" : \"c2\" },\n        corsCredentials: a === \"m1\" || a === \"m2\" ? \"same-origin\" : \"include\",\n        error: \"\",\n        version: \"0.17.0\",\n        cluster: a === \"m1\" || a === \"2\" ? \"c1\" : \"c2\",\n        clusterMembers: a === \"m1\" || a === \"2\" ? [\"m1\", \"m2\"] : [\"m3\", \"m4\"],\n      })),\n    });\n    group.alertmanagerCount = {\n      m1: 1,\n      m2: 1,\n      m3: 1,\n      m4: 1,\n    };\n\n    await MountAndClick();\n    expect(fetchMock.calls()).toHaveLength(2);\n    expect(fetchMock.calls()[0][0]).toBe(\n      \"http://m2.example.com/api/v2/silences\"\n    );\n    expect(fetchMock.calls()[1][0]).toBe(\n      \"http://m4.example.com/api/v2/silences\"\n    );\n  });\n\n  it(\"doesn't send any request on click when already done\", async () => {\n    const tree = MountedAlertAck();\n    const button = tree.find(\"span.badge\");\n\n    button.simulate(\"click\");\n    await act(async () => {\n      await fetchMock.flush(true);\n    });\n    expect(fetchMock.calls()).toHaveLength(1);\n\n    button.simulate(\"click\");\n    expect(fetchMock.calls()).toHaveLength(1);\n  });\n\n  it(\"sends correct payload\", async () => {\n    fetchMock.mock(\n      \"*\",\n      {\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ silenceID: \"123456789\" }),\n      },\n      {\n        overwriteRoutes: true,\n      }\n    );\n\n    silenceFormStore.data.setAuthor(\"karma/ui\");\n    await MountAndClick();\n    expect(JSON.parse((fetchMock.lastOptions() as any).body)).toEqual({\n      comment: \"COMMENT\",\n      createdBy: \"karma/ui\",\n      endsAt: \"2000-02-01T00:02:03.000Z\",\n      matchers: [\n        {\n          isRegex: false,\n          name: \"alertname\",\n          value: \"Fake Alert\",\n          isEqual: true,\n        },\n        { isRegex: true, name: \"foo\", value: \"(bar|baz)\", isEqual: true },\n      ],\n      startsAt: \"2000-02-01T00:00:00.000Z\",\n    });\n  });\n\n  it(\"uses settings when generating payload\", async () => {\n    alertStore.settings.setValues({\n      ...alertStore.settings.values,\n      ...{\n        alertAcknowledgement: {\n          enabled: true,\n          durationSeconds: 237,\n          author: \"me\",\n          comment: \"comment\",\n        },\n      },\n    });\n    await MountAndClick();\n    expect(JSON.parse((fetchMock.lastOptions() as any).body)).toEqual({\n      comment: \"comment\",\n      createdBy: \"me\",\n      endsAt: \"2000-02-01T00:03:57.000Z\",\n      matchers: [\n        {\n          isRegex: false,\n          name: \"alertname\",\n          value: \"Fake Alert\",\n          isEqual: true,\n        },\n        { isRegex: true, name: \"foo\", value: \"(bar|baz)\", isEqual: true },\n      ],\n      startsAt: \"2000-02-01T00:00:00.000Z\",\n    });\n  });\n\n  it(\"injects UTC timestamp when configured\", async () => {\n    alertStore.settings.setValues({\n      ...alertStore.settings.values,\n      ...{\n        alertAcknowledgement: {\n          enabled: true,\n          durationSeconds: 237,\n          author: \"me\",\n          comment: \"ACK! This alert was acknowledged using karma on %NOW%\",\n        },\n      },\n    });\n    await MountAndClick();\n    expect(JSON.parse((fetchMock.lastOptions() as any).body)).toEqual({\n      comment:\n        \"ACK! This alert was acknowledged using karma on Tue, 01 Feb 2000 00:00:00 GMT\",\n      createdBy: \"me\",\n      endsAt: \"2000-02-01T00:03:57.000Z\",\n      matchers: [\n        {\n          isRegex: false,\n          name: \"alertname\",\n          value: \"Fake Alert\",\n          isEqual: true,\n        },\n        { isRegex: true, name: \"foo\", value: \"(bar|baz)\", isEqual: true },\n      ],\n      startsAt: \"2000-02-01T00:00:00.000Z\",\n    });\n  });\n\n  it(\"injects local timezone timestamp when configured\", async () => {\n    alertStore.settings.setValues({\n      ...alertStore.settings.values,\n      ...{\n        alertAcknowledgement: {\n          enabled: true,\n          durationSeconds: 237,\n          author: \"me\",\n          comment: \"ACK! This alert was acknowledged using karma on %NOWLOC%\",\n        },\n      },\n    });\n    await MountAndClick();\n    const comment = JSON.parse((fetchMock.lastOptions() as any).body).comment;\n    expect(comment).not.toEqual(\n      \"ACK! This alert was acknowledged using karma on Tue Feb 01 2000 00:00:00 GMT\"\n    );\n    expect(comment).toMatch(\n      /ACK! This alert was acknowledged using karma on (Mon Jan 31 2000 19|Tue Feb 01 2000 00):00:00 GMT([+-]+)[0-9]+ \\(.*\\)/\n    );\n  });\n\n  it(\"uses author from authentication info when auth is enabled\", async () => {\n    alertStore.info.setAuthentication(true, \"<EMAIL>\");\n    alertStore.settings.setValues({\n      ...alertStore.settings.values,\n      ...{\n        alertAcknowledgement: {\n          enabled: true,\n          durationSeconds: 222,\n          author: \"me\",\n          comment: \"FOO: bar\",\n        },\n      },\n    });\n    await MountAndClick();\n    expect(JSON.parse((fetchMock.lastOptions() as any).body)).toEqual({\n      comment: \"FOO: bar\",\n      createdBy: \"<EMAIL>\",\n      endsAt: \"2000-02-01T00:03:42.000Z\",\n      matchers: [\n        {\n          isRegex: false,\n          name: \"alertname\",\n          value: \"Fake Alert\",\n          isEqual: true,\n        },\n        { isRegex: true, name: \"foo\", value: \"(bar|baz)\", isEqual: true },\n      ],\n      startsAt: \"2000-02-01T00:00:00.000Z\",\n    });\n  });\n\n  it(\"uses author from silenceFormStore if authentication is disabled\", async () => {\n    alertStore.info.setAuthentication(false, \"wrong\");\n    alertStore.settings.setValues({\n      ...alertStore.settings.values,\n      ...{\n        alertAcknowledgement: {\n          enabled: true,\n          durationSeconds: 222,\n          author: \"me\",\n          comment: \"FOO: bar\",\n        },\n      },\n    });\n    silenceFormStore.data.setAuthor(\"<EMAIL>\");\n    await MountAndClick();\n    expect(JSON.parse((fetchMock.lastOptions() as any).body)).toEqual({\n      comment: \"FOO: bar\",\n      createdBy: \"<EMAIL>\",\n      endsAt: \"2000-02-01T00:03:42.000Z\",\n      matchers: [\n        {\n          isRegex: false,\n          name: \"alertname\",\n          value: \"Fake Alert\",\n          isEqual: true,\n        },\n        { isRegex: true, name: \"foo\", value: \"(bar|baz)\", isEqual: true },\n      ],\n      startsAt: \"2000-02-01T00:00:00.000Z\",\n    });\n  });\n\n  it(\"uses default author as fallback\", async () => {\n    alertStore.settings.setValues({\n      ...alertStore.settings.values,\n      ...{\n        alertAcknowledgement: {\n          enabled: true,\n          durationSeconds: 222,\n          author: \"me\",\n          comment: \"FOO: bar\",\n        },\n      },\n    });\n    silenceFormStore.data.setAuthor(\"\");\n    await MountAndClick();\n    expect(JSON.parse((fetchMock.lastOptions() as any).body)).toEqual({\n      comment: \"FOO: bar\",\n      createdBy: \"me\",\n      endsAt: \"2000-02-01T00:03:42.000Z\",\n      matchers: [\n        {\n          isRegex: false,\n          name: \"alertname\",\n          value: \"Fake Alert\",\n          isEqual: true,\n        },\n        { isRegex: true, name: \"foo\", value: \"(bar|baz)\", isEqual: true },\n      ],\n      startsAt: \"2000-02-01T00:00:00.000Z\",\n    });\n  });\n\n  it(\"sends POST request to /api/v2/silences\", async () => {\n    await MountAndClick();\n    const uri = fetchMock.calls()[0][0];\n    expect(uri).toBe(\"http://localhost/api/v2/silences\");\n  });\n\n  it(\"will retry on another cluster member after 500 response\", async () => {\n    fetchMock.reset();\n    fetchMock.mock(\"http://m1.example.com/api/v2/silences\", {\n      status: 500,\n      body: \"error message\",\n    });\n    fetchMock.mock(\"http://m2.example.com/api/v2/silences\", {\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ silenceID: \"123\" }),\n    });\n    fetchMock.mock(\"http://m3.example.com/api/v2/silences\", {\n      status: 500,\n      body: \"error message\",\n    });\n    fetchMock.mock(\"http://m4.example.com/api/v2/silences\", {\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ silenceID: \"456\" }),\n    });\n    alertStore.data.setUpstreams({\n      counters: { total: 1, healthy: 1, failed: 0 },\n      clusters: { c1: [\"m1\", \"m2\"], c2: [\"m3\", \"m4\"] },\n      instances: [\"m1\", \"m2\", \"m3\", \"m4\"].map((a) => ({\n        name: a,\n        uri: `http://${a}.example.com`,\n        publicURI: `http://${a}.example.com`,\n        readonly: false,\n        headers: { \"X-Cluster\": a === \"m1\" || a === \"2\" ? \"c1\" : \"c2\" },\n        corsCredentials: a === \"m1\" || a === \"m2\" ? \"same-origin\" : \"include\",\n        error: \"\",\n        version: \"0.17.0\",\n        cluster: a === \"m1\" || a === \"2\" ? \"c1\" : \"c2\",\n        clusterMembers: a === \"m1\" || a === \"2\" ? [\"m1\", \"m2\"] : [\"m3\", \"m4\"],\n      })),\n    });\n    group.alertmanagerCount = {\n      m1: 1,\n      m2: 1,\n      m3: 1,\n      m4: 1,\n    };\n\n    const tree = MountedAlertAck();\n    const button = tree.find(\"span.badge\");\n    button.simulate(\"click\");\n    await act(async () => {\n      await fetchMock.flush(true);\n    });\n    expect(fetchMock.calls()).toHaveLength(4);\n    expect(fetchMock.calls()[0][0]).toBe(\n      \"http://m1.example.com/api/v2/silences\"\n    );\n    expect(fetchMock.calls()[1][0]).toBe(\n      \"http://m2.example.com/api/v2/silences\"\n    );\n    expect(fetchMock.calls()[2][0]).toBe(\n      \"http://m3.example.com/api/v2/silences\"\n    );\n    expect(fetchMock.calls()[3][0]).toBe(\n      \"http://m4.example.com/api/v2/silences\"\n    );\n  });\n\n  it(\"will retry on another cluster member after fetch failure\", async () => {\n    fetchMock.reset();\n    fetchMock.mock(\"http://m1.example.com/api/v2/silences\", {\n      throws: new TypeError(\"failed to fetch\"),\n    });\n    fetchMock.mock(\"http://m2.example.com/api/v2/silences\", {\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ silenceID: \"123\" }),\n    });\n    fetchMock.mock(\"http://m3.example.com/api/v2/silences\", {\n      throws: new TypeError(\"failed to fetch\"),\n    });\n    fetchMock.mock(\"http://m4.example.com/api/v2/silences\", {\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ silenceID: \"123\" }),\n    });\n    alertStore.data.setUpstreams({\n      counters: { total: 1, healthy: 1, failed: 0 },\n      clusters: { c1: [\"m1\", \"m2\"], c2: [\"m3\", \"m4\"] },\n      instances: [\"m1\", \"m2\", \"m3\", \"m4\"].map((a) => ({\n        name: a,\n        uri: `http://${a}.example.com`,\n        publicURI: `http://${a}.example.com`,\n        readonly: false,\n        headers: { \"X-Cluster\": a === \"m1\" || a === \"2\" ? \"c1\" : \"c2\" },\n        corsCredentials: a === \"m1\" || a === \"m2\" ? \"same-origin\" : \"include\",\n        error: \"\",\n        version: \"0.17.0\",\n        cluster: a === \"m1\" || a === \"2\" ? \"c1\" : \"c2\",\n        clusterMembers: a === \"m1\" || a === \"2\" ? [\"m1\", \"m2\"] : [\"m3\", \"m4\"],\n      })),\n    });\n    group.alertmanagerCount = {\n      m1: 1,\n      m2: 1,\n      m3: 1,\n      m4: 1,\n    };\n\n    const tree = MountedAlertAck();\n    const button = tree.find(\"span.badge\");\n    button.simulate(\"click\");\n    await act(async () => {\n      await fetchMock.flush(true);\n    });\n    await act(async () => {\n      await fetchMock.flush(true);\n    });\n    expect(fetchMock.calls()).toHaveLength(4);\n    expect(fetchMock.calls()[0][0]).toBe(\n      \"http://m1.example.com/api/v2/silences\"\n    );\n    expect(fetchMock.calls()[1][0]).toBe(\n      \"http://m2.example.com/api/v2/silences\"\n    );\n    expect(fetchMock.calls()[2][0]).toBe(\n      \"http://m3.example.com/api/v2/silences\"\n    );\n    expect(fetchMock.calls()[3][0]).toBe(\n      \"http://m4.example.com/api/v2/silences\"\n    );\n  });\n\n  it(\"will log an error if Alertmanager instance is missing from instances and try the next one\", async () => {\n    const consoleSpy = jest\n      .spyOn(console, \"error\")\n      .mockImplementation(() => {});\n    alertStore.data.setUpstreams({\n      counters: { total: 1, healthy: 1, failed: 0 },\n      clusters: { default: [\"default\", \"fallback\"] },\n      instances: [\n        {\n          name: \"default\",\n          uri: \"http://am1.example.com\",\n          publicURI: \"http://am1.example.com\",\n          readonly: false,\n          headers: {},\n          corsCredentials: \"include\",\n          error: \"\",\n          version: \"0.17.0\",\n          cluster: \"default\",\n          clusterMembers: [\"default\", \"fallback\"],\n        },\n      ],\n    });\n\n    const tree = MountedAlertAck();\n    const button = tree.find(\"span.badge\");\n    button.simulate(\"click\");\n    await act(async () => {\n      await fetchMock.flush(true);\n    });\n    expect(fetchMock.calls()).toHaveLength(1);\n    expect(fetchMock.calls()[0][0]).toBe(\n      \"http://am1.example.com/api/v2/silences\"\n    );\n    expect(consoleSpy).toHaveBeenCalledTimes(1);\n  });\n});\n", "id": "karma:ui/src/Components/AlertAck/index.test.tsx:270be962-6b57-4bad-aa1e-194a98f96eab"}
{"path": "nx-dev/ui-member-card/src/lib/member-card.spec.tsx", "project_name": "nx", "text": "import { render } from '@testing-library/react';\nimport { MemberCard } from './member-card';\n\ndescribe('MemberCard', () => {\n  xit('should render successfully', () => {\n    const { baseElement } = render(\n      <MemberCard\n        description=\"description content\"\n        imageUrl=\"./image.png\"\n        name=\"name content\"\n      />\n    );\n    expect(baseElement).toBeTruthy();\n  });\n});\n", "id": "nx:nx-dev/ui-member-card/src/lib/member-card.spec.tsx:dab5ea23-fe82-4774-8ec9-13dcd5ac3dce"}
{"path": "src/orders/components/OrderAddressEditDialog/index.ts", "project_name": "saleor-dashboard", "text": "export { default } from \"./OrderAddressEditDialog\";\nexport * from \"./OrderAddressEditDialog\";\n", "id": "saleor-dashboard:src/orders/components/OrderAddressEditDialog/index.ts:b64077a9-210d-4c3b-a78d-b08246b0b5d9"}
{"path": "lib/node_modules/@stdlib/assert/is-between-array/docs/types/test.ts", "project_name": "stdlib", "text": "/*\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport isBetweenArray = require( './index' );\n\n\n// TESTS //\n\n// The function returns a boolean...\n{\n\tconst arr = [ 3.0, 3.14, 4.0 ];\n\tisBetweenArray( arr, 1, 4 ); // $ExpectType boolean\n\tisBetweenArray( arr, 3.14, 4.0, 'open', 'closed' ); // $ExpectType boolean\n\tisBetweenArray( arr, 3.14, 4.0, 'open' ); // $ExpectType boolean\n}\n\n// The function does not compile if provided a fourth argument that is not a recognized string...\n{\n\tconst arr = [ 3.0, 3.14, 4.0 ];\n\tisBetweenArray( arr, 3.14, 4.0, [] ); // $ExpectError\n\tisBetweenArray( arr, 3.14, 4.0, {} ); // $ExpectError\n\tisBetweenArray( arr, 3.14, 4.0, 123 ); // $ExpectError\n\tisBetweenArray( arr, 3.14, 4.0, 'abc' ); // $ExpectError\n\tisBetweenArray( arr, 3.14, 4.0, null ); // $ExpectError\n\tisBetweenArray( arr, 3.14, 4.0, true ); // $ExpectError\n\tisBetweenArray( arr, 3.14, 4.0, false ); // $ExpectError\n}\n\n// The function does not compile if provided a fifth argument that is not a recognized string...\n{\n\tconst arr = [ 3.0, 3.14, 4.0 ];\n\tisBetweenArray( arr, 3.14, 4.0, 'open', [] ); // $ExpectError\n\tisBetweenArray( arr, 3.14, 4.0, 'open', {} ); // $ExpectError\n\tisBetweenArray( arr, 3.14, 4.0, 'open', 123 ); // $ExpectError\n\tisBetweenArray( arr, 3.14, 4.0, 'open', 'abc' ); // $ExpectError\n\tisBetweenArray( arr, 3.14, 4.0, 'open', null ); // $ExpectError\n\tisBetweenArray( arr, 3.14, 4.0, 'open', true ); // $ExpectError\n\tisBetweenArray( arr, 3.14, 4.0, 'open', false ); // $ExpectError\n}\n\n// The function does not compile if provided insufficient arguments...\n{\n\tconst arr = [ 3.0, 3.14, 4.0 ];\n\tisBetweenArray(); // $ExpectError\n\tisBetweenArray( arr ); // $ExpectError\n\tisBetweenArray( arr, 2 ); // $ExpectError\n}\n", "id": "stdlib:lib/node_modules/@stdlib/assert/is-between-array/docs/types/test.ts:a99a952c-b58f-412b-b617-f1a88b011423"}
{"path": "src/dark-mode/index.ts", "project_name": "stylebot", "text": "import * as dedent from 'dedent';\nimport * as postcss from 'postcss';\nimport * as tinycolor from 'tinycolor2';\n\nimport { getSelector } from '@stylebot/css';\n\ndeclare global {\n  interface Window {\n    stylebotDarkModeUrl: string;\n  }\n}\n\nconst Theme = {\n  color: tinycolor('#e8e6e3'),\n  backgroundColor: tinycolor('#222'),\n  borderColor: tinycolor('#736b5e'),\n  placeholder: tinycolor('#b2aba1'),\n  linkColor: tinycolor('#A9BAC5'),\n  selectionColor: tinycolor('#fff'),\n  selectionBackgroundColor: tinycolor('#68C2D0'),\n};\n\nconst getDarkModeBackgroundColor = (\n  color: tinycolor.Instance\n): tinycolor.Instance | null => {\n  if (color.getAlpha() === 0) {\n    return null;\n  }\n\n  if (color.isDark()) {\n    return color;\n  }\n\n  return color.darken(90);\n};\n\nconst getDarkModeColor = (\n  color: tinycolor.Instance\n): tinycolor.Instance | null => {\n  if (color.getAlpha() === 0) {\n    return Theme.color;\n  }\n\n  if (color.isLight()) {\n    return color;\n  }\n\n  return color.lighten(50);\n};\n\nconst getDarkModeBorderColor = (\n  color: tinycolor.Instance\n): tinycolor.Instance | null => {\n  if (color.isLight()) {\n    return color.darken(70);\n  }\n\n  return color.lighten(30);\n};\n\nconst getDefaultCss = (): string => {\n  return dedent`\n    html, body, input, textarea, select, button {\n      color: ${Theme.color.toHexString()};\n      border-color: ${Theme.borderColor.toHexString()};\n      background-color: ${Theme.backgroundColor.toHexString()};\n    }\n\n    ::placeholder {\n      color: ${Theme.placeholder.toHexString()};\n    }\n\n    a {\n      color: ${Theme.linkColor.toHexString()};\n    }\n\n    ::selection {\n      color: ${Theme.selectionColor.toHexString()};\n      background: ${Theme.selectionBackgroundColor.toHexString()};\n    }\n  `;\n};\n\nconst getElementCss = (el: HTMLElement, selector: string): string => {\n  const computedStyle = getComputedStyle(el);\n  const isLinkOrButton = el.matches('a, button');\n\n  const color = getDarkModeColor(tinycolor(computedStyle.color));\n  const backgroundColor = getDarkModeBackgroundColor(\n    tinycolor(computedStyle.backgroundColor)\n  );\n  const borderColor = getDarkModeBorderColor(\n    tinycolor(computedStyle.borderColor)\n  );\n\n  if (!color && !backgroundColor) {\n    return '';\n  }\n\n  let css = `\\n\\n${selector} {`;\n\n  if (color) {\n    css += `\\n  color: ${color.toHexString()};`;\n  }\n\n  if (backgroundColor) {\n    css += `\\n  background-color: ${backgroundColor.toHexString()};`;\n  }\n\n  if (borderColor) {\n    css += `\\n  border-color: ${borderColor.toHexString()};`;\n  }\n\n  css += `\\n}`;\n\n  if (isLinkOrButton && (color || backgroundColor)) {\n    css += `\\n${selector}:hover {`;\n\n    if (color) {\n      css += `\\n  color: ${color.lighten(20).toHexString()};`;\n    }\n\n    if (backgroundColor) {\n      css += `\\n  background-color: ${backgroundColor\n        .darken(30)\n        .toHexString()};`;\n    }\n\n    css += `\\n}`;\n  }\n\n  return css;\n};\n\nconst getCss = (): string => {\n  const root = postcss.parse(getDefaultCss());\n  const all = document.querySelectorAll('body, body *:not(#stylebot)');\n  const evaluatedSelectors: Array<string> = [];\n\n  all.forEach(el => {\n    if (!el.closest('.stylebot')) {\n      const selector = getSelector(el as HTMLElement);\n\n      try {\n        if (evaluatedSelectors.indexOf(selector) === -1) {\n          const css = getElementCss(el as HTMLElement, selector);\n          if (css) {\n            root.append(css);\n          }\n\n          evaluatedSelectors.push(selector);\n        }\n      } catch (e) {\n        console.log(`Error analyzing ${selector}`, e);\n      }\n    }\n  });\n\n  root.walkDecls(decl => (decl.important = true));\n  return root.toString();\n};\n\nconst cacheCurrentUrl = (): void => {\n  window.stylebotDarkModeUrl = window.location.href;\n};\n\nconst didUrlChange = (): boolean => {\n  return window.stylebotDarkModeUrl !== window.location.href;\n};\n\nconst initDarkMode = () => {\n  const css = getCss();\n  const id = 'stylebot-dark-mode';\n  const el = document.getElementById(id);\n\n  if (el) {\n    el.innerHTML = css;\n    return;\n  }\n\n  const style = document.createElement('style');\n\n  style.type = 'text/css';\n  style.setAttribute('id', id);\n  style.appendChild(document.createTextNode(css));\n\n  document.documentElement.appendChild(style);\n};\n\nexport const apply = (forceApply = false): void => {\n  // Prevent duplicate calls for the same url if not force applying\n  if (!forceApply && !didUrlChange()) {\n    return;\n  }\n  cacheCurrentUrl();\n\n  if (document.readyState === 'complete') {\n    initDarkMode();\n  } else {\n    document.addEventListener('DOMContentLoaded', async () => {\n      initDarkMode();\n    });\n  }\n};\n\nexport const remove = (): void => {\n  document.getElementById('stylebot-dark-mode')?.remove();\n};\n", "id": "stylebot:src/dark-mode/index.ts:0c0d46d1-82b6-42c0-82e6-83c8b0121ade"}
{"path": "source/infrastructure/lib/step-functions.ts", "project_name": "distributed-load-testing-on-aws", "text": "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Chain, Choice, Condition, DISCARD, Fail, LogLevel, StateMachine, Succeed, Wait, WaitTime } from \"@aws-cdk/aws-stepfunctions\";\nimport { LambdaInvoke } from \"@aws-cdk/aws-stepfunctions-tasks\";\nimport { CfnResource, Construct, Duration, Tags } from \"@aws-cdk/core\";\nimport { Policy } from \"@aws-cdk/aws-iam\";\nimport { LogGroup, RetentionDays } from \"@aws-cdk/aws-logs\";\nimport { IFunction } from \"@aws-cdk/aws-lambda\";\n\n\n/**\n * CustomResourcesConstruct props\n * @interface TaskRunnerStepFunctionConstructProps\n */\nexport interface TaskRunnerStepFunctionConstructProps {\n    // State machine Lambda functions\n    readonly taskStatusChecker: IFunction;\n    readonly taskRunner: IFunction;\n    readonly resultsParser: IFunction;\n    readonly taskCanceler: IFunction;\n    // Solution ID\n    readonly solutionId: string;\n}\n\n/**\n * @class\n */\nexport class TaskRunnerStepFunctionConstruct extends Construct {\n    public taskRunnerStepFunctions: StateMachine;\n\n    constructor(scope: Construct, id: string, props: TaskRunnerStepFunctionConstructProps) {\n        super(scope, id);\n\n        const stepFunctionsLogGroup = new LogGroup(this, 'StepFunctionsLogGroup', {\n            retention: RetentionDays.ONE_YEAR\n        });\n        const stepFunctionsLogGroupResource = stepFunctionsLogGroup.node.defaultChild as CfnResource;\n        stepFunctionsLogGroupResource.addMetadata('cfn_nag', {\n            rules_to_suppress: [{\n                id: 'W84',\n                reason: 'KMS encryption unnecessary for log group'\n            }]\n        });\n\n        const done = new Succeed(this, 'Done');\n\n        const parseResult = new LambdaInvoke(this, 'Parse result', {\n            lambdaFunction: props.resultsParser\n        });\n        parseResult.next(done);\n\n        const checkWorkerStatus = new LambdaInvoke(this, 'Check worker status', {\n            lambdaFunction: props.taskStatusChecker,\n            inputPath: '$',\n            outputPath: '$.Payload'\n        });\n\n        const checkTaskStatus = new LambdaInvoke(this, 'Check task status', {\n            lambdaFunction: props.taskStatusChecker,\n            inputPath: '$',\n            outputPath: '$.Payload'\n        });\n\n        const waitTask = new Wait(this, 'Wait 1 minute - task status', {\n            comment: 'Wait 1 minute to check task status again',\n            time: WaitTime.duration(Duration.seconds(60))\n        });\n        waitTask.next(checkTaskStatus);\n\n        const allTasksDone = new Choice(this, 'Are all tasks done?');\n        allTasksDone.when(Condition.booleanEquals('$.isRunning', false), parseResult);\n        allTasksDone.otherwise(waitTask);\n\n        checkTaskStatus.next(allTasksDone);\n\n        const cancelTest = new LambdaInvoke(this, 'Cancel Test', {\n            lambdaFunction: props.taskCanceler,\n            inputPath: '$',\n            outputPath: '$.Payload',\n            resultPath: DISCARD\n        });\n        cancelTest.next(parseResult);\n\n        const waitWorker = new Wait(this, 'Wait 1 minute - worker status', {\n            comment: 'Wait 1 minute to check task status again',\n            time: WaitTime.duration(Duration.seconds(60))\n        });\n        waitWorker.next(checkWorkerStatus);\n\n        const runWorkers = new LambdaInvoke(this, 'Run workers', {\n            lambdaFunction: props.taskRunner,\n            inputPath: '$',\n            outputPath: '$.Payload'\n        });\n\n        const allWorkersLaunched = new Choice(this, 'Are all workers launched?');\n        allWorkersLaunched.when(Condition.booleanEquals('$.isRunning', false), cancelTest);\n        allWorkersLaunched.when(Condition.numberEquals('$.taskRunner.runTaskCount', 1), waitWorker);\n        allWorkersLaunched.when(Condition.numberEquals('$.taskRunner.runTaskCount', 0), waitTask);\n        allWorkersLaunched.otherwise(runWorkers);\n\n        runWorkers.next(allWorkersLaunched);\n\n        const runLeaderTask = new LambdaInvoke(this, 'Run leader task', {\n            lambdaFunction: props.taskRunner,\n            inputPath: '$',\n            outputPath: '$.Payload'\n        });\n        runLeaderTask.next(waitTask);\n\n        const allWorkersRunning = new Choice(this, 'Are all workers running?');\n        allWorkersRunning.when(Condition.numberEqualsJsonPath('$.numTasksRunning', '$.scenario.taskCount'), runLeaderTask);\n        allWorkersRunning.when(Condition.booleanEquals('$.isRunning', false), parseResult);\n        allWorkersRunning.otherwise(waitWorker);\n\n        checkWorkerStatus.next(allWorkersRunning);\n\n        const testIsStillRunning = new Fail(this, 'Test is still running', {\n            cause: 'The same test is already running.',\n            error: 'TestAlreadyRunning'\n        });\n\n        const noRunningTests = new Choice(this, 'No running tests');\n        noRunningTests.when(Condition.booleanEquals('$.isRunning', false), runWorkers);\n        noRunningTests.otherwise(testIsStillRunning);\n\n        const checkRunningTests = new LambdaInvoke(this, 'Check running tests', {\n            lambdaFunction: props.taskStatusChecker,\n            inputPath: '$',\n            outputPath: '$.Payload'\n        });\n        checkRunningTests.next(noRunningTests);\n\n        const definition = Chain\n            .start(checkRunningTests)\n\n        this.taskRunnerStepFunctions = new StateMachine(this, 'TaskRunnerStepFunctions', {\n            definition,\n            logs: {\n                destination: stepFunctionsLogGroup,\n                level: LogLevel.ALL,\n                includeExecutionData: false\n            }\n        });\n        const stepFunctionsRoleResource = this.taskRunnerStepFunctions.role.node.defaultChild as CfnResource;\n        stepFunctionsRoleResource.addMetadata('cfn_nag', {\n            rules_to_suppress: [{\n                id: 'W11',\n                reason: 'CloudWatch logs actions do not support resource level permissions'\n            }, {\n                id: 'W12',\n                reason: 'CloudWatch logs actions do not support resource level permissions'\n            }]\n        });\n        const stepFunctionPolicy = this.taskRunnerStepFunctions.role.node.findChild('DefaultPolicy') as Policy;\n        const policyResource = stepFunctionPolicy.node.defaultChild as CfnResource;\n        policyResource.addMetadata('cfn_nag', {\n            rules_to_suppress: [{\n                id: 'W12',\n                reason: 'CloudWatch logs actions do not support resource level permissions'\n            }]\n        });\n        Tags.of(this.taskRunnerStepFunctions).add('SolutionId', props.solutionId);\n    }\n}", "id": "distributed-load-testing-on-aws:source/infrastructure/lib/step-functions.ts:7fbe3a9b-8826-4655-b8a0-fa59403ebbeb"}
{"path": "source/debugpass.ts", "project_name": "webgl-operate", "text": "\n/* spellchecker: disable */\n\n\nimport { assert } from './auxiliaries';\n\nimport { NdcFillingTriangle } from './ndcfillingtriangle';\nimport { Program } from './program';\nimport { Shader } from './shader';\nimport { BlitPass } from './blitpass';\n\n/* spellchecker: enable */\n\n\n/**\n * This rendering pass specialized the blit pass by enforcing program-based blitting with a custom debug program.\n *\n * The debug pass can be used as follows:\n * ```\n * this.blit.framebuffer = this.intermediateFBO;\n * this.blit.frame(this.defaultFBO, null, null);\n * ```\n *\n * This pass also provides some basic debugging facilities, such as blitting the input as linearized depth (packed or\n * not packed) etc. An additional WebGL program will be initialized when a debug mode is specified for the first time.\n * The default program blit remains untouched in order to keep it as minimal as possible.\n */\nexport class DebugPass extends BlitPass {\n\n    /** @see {@link debug} */\n    protected _debug: DebugPass.Mode = DebugPass.Mode.Depth;\n\n\n    /**\n     * Uniform for passing the debug mode to the specialized blit program.\n     */\n    protected _uDebugMode: WebGLUniformLocation | undefined;\n\n    /**\n     * Uniform used to pass near and far data to the specialized blit program for linearization.\n     */\n    protected _uLinearize: WebGLUniformLocation | undefined;\n\n    /**\n     * If provided, depth will be linearized when depth data is blitted.\n     */\n    protected _near: GLfloat = 0.0;\n    protected _far: GLfloat = 0.0;\n\n    /**\n     * Used to create (on-demand) the blit program for program based blitting. This function can be specialized, e.g.,\n     * for creating custom blit passes such as the `DebugPass` {@link DebugPass}. This method assumes the program to be\n     * undefined.\n     */\n    protected createProgram(): boolean {\n        assert(this._program === undefined, `expected blit program to be undefined before its creation`);\n        const gl = this._context.gl;\n\n        const vert = new Shader(this._context, gl.VERTEX_SHADER, 'blit.vert (debug)');\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        vert.initialize(require('./shaders/blit.vert'));\n        const frag = new Shader(this._context, gl.FRAGMENT_SHADER, 'blit_debug.frag (debug)');\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        frag.initialize(require('./shaders/blit_debug.frag'));\n\n        this._program = new Program(this._context, 'DebugProgram');\n        this._program.initialize([vert, frag]);\n\n        if (!this._ndcTriangle.initialized) {\n            this._ndcTriangle.initialize();\n        }\n        this._program.attribute('a_vertex', this._ndcTriangle.vertexLocation);\n        this._program.link();\n\n        this._uSrcBounds = this._program.uniform('u_srcBounds');\n        this._uDstBounds = this._program.uniform('u_dstBounds');\n        this._uNearest = this._program.uniform('u_nearest');\n\n        this._uDebugMode = this._program.uniform('u_mode');\n        this._uLinearize = this._program.uniform('u_linearize');\n\n        this._program.bind();\n        gl.uniform1i(this._program.uniform('u_source'), 0);\n        gl.uniform1i(this._uDebugMode, this._debug);\n        this._program.unbind();\n\n        return this._program.valid;\n    }\n\n    /**\n     */\n    initialize(ndcTriangle?: NdcFillingTriangle): boolean {\n        const result = super.initialize(ndcTriangle);\n        this.enforceProgramBlit = true;\n\n        return result && this.createProgram();\n    }\n\n    /**\n     * Specializes this pass's uninitialization. Program and geometry resources are released (if allocated). Cached\n     * uniform and attribute locations are invalidated.\n     */\n    uninitialize(): void {\n        super.uninitialize();\n\n        this._uDebugMode = undefined;\n        this._uLinearize = undefined;\n    }\n\n    /**\n     * Specify a debug mode for blitting @see {@link Blitpass.Debug}. If the debug mode is set to anything except\n     * `Debug.None` for the first time, a specialized debug program will be created, initialized, and used for blit.\n     */\n    set debug(mode: DebugPass.Mode) {\n        this.assertInitialized();\n        if (this._debug === mode) {\n            return;\n        }\n        this._debug = mode;\n\n        if (this._program === undefined || !this._program.valid) {\n            return;\n        }\n\n        this._program.bind();\n        this._context.gl.uniform1i(this._uDebugMode, this._debug);\n        this._program.unbind();\n    }\n\n    /**\n     * If linearized is enabled, depth buffer blitting will use this near value for linearization.\n     */\n    set near(near: GLfloat | undefined) {\n        this._near = near ? near : 0.0;\n\n        if (this._program === undefined || !this._program.valid) {\n            return;\n        }\n\n        this._program.bind();\n        this._context.gl.uniform2f(this._uLinearize, this._near, this._far);\n        this._program.unbind();\n    }\n\n    /**\n     * If linearized is enabled, depth buffer blitting will use this far value for linearization.\n     */\n    set far(far: GLfloat | undefined) {\n        this._far = far ? far : 0.0;\n\n        if (this._program === undefined || !this._program.valid) {\n            return;\n        }\n\n        this._program.bind();\n        this._context.gl.uniform2f(this._uLinearize, this._near, this._far);\n        this._program.unbind();\n    }\n\n}\n\nexport namespace DebugPass {\n\n    export enum Mode {\n        None = 0,\n        Depth = 1,\n        DepthLinear = 2,\n        DepthPacked = 3,\n        DepthLinearPacked = 4,\n    }\n\n}\n", "id": "webgl-operate:source/debugpass.ts:1082c223-bc84-44e8-84a9-2bfd9c648460"}
{"path": "services/backend-api/client/src/features/feed/types/FeedArticle.ts", "project_name": "MonitoRSS", "text": "import {\n  array, InferType, object, string,\n} from 'yup';\n\nconst Placeholder = object({\n  name: string().required(),\n  value: string().defined(),\n}).required();\n\nexport const FeedArticlesSchema = object({\n  id: string().required(),\n  title: string().required(),\n  placeholders: object({\n    public: array(Placeholder).required(),\n    private: array(Placeholder).required(),\n    regex: array(Placeholder).required(),\n    raw: array(Placeholder).required(),\n  }).required(),\n}).required();\n\nexport type FeedArticle = InferType<typeof FeedArticlesSchema>;\n", "id": "MonitoRSS:services/backend-api/client/src/features/feed/types/FeedArticle.ts:e31f4d66-9d4e-4822-ae56-66708d2fc130"}
{"path": "src/workers/initWorkers.ts", "project_name": "SolanaNFTBot", "text": "import { Worker } from \"./types\";\nimport logger from \"lib/logger\";\nimport sleep from \"lib/sleep\";\n\nconst defaultInterval = 1000 * 60; // 1 minutes\n\nexport default async function initWorkers(\n  workers: Worker[],\n  delayInMs?: () => number,\n  interval: number = defaultInterval\n) {\n  if (!workers.length) {\n    throw \"Cannot init workers because no workers are configured: check env vars\";\n  }\n\n  logger.log(`starting ${workers.length} worker(s)...`);\n\n  const runWorkers = async () => {\n    const promises = workers.map(async (w) => {\n      if (delayInMs) {\n        await sleep(delayInMs());\n      }\n      try {\n        return await w.execute();\n      } catch (e) {\n        logger.warn(e);\n      }\n    });\n\n    return Promise.all(promises);\n  };\n\n  const _ = runWorkers();\n  setInterval(runWorkers, interval);\n}\n", "id": "SolanaNFTBot:src/workers/initWorkers.ts:c4fd08ab-0c25-4aa2-88b9-db21f006d95f"}
{"path": "dashboard/src/main/home/project-settings/BillingPage.tsx", "project_name": "porter", "text": "import React, { useContext, useEffect, useState } from \"react\";\nimport { CustomerProvider, PlanSelect } from \"@ironplans/react\";\nimport api from \"shared/api\";\nimport { Context } from \"shared/Context\";\n\nfunction BillingPage() {\n  const [customerToken, setCustomerToken] = useState(\"\");\n  const { currentProject, setCurrentError, queryUsage } = useContext(Context);\n\n  useEffect(() => {\n    let isSubscripted = true;\n    api\n      .getCustomerToken(\"<token>\", {}, { project_id: currentProject?.id })\n      .then((res) => {\n        if (isSubscripted) {\n          const token = res?.data?.token;\n          setCustomerToken(token);\n        }\n      })\n      .catch((err) => {\n        setCurrentError(err);\n      });\n    return () => {\n      isSubscripted = false;\n      queryUsage();\n    };\n  }, [currentProject?.id]);\n\n  return (\n    <div style={{ height: \"1000px\" }}>\n      <CustomerProvider token={customerToken}>\n        <PlanSelect\n          theme={{\n            base: {\n              customFont: \"Work Sans\",\n              fontFamily: '\"Work Sans\", sans-serif',\n              darkMode: \"on\",\n              colors: {\n                primary: \"rgba(97, 111, 238, 0.8)\",\n                secondary: \"rgb(103, 108, 124)\",\n                danger: \"rgb(227, 54, 109)\",\n                success: \"rgb(56, 168, 138)\",\n              },\n            },\n            card: {\n              backgroundColor: \"rgb(38, 40, 47)\",\n              boxShadow: \"rgb(0 0 0 / 33%) 0px 4px 15px 0px\",\n              borderRadius: \"8px\",\n              border: \"2px solid rgba(158, 180, 255, 0)\",\n            },\n            button: {\n              base: {\n                boxShadow: \"rgb(0 0 0 / 19%) 0px 2px 5px 0px\",\n                borderRadius: \"5px\",\n                fontSize: \"14px\",\n                fontWeight: \"500\",\n              },\n            },\n          }}\n        ></PlanSelect>\n      </CustomerProvider>\n    </div>\n  );\n}\n\nexport default BillingPage;\n", "id": "porter:dashboard/src/main/home/project-settings/BillingPage.tsx:fc0488fe-6d21-40b3-be9b-8ed008f81e6f"}
{"path": "src/helpers/off.ts", "project_name": "inkline", "text": "export function removeEventListenerBinding (element: HTMLElement, event: string, handler: any): void {\n    if (element && event) {\n        element.removeEventListener(event, handler, false);\n    }\n}\n\nexport function detachEventBinding (element: HTMLElement, event: string, handler: any): void {\n    if (element && event) {\n        (element as any).detachEvent('on' + event, handler);\n    }\n}\n\nexport const _off = () => {\n    if (typeof window === 'undefined') {\n        return () => {};\n    }\n\n    if ((window as any).document.removeEventListener) {\n        return removeEventListenerBinding;\n    } else {\n        return detachEventBinding;\n    }\n};\n\nexport const off = _off();\n", "id": "inkline:src/helpers/off.ts:ce9354af-5eb5-4271-a435-5f9d27e3cfcb"}
{"path": "src/resolveMain.ts", "project_name": "ts-node-dev", "text": "const resolve = require('resolve')\n\ntype PNPVersions = NodeJS.ProcessVersions & { pnp: boolean }\n\nfunction resolveRequest(req: string) {\n  // The `resolve` package is prebuilt through ncc, which prevents\n  // PnP from being able to inject itself into it. To circumvent\n  // this, we simply use PnP directly when available.\n\n  if ((process.versions as PNPVersions).pnp) {\n    const { resolveRequest } = require(`pnpapi`)\n    return resolveRequest(req, process.cwd() + '/')\n  } else {\n    const opts = {\n      basedir: process.cwd(),\n      paths: [process.cwd()],\n    }\n    return resolve.sync(req, opts)\n  }\n}\n\nexport const resolveMain = function (main: string) {\n  try {\n    return resolveRequest(main + '.ts')\n  } catch (e) {\n    try {\n      return resolveRequest(main + '/index.ts')\n    } catch (e) {\n      return resolveRequest(main)\n    }\n  }\n}\n", "id": "ts-node-dev:src/resolveMain.ts:55aa5376-2c38-4fa9-bda5-6ea1cda89799"}
{"path": "types/ojnbox/index.d.ts", "project_name": "100-Oracle-JET-Theme-Builder-v11", "text": "import { GlobalProps } from 'ojs/ojvcomponent';\nimport { ComponentChildren } from 'preact';\nimport { DataProvider } from '../ojdataprovider';\nimport { dvtBaseComponent, dvtBaseComponentEventMap, dvtBaseComponentSettableProperties } from '../ojdvt-base';\nimport { JetElement, JetSettableProperties, JetElementCustomEvent, JetSetPropertyType } from '..';\nexport interface ojNBox<K, D extends ojNBox.Node<K> | any> extends dvtBaseComponent<ojNBoxSettableProperties<K, D>> {\n    animationOnDataChange?: 'auto' | 'none';\n    animationOnDisplay?: 'auto' | 'none';\n    as?: string;\n    cellContent?: 'counts' | 'auto';\n    cellMaximize?: 'off' | 'on';\n    cells?: Promise<ojNBox.Cell[]> | null;\n    columns: Promise<ojNBox.Column[]> | null;\n    columnsTitle?: string;\n    countLabel?: ((context: ojNBox.CountLabelContext) => (string | null));\n    data: DataProvider<K, D> | null;\n    groupAttributes?: 'color' | 'indicatorColor' | 'indicatorIconColor' | 'indicatorIconPattern' | 'indicatorIconShape';\n    groupBehavior?: 'acrossCells' | 'none' | 'withinCell';\n    hiddenCategories?: string[];\n    highlightMatch?: 'any' | 'all';\n    highlightedCategories?: string[];\n    hoverBehavior?: 'dim' | 'none';\n    labelTruncation?: 'ifRequired' | 'on';\n    maximizedColumn?: string;\n    maximizedRow?: string;\n    otherColor?: string;\n    otherThreshold?: number;\n    rows: Promise<ojNBox.Row[]> | null;\n    rowsTitle?: string;\n    selection?: K[];\n    selectionMode?: 'none' | 'single' | 'multiple';\n    styleDefaults?: {\n        animationDuration?: number;\n        cellDefaults?: {\n            labelHalign?: 'center' | 'end' | 'start';\n            labelStyle?: Partial<CSSStyleDeclaration>;\n            maximizedSvgStyle?: Partial<CSSStyleDeclaration>;\n            minimizedSvgStyle?: Partial<CSSStyleDeclaration>;\n            showCount?: 'on' | 'off' | 'auto';\n            svgStyle?: Partial<CSSStyleDeclaration>;\n        };\n        columnLabelStyle?: Partial<CSSStyleDeclaration>;\n        columnsTitleStyle?: Partial<CSSStyleDeclaration>;\n        hoverBehaviorDelay?: number;\n        nodeDefaults?: {\n            borderColor?: string;\n            borderWidth?: number;\n            color?: string;\n            iconDefaults?: {\n                background?: 'neutral' | 'red' | 'orange' | 'forest' | 'green' | 'teal' | 'blue' | 'slate' | 'pink' | 'mauve' | 'purple' | 'lilac' | 'gray' | string;\n                borderColor?: string;\n                borderRadius?: string;\n                borderWidth?: number;\n                color?: string;\n                height?: number;\n                opacity?: number;\n                pattern?: 'smallChecker' | 'smallCrosshatch' | 'smallDiagonalLeft' | 'smallDiagonalRight' | 'smallDiamond' | 'smallTriangle' | 'largeChecker' | 'largeCrosshatch' |\n                   'largeDiagonalLeft' | 'largeDiagonalRight' | 'largeDiamond' | 'largeTriangle' | 'none';\n                shape?: 'circle' | 'ellipse' | 'square' | 'plus' | 'diamond' | 'triangleUp' | 'triangleDown' | 'human' | 'rectangle' | 'star' | string;\n                source?: string;\n                width?: number;\n            };\n            indicatorColor?: string;\n            indicatorIconDefaults?: {\n                borderColor?: string;\n                borderRadius?: string;\n                borderWidth?: number;\n                color?: string;\n                height?: number;\n                opacity?: number;\n                pattern?: 'smallChecker' | 'smallCrosshatch' | 'smallDiagonalLeft' | 'smallDiagonalRight' | 'smallDiamond' | 'smallTriangle' | 'largeChecker' | 'largeCrosshatch' |\n                   'largeDiagonalLeft' | 'largeDiagonalRight' | 'largeDiamond' | 'largeTriangle' | 'none';\n                shape?: 'circle' | 'ellipse' | 'square' | 'plus' | 'diamond' | 'triangleUp' | 'triangleDown' | 'human' | 'rectangle' | 'star' | string;\n                source?: string;\n                width?: number;\n            };\n            labelStyle?: Partial<CSSStyleDeclaration>;\n            secondaryLabelStyle?: Partial<CSSStyleDeclaration>;\n        };\n        rowLabelStyle?: Partial<CSSStyleDeclaration>;\n        rowsTitleStyle?: Partial<CSSStyleDeclaration>;\n    };\n    tooltip?: {\n        renderer: ((context: ojNBox.TooltipContext<K>) => ({\n            insert: Element | string;\n        } | {\n            preventDefault: boolean;\n        })) | null;\n    };\n    touchResponse?: 'touchStart' | 'auto';\n    translations: {\n        componentName?: string;\n        highlightedCount?: string;\n        labelAdditionalData?: string;\n        labelAndValue?: string;\n        labelClearSelection?: string;\n        labelCountWithTotal?: string;\n        labelDataVisualization?: string;\n        labelGroup?: string;\n        labelInvalidData?: string;\n        labelNoData?: string;\n        labelOther?: string;\n        labelSize?: string;\n        stateCollapsed?: string;\n        stateDrillable?: string;\n        stateExpanded?: string;\n        stateHidden?: string;\n        stateIsolated?: string;\n        stateMaximized?: string;\n        stateMinimized?: string;\n        stateSelected?: string;\n        stateUnselected?: string;\n        stateVisible?: string;\n    };\n    addEventListener<T extends keyof ojNBoxEventMap<K, D>>(type: T, listener: (this: HTMLElement, ev: ojNBoxEventMap<K, D>[T]) => any, options?: (boolean | AddEventListenerOptions)): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: (boolean | AddEventListenerOptions)): void;\n    getProperty<T extends keyof ojNBoxSettableProperties<K, D>>(property: T): ojNBox<K, D>[T];\n    getProperty(property: string): any;\n    setProperty<T extends keyof ojNBoxSettableProperties<K, D>>(property: T, value: ojNBoxSettableProperties<K, D>[T]): void;\n    setProperty<T extends string>(property: T, value: JetSetPropertyType<T, ojNBoxSettableProperties<K, D>>): void;\n    setProperties(properties: ojNBoxSettablePropertiesLenient<K, D>): void;\n    getContextByNode(node: Element): ojNBox.NodeContext<K> | ojNBox.CellContext | ojNBox.DialogContext | ojNBox.GroupNodeContext | null;\n}\nexport namespace ojNBox {\n    // tslint:disable-next-line interface-over-type-literal\n    type animationOnDataChangeChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"animationOnDataChange\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type animationOnDisplayChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"animationOnDisplay\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type asChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"as\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type cellContentChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"cellContent\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type cellMaximizeChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"cellMaximize\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type cellsChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"cells\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type columnsChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"columns\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type columnsTitleChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"columnsTitle\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type countLabelChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"countLabel\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type dataChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"data\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type groupAttributesChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"groupAttributes\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type groupBehaviorChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"groupBehavior\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type hiddenCategoriesChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"hiddenCategories\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type highlightMatchChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"highlightMatch\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type highlightedCategoriesChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"highlightedCategories\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type hoverBehaviorChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"hoverBehavior\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type labelTruncationChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"labelTruncation\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type maximizedColumnChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"maximizedColumn\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type maximizedRowChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"maximizedRow\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type otherColorChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"otherColor\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type otherThresholdChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"otherThreshold\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type rowsChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"rows\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type rowsTitleChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"rowsTitle\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type selectionChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"selection\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type selectionModeChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"selectionMode\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type styleDefaultsChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"styleDefaults\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type tooltipChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"tooltip\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type touchResponseChanged<K, D extends Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"touchResponse\"]>;\n    //------------------------------------------------------------\n    // Start: generated events for inherited properties\n    //------------------------------------------------------------\n    // tslint:disable-next-line interface-over-type-literal\n    type trackResizeChanged<K, D extends Node<K> | any> = dvtBaseComponent.trackResizeChanged<ojNBoxSettableProperties<K, D>>;\n    // tslint:disable-next-line interface-over-type-literal\n    type Cell = {\n        column: string;\n        label?: string;\n        labelHalign?: string;\n        labelStyle?: Partial<CSSStyleDeclaration>;\n        maximizedSvgClassName?: string;\n        maximizedSvgStyle?: Partial<CSSStyleDeclaration>;\n        minimizedSvgClassName?: string;\n        minimizedSvgStyle?: Partial<CSSStyleDeclaration>;\n        row: string;\n        shortDesc?: string;\n        showCount?: 'on' | 'off' | 'auto';\n        svgClassName?: string;\n        svgStyle?: Partial<CSSStyleDeclaration>;\n    };\n    // tslint:disable-next-line interface-over-type-literal\n    type CellContext = {\n        column: string;\n        row: string;\n        subId: 'oj-nbox-cell';\n    };\n    // tslint:disable-next-line interface-over-type-literal\n    type Column = {\n        id: string;\n        label?: string;\n        labelStyle?: Partial<CSSStyleDeclaration>;\n    };\n    // tslint:disable-next-line interface-over-type-literal\n    type CountLabelContext = {\n        column: string;\n        highlightedNodeCount: number;\n        nodeCount: number;\n        row: string;\n        totalNodeCount: number;\n    };\n    // tslint:disable-next-line interface-over-type-literal\n    type DialogContext = {\n        subId: 'oj-nbox-dialog';\n    };\n    // tslint:disable-next-line interface-over-type-literal\n    type GroupNodeContext = {\n        column: string;\n        groupCategory: string;\n        row: string;\n        subId: 'oj-nbox-group-node';\n    };\n    // tslint:disable-next-line interface-over-type-literal\n    type Node<K> = {\n        borderColor?: string;\n        borderWidth?: number;\n        categories?: string[];\n        color?: string;\n        column: string;\n        groupCategory?: string;\n        icon?: {\n            background?: 'neutral' | 'red' | 'orange' | 'forest' | 'green' | 'teal' | 'mauve' | 'purple';\n            borderColor?: string;\n            borderRadius?: string;\n            borderWidth?: number;\n            color?: string;\n            height?: number;\n            initials?: string;\n            opacity?: number;\n            pattern?: 'largeChecker' | 'largeCrosshatch' | 'largeDiagonalLeft' | 'largeDiagonalRight' | 'largeDiamond' | 'largeTriangle' | 'none' | 'smallChecker' | 'smallCrosshatch' |\n               'smallDiagonalLeft' | 'smallDiagonalRight' | 'smallDiamond' | 'smallTriangle';\n            shape?: 'circle' | 'diamond' | 'ellipse' | 'human' | 'plus' | 'rectangle' | 'square' | 'star' | 'triangleDown' | 'triangleUp' | string;\n            source?: string;\n            svgClassName?: string;\n            svgStyle?: Partial<CSSStyleDeclaration>;\n            width?: number;\n        };\n        id?: K;\n        indicatorColor?: string;\n        indicatorIcon?: {\n            borderColor?: string;\n            borderRadius?: string;\n            borderWidth?: number;\n            color?: string;\n            height?: number;\n            opacity?: number;\n            pattern?: 'largeChecker' | 'largeCrosshatch' | 'largeDiagonalLeft' | 'largeDiagonalRight' | 'largeDiamond' | 'largeTriangle' | 'none' | 'smallChecker' | 'smallCrosshatch' |\n               'smallDiagonalLeft' | 'smallDiagonalRight' | 'smallDiamond' | 'smallTriangle';\n            shape?: 'circle' | 'diamond' | 'ellipse' | 'human' | 'plus' | 'rectangle' | 'square' | 'star' | 'triangleDown' | 'triangleUp' | string;\n            source?: string;\n            svgClassName?: string;\n            svgStyle?: Partial<CSSStyleDeclaration>;\n            width?: number;\n        };\n        label?: string;\n        row: string;\n        secondaryLabel?: string;\n        shortDesc?: (string | ((context: NodeShortDescContext<K>) => string));\n        svgClassName?: string;\n        svgStyle?: Partial<CSSStyleDeclaration>;\n        xPercentage?: number;\n        yPercentage?: number;\n    };\n    // tslint:disable-next-line interface-over-type-literal\n    type NodeContext<K> = {\n        id: K;\n        subId: 'oj-nbox-node';\n    };\n    // tslint:disable-next-line interface-over-type-literal\n    type NodeShortDescContext<K> = {\n        column: string;\n        id: K;\n        label: string;\n        row: string;\n        secondaryLabel: string;\n    };\n    // tslint:disable-next-line interface-over-type-literal\n    type NodeTemplateContext = {\n        componentElement: Element;\n        data: object;\n        index: number;\n        key: any;\n    };\n    // tslint:disable-next-line interface-over-type-literal\n    type Row = {\n        id: string;\n        label?: string;\n        labelStyle?: Partial<CSSStyleDeclaration>;\n    };\n    // tslint:disable-next-line interface-over-type-literal\n    type TooltipContext<K> = {\n        color: string;\n        column: string;\n        componentElement: Element;\n        id: K;\n        indicatorColor: string;\n        label: string;\n        parentElement: Element;\n        row: string;\n        secondaryLabel: string;\n    };\n}\nexport interface ojNBoxEventMap<K, D extends ojNBox.Node<K> | any> extends dvtBaseComponentEventMap<ojNBoxSettableProperties<K, D>> {\n    'animationOnDataChangeChanged': JetElementCustomEvent<ojNBox<K, D>[\"animationOnDataChange\"]>;\n    'animationOnDisplayChanged': JetElementCustomEvent<ojNBox<K, D>[\"animationOnDisplay\"]>;\n    'asChanged': JetElementCustomEvent<ojNBox<K, D>[\"as\"]>;\n    'cellContentChanged': JetElementCustomEvent<ojNBox<K, D>[\"cellContent\"]>;\n    'cellMaximizeChanged': JetElementCustomEvent<ojNBox<K, D>[\"cellMaximize\"]>;\n    'cellsChanged': JetElementCustomEvent<ojNBox<K, D>[\"cells\"]>;\n    'columnsChanged': JetElementCustomEvent<ojNBox<K, D>[\"columns\"]>;\n    'columnsTitleChanged': JetElementCustomEvent<ojNBox<K, D>[\"columnsTitle\"]>;\n    'countLabelChanged': JetElementCustomEvent<ojNBox<K, D>[\"countLabel\"]>;\n    'dataChanged': JetElementCustomEvent<ojNBox<K, D>[\"data\"]>;\n    'groupAttributesChanged': JetElementCustomEvent<ojNBox<K, D>[\"groupAttributes\"]>;\n    'groupBehaviorChanged': JetElementCustomEvent<ojNBox<K, D>[\"groupBehavior\"]>;\n    'hiddenCategoriesChanged': JetElementCustomEvent<ojNBox<K, D>[\"hiddenCategories\"]>;\n    'highlightMatchChanged': JetElementCustomEvent<ojNBox<K, D>[\"highlightMatch\"]>;\n    'highlightedCategoriesChanged': JetElementCustomEvent<ojNBox<K, D>[\"highlightedCategories\"]>;\n    'hoverBehaviorChanged': JetElementCustomEvent<ojNBox<K, D>[\"hoverBehavior\"]>;\n    'labelTruncationChanged': JetElementCustomEvent<ojNBox<K, D>[\"labelTruncation\"]>;\n    'maximizedColumnChanged': JetElementCustomEvent<ojNBox<K, D>[\"maximizedColumn\"]>;\n    'maximizedRowChanged': JetElementCustomEvent<ojNBox<K, D>[\"maximizedRow\"]>;\n    'otherColorChanged': JetElementCustomEvent<ojNBox<K, D>[\"otherColor\"]>;\n    'otherThresholdChanged': JetElementCustomEvent<ojNBox<K, D>[\"otherThreshold\"]>;\n    'rowsChanged': JetElementCustomEvent<ojNBox<K, D>[\"rows\"]>;\n    'rowsTitleChanged': JetElementCustomEvent<ojNBox<K, D>[\"rowsTitle\"]>;\n    'selectionChanged': JetElementCustomEvent<ojNBox<K, D>[\"selection\"]>;\n    'selectionModeChanged': JetElementCustomEvent<ojNBox<K, D>[\"selectionMode\"]>;\n    'styleDefaultsChanged': JetElementCustomEvent<ojNBox<K, D>[\"styleDefaults\"]>;\n    'tooltipChanged': JetElementCustomEvent<ojNBox<K, D>[\"tooltip\"]>;\n    'touchResponseChanged': JetElementCustomEvent<ojNBox<K, D>[\"touchResponse\"]>;\n    'trackResizeChanged': JetElementCustomEvent<ojNBox<K, D>[\"trackResize\"]>;\n}\nexport interface ojNBoxSettableProperties<K, D extends ojNBox.Node<K> | any> extends dvtBaseComponentSettableProperties {\n    animationOnDataChange?: 'auto' | 'none';\n    animationOnDisplay?: 'auto' | 'none';\n    as?: string;\n    cellContent?: 'counts' | 'auto';\n    cellMaximize?: 'off' | 'on';\n    cells?: ojNBox.Cell[] | Promise<ojNBox.Cell[]> | null;\n    columns: ojNBox.Column[] | Promise<ojNBox.Column[]> | null;\n    columnsTitle?: string;\n    countLabel?: ((context: ojNBox.CountLabelContext) => (string | null));\n    data: DataProvider<K, D> | null;\n    groupAttributes?: 'color' | 'indicatorColor' | 'indicatorIconColor' | 'indicatorIconPattern' | 'indicatorIconShape';\n    groupBehavior?: 'acrossCells' | 'none' | 'withinCell';\n    hiddenCategories?: string[];\n    highlightMatch?: 'any' | 'all';\n    highlightedCategories?: string[];\n    hoverBehavior?: 'dim' | 'none';\n    labelTruncation?: 'ifRequired' | 'on';\n    maximizedColumn?: string;\n    maximizedRow?: string;\n    otherColor?: string;\n    otherThreshold?: number;\n    rows: ojNBox.Row[] | Promise<ojNBox.Row[]> | null;\n    rowsTitle?: string;\n    selection?: K[];\n    selectionMode?: 'none' | 'single' | 'multiple';\n    styleDefaults?: {\n        animationDuration?: number;\n        cellDefaults?: {\n            labelHalign?: 'center' | 'end' | 'start';\n            labelStyle?: Partial<CSSStyleDeclaration>;\n            maximizedSvgStyle?: Partial<CSSStyleDeclaration>;\n            minimizedSvgStyle?: Partial<CSSStyleDeclaration>;\n            showCount?: 'on' | 'off' | 'auto';\n            svgStyle?: Partial<CSSStyleDeclaration>;\n        };\n        columnLabelStyle?: Partial<CSSStyleDeclaration>;\n        columnsTitleStyle?: Partial<CSSStyleDeclaration>;\n        hoverBehaviorDelay?: number;\n        nodeDefaults?: {\n            borderColor?: string;\n            borderWidth?: number;\n            color?: string;\n            iconDefaults?: {\n                background?: 'neutral' | 'red' | 'orange' | 'forest' | 'green' | 'teal' | 'blue' | 'slate' | 'pink' | 'mauve' | 'purple' | 'lilac' | 'gray' | string;\n                borderColor?: string;\n                borderRadius?: string;\n                borderWidth?: number;\n                color?: string;\n                height?: number;\n                opacity?: number;\n                pattern?: 'smallChecker' | 'smallCrosshatch' | 'smallDiagonalLeft' | 'smallDiagonalRight' | 'smallDiamond' | 'smallTriangle' | 'largeChecker' | 'largeCrosshatch' |\n                   'largeDiagonalLeft' | 'largeDiagonalRight' | 'largeDiamond' | 'largeTriangle' | 'none';\n                shape?: 'circle' | 'ellipse' | 'square' | 'plus' | 'diamond' | 'triangleUp' | 'triangleDown' | 'human' | 'rectangle' | 'star' | string;\n                source?: string;\n                width?: number;\n            };\n            indicatorColor?: string;\n            indicatorIconDefaults?: {\n                borderColor?: string;\n                borderRadius?: string;\n                borderWidth?: number;\n                color?: string;\n                height?: number;\n                opacity?: number;\n                pattern?: 'smallChecker' | 'smallCrosshatch' | 'smallDiagonalLeft' | 'smallDiagonalRight' | 'smallDiamond' | 'smallTriangle' | 'largeChecker' | 'largeCrosshatch' |\n                   'largeDiagonalLeft' | 'largeDiagonalRight' | 'largeDiamond' | 'largeTriangle' | 'none';\n                shape?: 'circle' | 'ellipse' | 'square' | 'plus' | 'diamond' | 'triangleUp' | 'triangleDown' | 'human' | 'rectangle' | 'star' | string;\n                source?: string;\n                width?: number;\n            };\n            labelStyle?: Partial<CSSStyleDeclaration>;\n            secondaryLabelStyle?: Partial<CSSStyleDeclaration>;\n        };\n        rowLabelStyle?: Partial<CSSStyleDeclaration>;\n        rowsTitleStyle?: Partial<CSSStyleDeclaration>;\n    };\n    tooltip?: {\n        renderer: ((context: ojNBox.TooltipContext<K>) => ({\n            insert: Element | string;\n        } | {\n            preventDefault: boolean;\n        })) | null;\n    };\n    touchResponse?: 'touchStart' | 'auto';\n    translations: {\n        componentName?: string;\n        highlightedCount?: string;\n        labelAdditionalData?: string;\n        labelAndValue?: string;\n        labelClearSelection?: string;\n        labelCountWithTotal?: string;\n        labelDataVisualization?: string;\n        labelGroup?: string;\n        labelInvalidData?: string;\n        labelNoData?: string;\n        labelOther?: string;\n        labelSize?: string;\n        stateCollapsed?: string;\n        stateDrillable?: string;\n        stateExpanded?: string;\n        stateHidden?: string;\n        stateIsolated?: string;\n        stateMaximized?: string;\n        stateMinimized?: string;\n        stateSelected?: string;\n        stateUnselected?: string;\n        stateVisible?: string;\n    };\n}\nexport interface ojNBoxSettablePropertiesLenient<K, D extends ojNBox.Node<K> | any> extends Partial<ojNBoxSettableProperties<K, D>> {\n    [key: string]: any;\n}\nexport interface ojNBoxNode<K = any> extends dvtBaseComponent<ojNBoxNodeSettableProperties<K>> {\n    borderColor?: string;\n    borderWidth?: number;\n    categories?: string[];\n    color?: string;\n    column: string;\n    groupCategory?: string;\n    icon?: {\n        background?: 'neutral' | 'red' | 'orange' | 'forest' | 'green' | 'teal' | 'blue' | 'slate' | 'mauve' | 'pink' | 'purple' | 'lilac' | 'gray' | string;\n        borderColor?: string;\n        borderRadius?: string;\n        borderWidth?: number;\n        color?: string;\n        height?: number | null;\n        initials?: string;\n        opacity?: number;\n        pattern?: 'largeChecker' | 'largeCrosshatch' | 'largeDiagonalLeft' | 'largeDiagonalRight' | 'largeDiamond' | 'largeTriangle' | 'none' | 'mallChecker' | 'smallCrosshatch' |\n           'smallDiagonalLeft' | 'smallDiagonalRight' | 'smallDiamond' | 'smallTriangle';\n        shape?: 'circle' | 'diamond' | 'ellipse' | 'human' | 'plus' | 'rectangle' | 'square' | 'star' | 'triangleDown' | 'triangleUp' | string;\n        source?: string;\n        svgClassName?: string;\n        svgStyle?: Partial<CSSStyleDeclaration>;\n        width?: number | null;\n    };\n    indicatorColor?: string;\n    indicatorIcon?: {\n        borderColor?: string;\n        borderRadius?: string;\n        borderWidth?: number;\n        color?: string;\n        height?: number | null;\n        opacity?: number;\n        pattern?: 'largeChecker' | 'largeCrosshatch' | 'largeDiagonalLeft' | 'largeDiagonalRight' | 'largeDiamond' | 'largeTriangle' | 'none' | 'smallChecker' | 'smallCrosshatch' |\n           'smallDiagonalLeft' | 'smallDiagonalRight' | 'smallDiamond' | 'smallTriangle';\n        shape?: 'circle' | 'diamond' | 'ellipse' | 'human' | 'plus' | 'rectangle' | 'square' | 'star' | 'triangleDown' | 'triangleUp' | string;\n        source?: string | null;\n        svgClassName?: string;\n        svgStyle?: Partial<CSSStyleDeclaration> | null;\n        width?: number | null;\n    };\n    label?: string;\n    row: string;\n    secondaryLabel?: string;\n    shortDesc?: (string | ((context: ojNBox.NodeShortDescContext<K>) => string));\n    svgClassName?: string;\n    svgStyle?: Partial<CSSStyleDeclaration> | null;\n    xPercentage?: number | null;\n    yPercentage?: number | null;\n    addEventListener<T extends keyof ojNBoxNodeEventMap<K>>(type: T, listener: (this: HTMLElement, ev: ojNBoxNodeEventMap<K>[T]) => any, options?: (boolean | AddEventListenerOptions)): void;\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: (boolean | AddEventListenerOptions)): void;\n    getProperty<T extends keyof ojNBoxNodeSettableProperties<K>>(property: T): ojNBoxNode<K>[T];\n    getProperty(property: string): any;\n    setProperty<T extends keyof ojNBoxNodeSettableProperties<K>>(property: T, value: ojNBoxNodeSettableProperties<K>[T]): void;\n    setProperty<T extends string>(property: T, value: JetSetPropertyType<T, ojNBoxNodeSettableProperties<K>>): void;\n    setProperties(properties: ojNBoxNodeSettablePropertiesLenient<K>): void;\n}\nexport namespace ojNBoxNode {\n    // tslint:disable-next-line interface-over-type-literal\n    type borderColorChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"borderColor\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type borderWidthChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"borderWidth\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type categoriesChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"categories\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type colorChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"color\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type columnChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"column\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type groupCategoryChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"groupCategory\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type iconChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"icon\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type indicatorColorChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"indicatorColor\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type indicatorIconChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"indicatorIcon\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type labelChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"label\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type rowChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"row\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type secondaryLabelChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"secondaryLabel\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type shortDescChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"shortDesc\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type svgClassNameChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"svgClassName\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type svgStyleChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"svgStyle\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type xPercentageChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"xPercentage\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type yPercentageChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"yPercentage\"]>;\n}\nexport interface ojNBoxNodeEventMap<K = any> extends dvtBaseComponentEventMap<ojNBoxNodeSettableProperties<K>> {\n    'borderColorChanged': JetElementCustomEvent<ojNBoxNode<K>[\"borderColor\"]>;\n    'borderWidthChanged': JetElementCustomEvent<ojNBoxNode<K>[\"borderWidth\"]>;\n    'categoriesChanged': JetElementCustomEvent<ojNBoxNode<K>[\"categories\"]>;\n    'colorChanged': JetElementCustomEvent<ojNBoxNode<K>[\"color\"]>;\n    'columnChanged': JetElementCustomEvent<ojNBoxNode<K>[\"column\"]>;\n    'groupCategoryChanged': JetElementCustomEvent<ojNBoxNode<K>[\"groupCategory\"]>;\n    'iconChanged': JetElementCustomEvent<ojNBoxNode<K>[\"icon\"]>;\n    'indicatorColorChanged': JetElementCustomEvent<ojNBoxNode<K>[\"indicatorColor\"]>;\n    'indicatorIconChanged': JetElementCustomEvent<ojNBoxNode<K>[\"indicatorIcon\"]>;\n    'labelChanged': JetElementCustomEvent<ojNBoxNode<K>[\"label\"]>;\n    'rowChanged': JetElementCustomEvent<ojNBoxNode<K>[\"row\"]>;\n    'secondaryLabelChanged': JetElementCustomEvent<ojNBoxNode<K>[\"secondaryLabel\"]>;\n    'shortDescChanged': JetElementCustomEvent<ojNBoxNode<K>[\"shortDesc\"]>;\n    'svgClassNameChanged': JetElementCustomEvent<ojNBoxNode<K>[\"svgClassName\"]>;\n    'svgStyleChanged': JetElementCustomEvent<ojNBoxNode<K>[\"svgStyle\"]>;\n    'xPercentageChanged': JetElementCustomEvent<ojNBoxNode<K>[\"xPercentage\"]>;\n    'yPercentageChanged': JetElementCustomEvent<ojNBoxNode<K>[\"yPercentage\"]>;\n}\nexport interface ojNBoxNodeSettableProperties<K = any> extends dvtBaseComponentSettableProperties {\n    borderColor?: string;\n    borderWidth?: number;\n    categories?: string[];\n    color?: string;\n    column: string;\n    groupCategory?: string;\n    icon?: {\n        background?: 'neutral' | 'red' | 'orange' | 'forest' | 'green' | 'teal' | 'blue' | 'slate' | 'mauve' | 'pink' | 'purple' | 'lilac' | 'gray' | string;\n        borderColor?: string;\n        borderRadius?: string;\n        borderWidth?: number;\n        color?: string;\n        height?: number | null;\n        initials?: string;\n        opacity?: number;\n        pattern?: 'largeChecker' | 'largeCrosshatch' | 'largeDiagonalLeft' | 'largeDiagonalRight' | 'largeDiamond' | 'largeTriangle' | 'none' | 'mallChecker' | 'smallCrosshatch' |\n           'smallDiagonalLeft' | 'smallDiagonalRight' | 'smallDiamond' | 'smallTriangle';\n        shape?: 'circle' | 'diamond' | 'ellipse' | 'human' | 'plus' | 'rectangle' | 'square' | 'star' | 'triangleDown' | 'triangleUp' | string;\n        source?: string;\n        svgClassName?: string;\n        svgStyle?: Partial<CSSStyleDeclaration>;\n        width?: number | null;\n    };\n    indicatorColor?: string;\n    indicatorIcon?: {\n        borderColor?: string;\n        borderRadius?: string;\n        borderWidth?: number;\n        color?: string;\n        height?: number | null;\n        opacity?: number;\n        pattern?: 'largeChecker' | 'largeCrosshatch' | 'largeDiagonalLeft' | 'largeDiagonalRight' | 'largeDiamond' | 'largeTriangle' | 'none' | 'smallChecker' | 'smallCrosshatch' |\n           'smallDiagonalLeft' | 'smallDiagonalRight' | 'smallDiamond' | 'smallTriangle';\n        shape?: 'circle' | 'diamond' | 'ellipse' | 'human' | 'plus' | 'rectangle' | 'square' | 'star' | 'triangleDown' | 'triangleUp' | string;\n        source?: string | null;\n        svgClassName?: string;\n        svgStyle?: Partial<CSSStyleDeclaration> | null;\n        width?: number | null;\n    };\n    label?: string;\n    row: string;\n    secondaryLabel?: string;\n    shortDesc?: (string | ((context: ojNBox.NodeShortDescContext<K>) => string));\n    svgClassName?: string;\n    svgStyle?: Partial<CSSStyleDeclaration> | null;\n    xPercentage?: number | null;\n    yPercentage?: number | null;\n}\nexport interface ojNBoxNodeSettablePropertiesLenient<K = any> extends Partial<ojNBoxNodeSettableProperties<K>> {\n    [key: string]: any;\n}\nexport type NBoxElement<K, D extends ojNBox.Node<K> | any> = ojNBox<K, D>;\nexport type NBoxNodeElement<K = any> = ojNBoxNode<K>;\nexport namespace NBoxElement {\n    // tslint:disable-next-line interface-over-type-literal\n    type animationOnDataChangeChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"animationOnDataChange\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type animationOnDisplayChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"animationOnDisplay\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type asChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"as\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type cellContentChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"cellContent\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type cellMaximizeChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"cellMaximize\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type cellsChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"cells\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type columnsChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"columns\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type columnsTitleChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"columnsTitle\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type countLabelChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"countLabel\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type dataChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"data\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type groupAttributesChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"groupAttributes\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type groupBehaviorChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"groupBehavior\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type hiddenCategoriesChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"hiddenCategories\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type highlightMatchChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"highlightMatch\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type highlightedCategoriesChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"highlightedCategories\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type hoverBehaviorChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"hoverBehavior\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type labelTruncationChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"labelTruncation\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type maximizedColumnChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"maximizedColumn\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type maximizedRowChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"maximizedRow\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type otherColorChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"otherColor\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type otherThresholdChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"otherThreshold\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type rowsChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"rows\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type rowsTitleChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"rowsTitle\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type selectionChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"selection\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type selectionModeChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"selectionMode\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type styleDefaultsChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"styleDefaults\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type tooltipChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"tooltip\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type touchResponseChanged<K, D extends ojNBox.Node<K> | any> = JetElementCustomEvent<ojNBox<K, D>[\"touchResponse\"]>;\n    //------------------------------------------------------------\n    // Start: generated events for inherited properties\n    //------------------------------------------------------------\n    // tslint:disable-next-line interface-over-type-literal\n    type trackResizeChanged<K, D extends ojNBox.Node<K> | any> = dvtBaseComponent.trackResizeChanged<ojNBoxSettableProperties<K, D>>;\n    // tslint:disable-next-line interface-over-type-literal\n    type Cell = {\n        column: string;\n        label?: string;\n        labelHalign?: string;\n        labelStyle?: Partial<CSSStyleDeclaration>;\n        maximizedSvgClassName?: string;\n        maximizedSvgStyle?: Partial<CSSStyleDeclaration>;\n        minimizedSvgClassName?: string;\n        minimizedSvgStyle?: Partial<CSSStyleDeclaration>;\n        row: string;\n        shortDesc?: string;\n        showCount?: 'on' | 'off' | 'auto';\n        svgClassName?: string;\n        svgStyle?: Partial<CSSStyleDeclaration>;\n    };\n    // tslint:disable-next-line interface-over-type-literal\n    type Column = {\n        id: string;\n        label?: string;\n        labelStyle?: Partial<CSSStyleDeclaration>;\n    };\n    // tslint:disable-next-line interface-over-type-literal\n    type DialogContext = {\n        subId: 'oj-nbox-dialog';\n    };\n    // tslint:disable-next-line interface-over-type-literal\n    type Node<K> = {\n        borderColor?: string;\n        borderWidth?: number;\n        categories?: string[];\n        color?: string;\n        column: string;\n        groupCategory?: string;\n        icon?: {\n            background?: 'neutral' | 'red' | 'orange' | 'forest' | 'green' | 'teal' | 'mauve' | 'purple';\n            borderColor?: string;\n            borderRadius?: string;\n            borderWidth?: number;\n            color?: string;\n            height?: number;\n            initials?: string;\n            opacity?: number;\n            pattern?: 'largeChecker' | 'largeCrosshatch' | 'largeDiagonalLeft' | 'largeDiagonalRight' | 'largeDiamond' | 'largeTriangle' | 'none' | 'smallChecker' | 'smallCrosshatch' |\n               'smallDiagonalLeft' | 'smallDiagonalRight' | 'smallDiamond' | 'smallTriangle';\n            shape?: 'circle' | 'diamond' | 'ellipse' | 'human' | 'plus' | 'rectangle' | 'square' | 'star' | 'triangleDown' | 'triangleUp' | string;\n            source?: string;\n            svgClassName?: string;\n            svgStyle?: Partial<CSSStyleDeclaration>;\n            width?: number;\n        };\n        id?: K;\n        indicatorColor?: string;\n        indicatorIcon?: {\n            borderColor?: string;\n            borderRadius?: string;\n            borderWidth?: number;\n            color?: string;\n            height?: number;\n            opacity?: number;\n            pattern?: 'largeChecker' | 'largeCrosshatch' | 'largeDiagonalLeft' | 'largeDiagonalRight' | 'largeDiamond' | 'largeTriangle' | 'none' | 'smallChecker' | 'smallCrosshatch' |\n               'smallDiagonalLeft' | 'smallDiagonalRight' | 'smallDiamond' | 'smallTriangle';\n            shape?: 'circle' | 'diamond' | 'ellipse' | 'human' | 'plus' | 'rectangle' | 'square' | 'star' | 'triangleDown' | 'triangleUp' | string;\n            source?: string;\n            svgClassName?: string;\n            svgStyle?: Partial<CSSStyleDeclaration>;\n            width?: number;\n        };\n        label?: string;\n        row: string;\n        secondaryLabel?: string;\n        shortDesc?: (string | ((context: ojNBox.NodeShortDescContext<K>) => string));\n        svgClassName?: string;\n        svgStyle?: Partial<CSSStyleDeclaration>;\n        xPercentage?: number;\n        yPercentage?: number;\n    };\n    // tslint:disable-next-line interface-over-type-literal\n    type NodeShortDescContext<K> = {\n        column: string;\n        id: K;\n        label: string;\n        row: string;\n        secondaryLabel: string;\n    };\n    // tslint:disable-next-line interface-over-type-literal\n    type Row = {\n        id: string;\n        label?: string;\n        labelStyle?: Partial<CSSStyleDeclaration>;\n    };\n}\nexport namespace NBoxNodeElement {\n    // tslint:disable-next-line interface-over-type-literal\n    type borderColorChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"borderColor\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type borderWidthChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"borderWidth\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type categoriesChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"categories\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type colorChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"color\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type columnChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"column\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type groupCategoryChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"groupCategory\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type iconChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"icon\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type indicatorColorChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"indicatorColor\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type indicatorIconChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"indicatorIcon\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type labelChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"label\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type rowChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"row\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type secondaryLabelChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"secondaryLabel\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type shortDescChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"shortDesc\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type svgClassNameChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"svgClassName\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type svgStyleChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"svgStyle\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type xPercentageChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"xPercentage\"]>;\n    // tslint:disable-next-line interface-over-type-literal\n    type yPercentageChanged<K = any> = JetElementCustomEvent<ojNBoxNode<K>[\"yPercentage\"]>;\n}\nexport interface NBoxIntrinsicProps extends Partial<Readonly<ojNBoxSettableProperties<any, any>>>, GlobalProps, Pick<preact.JSX.HTMLAttributes, 'ref' | 'key'> {\n    onanimationOnDataChangeChanged?: (value: ojNBoxEventMap<any, any>['animationOnDataChangeChanged']) => void;\n    onanimationOnDisplayChanged?: (value: ojNBoxEventMap<any, any>['animationOnDisplayChanged']) => void;\n    onasChanged?: (value: ojNBoxEventMap<any, any>['asChanged']) => void;\n    oncellContentChanged?: (value: ojNBoxEventMap<any, any>['cellContentChanged']) => void;\n    oncellMaximizeChanged?: (value: ojNBoxEventMap<any, any>['cellMaximizeChanged']) => void;\n    oncellsChanged?: (value: ojNBoxEventMap<any, any>['cellsChanged']) => void;\n    oncolumnsChanged?: (value: ojNBoxEventMap<any, any>['columnsChanged']) => void;\n    oncolumnsTitleChanged?: (value: ojNBoxEventMap<any, any>['columnsTitleChanged']) => void;\n    oncountLabelChanged?: (value: ojNBoxEventMap<any, any>['countLabelChanged']) => void;\n    ondataChanged?: (value: ojNBoxEventMap<any, any>['dataChanged']) => void;\n    ongroupAttributesChanged?: (value: ojNBoxEventMap<any, any>['groupAttributesChanged']) => void;\n    ongroupBehaviorChanged?: (value: ojNBoxEventMap<any, any>['groupBehaviorChanged']) => void;\n    onhiddenCategoriesChanged?: (value: ojNBoxEventMap<any, any>['hiddenCategoriesChanged']) => void;\n    onhighlightMatchChanged?: (value: ojNBoxEventMap<any, any>['highlightMatchChanged']) => void;\n    onhighlightedCategoriesChanged?: (value: ojNBoxEventMap<any, any>['highlightedCategoriesChanged']) => void;\n    onhoverBehaviorChanged?: (value: ojNBoxEventMap<any, any>['hoverBehaviorChanged']) => void;\n    onlabelTruncationChanged?: (value: ojNBoxEventMap<any, any>['labelTruncationChanged']) => void;\n    onmaximizedColumnChanged?: (value: ojNBoxEventMap<any, any>['maximizedColumnChanged']) => void;\n    onmaximizedRowChanged?: (value: ojNBoxEventMap<any, any>['maximizedRowChanged']) => void;\n    onotherColorChanged?: (value: ojNBoxEventMap<any, any>['otherColorChanged']) => void;\n    onotherThresholdChanged?: (value: ojNBoxEventMap<any, any>['otherThresholdChanged']) => void;\n    onrowsChanged?: (value: ojNBoxEventMap<any, any>['rowsChanged']) => void;\n    onrowsTitleChanged?: (value: ojNBoxEventMap<any, any>['rowsTitleChanged']) => void;\n    onselectionChanged?: (value: ojNBoxEventMap<any, any>['selectionChanged']) => void;\n    onselectionModeChanged?: (value: ojNBoxEventMap<any, any>['selectionModeChanged']) => void;\n    onstyleDefaultsChanged?: (value: ojNBoxEventMap<any, any>['styleDefaultsChanged']) => void;\n    ontooltipChanged?: (value: ojNBoxEventMap<any, any>['tooltipChanged']) => void;\n    ontouchResponseChanged?: (value: ojNBoxEventMap<any, any>['touchResponseChanged']) => void;\n    ontrackResizeChanged?: (value: ojNBoxEventMap<any, any>['trackResizeChanged']) => void;\n    children?: ComponentChildren;\n}\nexport interface NBoxNodeIntrinsicProps extends Partial<Readonly<ojNBoxNodeSettableProperties<any>>>, GlobalProps, Pick<preact.JSX.HTMLAttributes, 'ref' | 'key'> {\n    onborderColorChanged?: (value: ojNBoxNodeEventMap<any>['borderColorChanged']) => void;\n    onborderWidthChanged?: (value: ojNBoxNodeEventMap<any>['borderWidthChanged']) => void;\n    oncategoriesChanged?: (value: ojNBoxNodeEventMap<any>['categoriesChanged']) => void;\n    oncolorChanged?: (value: ojNBoxNodeEventMap<any>['colorChanged']) => void;\n    oncolumnChanged?: (value: ojNBoxNodeEventMap<any>['columnChanged']) => void;\n    ongroupCategoryChanged?: (value: ojNBoxNodeEventMap<any>['groupCategoryChanged']) => void;\n    oniconChanged?: (value: ojNBoxNodeEventMap<any>['iconChanged']) => void;\n    onindicatorColorChanged?: (value: ojNBoxNodeEventMap<any>['indicatorColorChanged']) => void;\n    onindicatorIconChanged?: (value: ojNBoxNodeEventMap<any>['indicatorIconChanged']) => void;\n    onlabelChanged?: (value: ojNBoxNodeEventMap<any>['labelChanged']) => void;\n    onrowChanged?: (value: ojNBoxNodeEventMap<any>['rowChanged']) => void;\n    onsecondaryLabelChanged?: (value: ojNBoxNodeEventMap<any>['secondaryLabelChanged']) => void;\n    onshortDescChanged?: (value: ojNBoxNodeEventMap<any>['shortDescChanged']) => void;\n    onsvgClassNameChanged?: (value: ojNBoxNodeEventMap<any>['svgClassNameChanged']) => void;\n    onsvgStyleChanged?: (value: ojNBoxNodeEventMap<any>['svgStyleChanged']) => void;\n    onxPercentageChanged?: (value: ojNBoxNodeEventMap<any>['xPercentageChanged']) => void;\n    onyPercentageChanged?: (value: ojNBoxNodeEventMap<any>['yPercentageChanged']) => void;\n    children?: ComponentChildren;\n}\ndeclare global {\n    namespace preact.JSX {\n        interface IntrinsicElements {\n            \"oj-n-box\": NBoxIntrinsicProps;\n            \"oj-n-box-node\": NBoxNodeIntrinsicProps;\n        }\n    }\n}\n", "id": "100-Oracle-JET-Theme-Builder-v11:types/ojnbox/index.d.ts:f70dad7f-a722-437e-ad7d-f883e66f9eb1"}
{"path": "examples/auth/src/user/user.module.ts", "project_name": "nestjs-query", "text": "import { NestjsQueryTypeOrmModule } from '@nestjs-query/query-typeorm';\nimport { Module } from '@nestjs/common';\nimport { UserEntity } from './user.entity';\n\n@Module({\n  imports: [NestjsQueryTypeOrmModule.forFeature([UserEntity])],\n  exports: [NestjsQueryTypeOrmModule.forFeature([UserEntity])],\n})\nexport class UserModule {}\n", "id": "nestjs-query:examples/auth/src/user/user.module.ts:748b97dd-eb79-4c5d-8b1f-ffd5b6018aaf"}
{"path": "frontend/www/js/omegaup/components/problem/Solution.test.ts", "project_name": "omegaup", "text": "import { mount } from '@vue/test-utils';\n\nimport type { types } from '../../api_types';\nimport T from '../../lang';\n\nimport problem_Solution from './Solution.vue';\n\ndescribe('Solution.vue', () => {\n  it('Should handle an empty/locked solution', () => {\n    const wrapper = mount(problem_Solution, {\n      propsData: {\n        solution: null as types.ProblemStatement | null,\n        status: 'locked',\n        availableTokens: 0,\n        allTokens: 0,\n      },\n    });\n\n    expect(wrapper.text()).toContain(T.solutionLocked.split('\\n')[0]);\n  });\n\n  it('Should handle an empty/unlocked solution', () => {\n    const wrapper = mount(problem_Solution, {\n      propsData: {\n        solution: null as types.ProblemStatement | null,\n        status: 'unlocked',\n        availableTokens: 0,\n        allTokens: 0,\n      },\n    });\n\n    expect(wrapper.text()).toContain(T.solutionConfirm);\n  });\n\n  it('Should handle a non-empty, unlocked solution', () => {\n    const wrapper = mount(problem_Solution, {\n      propsData: {\n        solution: {\n          markdown: 'Hello, World!',\n          images: {},\n        } as types.ProblemStatement | null,\n        status: 'unlocked',\n        availableTokens: 0,\n        allTokens: 0,\n      },\n    });\n\n    expect(wrapper.text()).toContain('Hello, World!');\n  });\n\n  it('Should handle unrecognized source filename error', () => {\n    const wrapper = mount(problem_Solution, {\n      propsData: {\n        solution: {\n          markdown: `# test with embed code in solution\nHere we can add code.\n<details>\n  <summary>\n    Example:\n  </summary>\n\n  {{sample.cpp}}\n\n  </details>`,\n          sources: {},\n        } as types.ProblemStatement,\n        status: 'unlocked',\n        availableTokens: 0,\n        allTokens: 0,\n      },\n    });\n\n    expect(wrapper.find('div[data-markdown-statement]').text()).toContain(\n      'Unrecognized source filename: sample.cpp',\n    );\n  });\n\n  it('Should handle a valid source filename with content', async () => {\n    const wrapper = mount(problem_Solution, {\n      propsData: {\n        solution: {\n          markdown: `# test with embed code in solution\nHere we can add code.\n<details>\n  <summary>\n    Example:\n  </summary>\n\n  {{sample.cpp}}\n\n  </details>`,\n          sources: {\n            'sample.cpp': `#include <iostream>\n\n      int main() {\n        std::cout << \"This is only an example\";\n        return 0;\n      }`,\n          },\n          images: {},\n          language: 'en',\n        } as types.ProblemStatement,\n        status: 'unlocked',\n        availableTokens: 0,\n        allTokens: 0,\n      },\n    });\n\n    expect(wrapper.find('details').attributes()).toMatchObject({});\n    await wrapper.find('details > summary').trigger('click');\n    expect(wrapper.find('details').attributes()).toMatchObject({ open: '' });\n    expect(wrapper.find('div[data-markdown-statement]').text()).toContain(\n      '#include <iostream>',\n    );\n    expect(wrapper.find('div[data-markdown-statement]').text()).toContain(\n      'This is only an example',\n    );\n  });\n});\n", "id": "omegaup:frontend/www/js/omegaup/components/problem/Solution.test.ts:725cc015-180c-4093-82c4-fa9bbcc4b688"}
{"path": "src/components/SceneListPage/SceneListPage.container.ts", "project_name": "builder", "text": "import { connect } from 'react-redux'\nimport { getLocation, push } from 'connected-react-router'\nimport { locations } from 'routing/locations'\n\nimport {\n  getPoolList,\n  getTotal,\n  getSortBy,\n  getPage,\n  getSortOrder,\n  getSearchGroup,\n  getSearchEthAddress,\n  getTotalPages\n} from 'modules/pool/selectors'\nimport { RootState } from 'modules/common/types'\nimport { openModal } from 'modules/modal/actions'\nimport { PoolsRequestFilters } from 'modules/pool/types'\nimport { loadPoolsRequest } from 'modules/pool/actions'\nimport { getAllPoolGroups } from 'modules/poolGroup/selectors'\nimport { isLoggedIn } from 'modules/identity/selectors'\n\nimport { MapStateProps, MapDispatch, MapDispatchProps } from './SceneListPage.types'\nimport SceneListPage from './SceneListPage'\n\nconst mapState = (state: RootState): MapStateProps => ({\n  location: getLocation(state),\n  pools: getPoolList(state),\n  poolGroups: getAllPoolGroups(state),\n  total: getTotal(state),\n  totalPages: getTotalPages(state),\n  page: getPage(state),\n  sortBy: getSortBy(state),\n  sortOrder: getSortOrder(state),\n  group: getSearchGroup(state),\n  ethAddress: getSearchEthAddress(state),\n  isLoggedIn: isLoggedIn(state)\n})\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata)),\n  onLoadPools: (filters: PoolsRequestFilters) => dispatch(loadPoolsRequest(filters)),\n  onPageChange: (filters: PoolsRequestFilters) => dispatch(push(locations.poolSearch(filters))),\n  onNavegateToHome: () => dispatch(push(locations.root())),\n  onNavegateToViewPool: (poolId: string) => dispatch(push(locations.poolView(poolId)))\n})\n\nexport default connect(mapState, mapDispatch)(SceneListPage)\n", "id": "builder:src/components/SceneListPage/SceneListPage.container.ts:a7c1ca64-89bd-4df9-96c1-b3422f181c35"}
{"path": "app/src/pages/Robots/RobotSettings/SelectNetwork/ConnectModal/form-fields.ts", "project_name": "opentrons", "text": "import get from 'lodash/get'\n\nimport * as Constants from '../constants'\nimport * as Copy from '../i18n'\n\nimport type {\n  WifiNetwork,\n  WifiKey,\n  EapOption,\n  WifiAuthField,\n  WifiConfigureRequest,\n  WifiSecurityType,\n  WifiEapConfig,\n  ConnectFormValues,\n  ConnectFormErrors,\n  ConnectFormField,\n  ConnectFormTextField,\n  ConnectFormSecurityField,\n} from '../types'\n\nexport const renderLabel = (label: string, required: boolean): string =>\n  `${required ? '* ' : ''}${label}`\n\nconst FIELD_SSID: ConnectFormTextField = {\n  type: Constants.FIELD_TYPE_TEXT,\n  name: Constants.CONFIGURE_FIELD_SSID,\n  label: renderLabel(Copy.LABEL_SSID, true),\n  isPassword: false,\n}\n\nconst FIELD_PSK: ConnectFormTextField = {\n  type: Constants.FIELD_TYPE_TEXT,\n  name: Constants.CONFIGURE_FIELD_PSK,\n  label: renderLabel(Copy.LABEL_PSK, true),\n  isPassword: true,\n}\n\nconst makeSecurityField = (\n  eapOptions: EapOption[],\n  showAllOptions: boolean\n): ConnectFormSecurityField => ({\n  type: Constants.FIELD_TYPE_SECURITY,\n  name: Constants.CONFIGURE_FIELD_SECURITY_TYPE,\n  label: renderLabel(Copy.LABEL_SECURITY, true),\n  placeholder: Copy.SELECT_AUTHENTICATION_METHOD,\n  eapOptions,\n  showAllOptions,\n})\n\nconst getEapIsSelected = (\n  formSecurityType: string | null | undefined\n): boolean => {\n  return (\n    formSecurityType != null &&\n    formSecurityType !== Constants.SECURITY_NONE &&\n    formSecurityType !== Constants.SECURITY_WPA_PSK\n  )\n}\n\nconst getEapFields = (\n  eapOptions: EapOption[],\n  values: ConnectFormValues,\n  errors?: ConnectFormErrors,\n  touched?: boolean\n): WifiAuthField[] => {\n  const eapType = values.securityType\n  return eapOptions\n    .filter(opt => opt.name === eapType)\n    .flatMap(opt => opt.options)\n}\n\nconst getEapFieldName = (baseName: string): string => `eapConfig.${baseName}`\n\nexport function getConnectFormFields(\n  network: WifiNetwork | null,\n  robotName: string,\n  eapOptions: EapOption[],\n  wifiKeys: WifiKey[],\n  values: ConnectFormValues\n): ConnectFormField[] {\n  const { securityType: formSecurityType } = values\n  const fields = []\n\n  // if the network is unknown, display a field to enter the SSID\n  if (network === null) {\n    fields.push(FIELD_SSID)\n  }\n\n  // if the network is unknown or the known network is EAP, display a\n  // security dropdown; security dropdown will handle which options to\n  // display based on known or unknown network\n  if (!network || network.securityType === Constants.SECURITY_WPA_EAP) {\n    fields.push(makeSecurityField(eapOptions, !network))\n  }\n\n  // if known network is PSK or network is unknown and user has selected PSK\n  // display a password field for the PSK\n  if (\n    network?.securityType === Constants.SECURITY_WPA_PSK ||\n    formSecurityType === Constants.SECURITY_WPA_PSK\n  ) {\n    fields.push(FIELD_PSK)\n  }\n\n  // if known network is EAP or user selected EAP, map eap options to fields\n  if (\n    network?.securityType === Constants.SECURITY_WPA_EAP ||\n    getEapIsSelected(formSecurityType)\n  ) {\n    fields.push(\n      ...getEapFields(eapOptions, values).map(field => {\n        const { type } = field\n        const name = getEapFieldName(field.name)\n        const label = renderLabel(field.displayName, field.required)\n\n        if (type === Constants.AUTH_TYPE_FILE) {\n          return {\n            type: Constants.FIELD_TYPE_KEY_FILE,\n            name,\n            label,\n            robotName,\n            wifiKeys,\n            placeholder: Copy.SELECT_FILE,\n          }\n        }\n\n        return {\n          type: Constants.FIELD_TYPE_TEXT,\n          name,\n          label,\n          isPassword: type === Constants.AUTH_TYPE_PASSWORD,\n        }\n      })\n    )\n  }\n\n  return fields\n}\n\nexport function validateConnectFormFields(\n  network: WifiNetwork | null,\n  eapOptions: EapOption[],\n  values: ConnectFormValues\n): ConnectFormErrors {\n  const {\n    ssid: formSsid,\n    securityType: formSecurityType,\n    psk: formPsk,\n  } = values\n  const errors: Partial<ConnectFormErrors> = {}\n\n  if (network === null && !formSsid) {\n    errors.ssid = Copy.FIELD_IS_REQUIRED(Copy.LABEL_SSID)\n  }\n\n  if (\n    (network === null || network.securityType === Constants.SECURITY_WPA_EAP) &&\n    !formSecurityType\n  ) {\n    errors.securityType = Copy.FIELD_IS_REQUIRED(Copy.LABEL_SECURITY)\n  }\n\n  if (\n    (network?.securityType === Constants.SECURITY_WPA_PSK ||\n      formSecurityType === Constants.SECURITY_WPA_PSK) &&\n    (!formPsk || formPsk.length < Constants.CONFIGURE_PSK_MIN_LENGTH)\n  ) {\n    errors.psk = Copy.FIELD_NOT_LONG_ENOUGH(\n      Copy.LABEL_PSK,\n      Constants.CONFIGURE_PSK_MIN_LENGTH\n    )\n  }\n\n  if (\n    network?.securityType === Constants.SECURITY_WPA_EAP ||\n    getEapIsSelected(formSecurityType)\n  ) {\n    getEapFields(eapOptions, values)\n      .filter(\n        ({ name, required }) => required && !get(values, getEapFieldName(name))\n      )\n      .forEach(\n        ({ name, displayName }: Pick<EapOption, 'name' | 'displayName'>) => {\n          errors[\n            getEapFieldName(name) as keyof typeof errors\n            // @ts-expect-error TODO: displayName could be undefined\n          ] = Copy.FIELD_IS_REQUIRED(displayName)\n        }\n      )\n  }\n\n  return errors\n}\n\nexport const connectFormToConfigureRequest = (\n  network: WifiNetwork | null,\n  values: ConnectFormValues\n): WifiConfigureRequest | null => {\n  const {\n    ssid: formSsid,\n    securityType: formSecurityType,\n    psk: formPsk,\n    eapConfig: formEapConfig,\n  } = values\n\n  const ssid = network?.ssid ?? formSsid ?? null\n  let securityType: WifiSecurityType | null = null\n  let eapConfig: WifiEapConfig | null = null\n\n  if (getEapIsSelected(formSecurityType)) {\n    securityType = Constants.SECURITY_WPA_EAP\n    // @ts-expect-error TODO: formSecurityType could be undefined, but eapType expects string\n    eapConfig = { eapType: formSecurityType }\n  } else if (network) {\n    securityType = network.securityType\n  } else if (\n    values.securityType === Constants.SECURITY_NONE ||\n    values.securityType === Constants.SECURITY_WPA_PSK\n  ) {\n    securityType = values.securityType as WifiSecurityType\n  }\n\n  if (ssid !== null && securityType !== null) {\n    const options: WifiConfigureRequest = {\n      ssid,\n      securityType,\n      hidden: network === null,\n    }\n\n    if (formPsk != null) options.psk = formPsk\n    if (eapConfig) options.eapConfig = { ...eapConfig, ...formEapConfig }\n    return options\n  }\n\n  return null\n}\n", "id": "opentrons:app/src/pages/Robots/RobotSettings/SelectNetwork/ConnectModal/form-fields.ts:ed465ff1-7010-4227-bffa-670b756ea244"}
{"path": "packages/core/src/components/TrackingBoundary/index.tsx", "project_name": "lunar", "text": "/* eslint-disable no-param-reassign */\n\nimport React from 'react';\nimport componentName from '../../prop-types/componentName';\n\nexport type TrackingBoundaryProps = {\n  /** Content to wrap. */\n  children: NonNullable<React.ReactNode>;\n  /** A unique name to identify this boundary in the context stack. */\n  name?: string;\n};\n\n/** Wraps a component and provides a context stack for click and keydown tracking purposes. */\nfunction TrackingBoundary({ children, name }: TrackingBoundaryProps) {\n  if (!name) {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <>{children}</>;\n  }\n\n  const handleTrackContext = ({ nativeEvent }: { nativeEvent: MouseEvent | KeyboardEvent }) => {\n    if (nativeEvent.trackingContext) {\n      nativeEvent.trackingContext.push(name);\n    } else {\n      nativeEvent.trackingContext = [name];\n    }\n  };\n\n  return (\n    <div\n      data-tracking-boundary\n      data-tracking-name={name}\n      role=\"none\"\n      onClick={handleTrackContext}\n      onKeyDown={handleTrackContext}\n    >\n      {children}\n    </div>\n  );\n}\n\nTrackingBoundary.propTypes = {\n  name: componentName,\n};\n\nexport default TrackingBoundary;\n", "id": "lunar:packages/core/src/components/TrackingBoundary/index.tsx:c36a7b95-4eee-4e58-8763-f83cd46f693a"}
{"path": "src/examples/RowSelector.tsx", "project_name": "ax6ui-react-grid", "text": "import * as React from 'react';\nimport { Divider, Button } from 'antd';\nimport { Wrapper, Segment } from 'components';\nimport { DataGrid, IDataGrid } from 'axui-datagrid';\nimport { basicData } from './data/basicData';\n\ninterface IState {\n  width: number;\n  height: number;\n  columns: IDataGrid.IColumn[];\n  data: IDataGrid.IData;\n}\n\nclass LoadingState extends React.Component<any, IState> {\n  dataGridContainerRef: React.RefObject<HTMLDivElement>;\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      width: 300,\n      height: 300,\n      columns: [\n        { key: 'id', width: 60, label: 'ID' },\n        { key: 'title', width: 200, label: 'Title' },\n        { key: 'writer', label: 'Writer' },\n        { key: 'date', label: 'Date', formatter: 'date' },\n        { key: 'money', label: 'Money', formatter: 'money', align: 'right' },\n      ],\n      data: basicData,\n    };\n\n    this.dataGridContainerRef = React.createRef();\n  }\n\n  getDataGridContainerRect = (e?: Event) => {\n    if (this.dataGridContainerRef.current) {\n      const {\n        width,\n      } = this.dataGridContainerRef.current.getBoundingClientRect();\n      this.setState({ width });\n    }\n  };\n\n  componentDidMount() {\n    this.getDataGridContainerRect();\n    window.addEventListener('resize', this.getDataGridContainerRect, false);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.getDataGridContainerRect);\n  }\n\n  changeConfig = (props: any, value: any) => {\n    const processor = {\n      setHeight: () => {\n        this.setState({\n          height: value,\n        });\n      },\n    };\n\n    if (props in processor) {\n      processor[props].call(this, value);\n    } else {\n      this.setState(value);\n    }\n  };\n\n  onSelect = (param: IDataGrid.IonSelectParam) => {\n    console.log(param);\n\n    const { li, selected, selectedAll } = param;\n    const { data } = this.state;\n    if (li !== undefined) {\n      const item: IDataGrid.IDataItem = data[li];\n      item.selected = selected;\n\n      this.setState({\n        data: { ...data, [li]: item },\n      });\n    } else {\n      Object.values(data).forEach(item => {\n        item.selected = selectedAll;\n      });\n      this.setState({\n        data: { ...data },\n      });\n    }\n  };\n\n  render() {\n    const { width, height, columns, data } = this.state;\n\n    return (\n      <Wrapper>\n        <Segment padded>\n          <h1>RowSelector</h1>\n          <p>\n            'options> showRowSelector' If you set the value to true, a check box\n            appears, allowing you to select each row of 'datagrid'.\n          </p>\n\n          <div\n            ref={this.dataGridContainerRef}\n            style={{ border: '1px solid #ccc' }}\n          >\n            <DataGrid\n              width={width - 2}\n              height={height - 2}\n              style={{ fontSize: '12px' }}\n              columns={columns}\n              data={data}\n              dataLength={Object.keys(data).length}\n              options={{\n                showRowSelector: true,\n                rowSelectorSize: 16,\n              }}\n              scrollTop={-100}\n              onSelect={this.onSelect}\n            />\n          </div>\n          <Divider />\n\n          <h2>Data</h2>\n          <textarea\n            style={{ width: '100%', height: '400px', padding: '10px' }}\n            value={`${JSON.stringify(data)}`}\n            readOnly\n          />\n          <Divider />\n\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              this.onSelect({ selectedAll: false });\n              this.onSelect({ li: 0, selected: true });\n            }}\n          >\n            select : [0]\n          </Button>\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              this.onSelect({ selectedAll: false });\n              this.onSelect({ li: 1, selected: true });\n              this.onSelect({ li: 2, selected: true });\n            }}\n          >\n            select : [1,2]\n          </Button>\n        </Segment>\n      </Wrapper>\n    );\n  }\n}\n\nexport default LoadingState;\n", "id": "ax6ui-react-grid:src/examples/RowSelector.tsx:acbaddbf-3dca-4986-9aed-cc4a4e0ff222"}
{"path": "packages/mysql-config/src/__tests__/index.test.ts", "project_name": "atdatabases", "text": "import {getMySqlConfigSync, _testReadMySqlConfigSync} from '..';\n\ntest('get root config', () => {\n  expect(getMySqlConfigSync()).toEqual({\n    connectionStringEnvironmentVariable: 'MYSQL_URL',\n    test: {\n      connectTimeoutSeconds: 20,\n      containerName: 'mysql-test',\n      debug: false,\n      image: 'mysql:5.7.24',\n      mySqlDb: 'test-db',\n      mySqlPassword: 'password',\n      mySqlUser: 'test-user',\n    },\n  });\n});\n\ntest('valid config', () => {\n  expect(_testReadMySqlConfigSync(__dirname + '/fixtures/empty.json')).toEqual({\n    connectionStringEnvironmentVariable: 'DATABASE_URL',\n    test: {\n      connectTimeoutSeconds: 20,\n      containerName: 'mysql-test',\n      debug: false,\n      image: 'mysql:5.7.24',\n      mySqlDb: 'test-db',\n      mySqlPassword: 'password',\n      mySqlUser: 'test-user',\n    },\n  });\n  expect(\n    _testReadMySqlConfigSync(__dirname + '/fixtures/override.json'),\n  ).toEqual({\n    connectionStringEnvironmentVariable: 'PG_CONNECTION',\n    test: {\n      connectTimeoutSeconds: 20,\n      containerName: 'mysql-test',\n      debug: false,\n      image: 'mysql:5.7.24',\n      mySqlDb: 'test-db',\n      mySqlPassword: 'password',\n      mySqlUser: 'test-user',\n    },\n  });\n});\n\ntest('invalid config', () => {\n  expect(() => _testReadMySqlConfigSync(__dirname + '/fixtures/invalid.json'))\n    .toThrowErrorMatchingInlineSnapshot(`\n    \"Unable to assign {connectionStringEnvironmentVariable: 10} to { connectionStringEnvironmentVariable: string | undefined; test: TestConfig | undefined; }\n      The types of \\\\\"connectionStringEnvironmentVariable\\\\\" are not compatible\n        Unable to assign 10 to string | undefined\n          Unable to assign 10 to string\n            Expected string, but was 10\n          And unable to assign 10 to undefined\n            Expected literal undefined, but was 10 (i.e. a number)\"\n  `);\n});\n", "id": "atdatabases:packages/mysql-config/src/__tests__/index.test.ts:1f5e4831-a580-42d1-80ef-3fb8f5f4d8f2"}
{"path": "packages/fannypack/src/Text/Text.tsx", "project_name": "fannypack", "text": "import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { BoxProps as ReakitBoxProps } from 'reakit/ts/Box/Box';\n\nimport _Text from './styled';\n\nexport type LocalTextProps = {\n  className?: string;\n  children?: React.ReactNode;\n  color?: string;\n};\nexport type TextProps = ReakitBoxProps & LocalTextProps;\n\nexport const Text: React.FunctionComponent<LocalTextProps> = ({ children, ...props }) => (\n  <_Text use=\"span\" {...props}>\n    {children}\n  </_Text>\n);\n\nexport const textPropTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  color: PropTypes.string\n};\nText.propTypes = textPropTypes;\n\nexport const textDefaultProps = {\n  className: undefined,\n  children: undefined,\n  color: undefined\n};\nText.defaultProps = textDefaultProps;\n\n// @ts-ignore\nconst C: React.FunctionComponent<TextProps> = Text;\nexport default C;\n", "id": "fannypack:packages/fannypack/src/Text/Text.tsx:f142ee4e-18d2-4a1e-bd6e-bec76a920ddb"}
{"path": "react+typescript/src/pages/drag/baseCompents/Banner/template.ts", "project_name": "ant-simple-pro", "text": "const template = {\n  type: 'Banner',\n  h: 400,\n  w:600,\n  title: '轮播组件',\n  a:145\n};\nexport default template;\n", "id": "ant-simple-pro:react+typescript/src/pages/drag/baseCompents/Banner/template.ts:b2c451d2-a570-4d06-bc9e-dfed7bcd7b54"}
{"path": "e2e/App.e2e.ts", "project_name": "polar", "text": "import { assertNoConsoleErrors, cleanup, getPageTitle, pageUrl } from './helpers';\n\nfixture`App`.page(pageUrl).afterEach(assertNoConsoleErrors).afterEach(cleanup);\n\ntest('should have correct title', async t => {\n  await t.expect(getPageTitle()).eql('Polar');\n});\n", "id": "polar:e2e/App.e2e.ts:b4a81a59-d8b9-4607-a18c-49f6a6fc0532"}
{"path": "packages/editor/__tests__/browser/editor.contribution.test.ts", "project_name": "core", "text": "import { EditorModule } from '@opensumi/ide-editor/lib/browser';\nimport { EditorContribution } from '@opensumi/ide-editor/lib/browser/editor.contribution';\n\nimport { createBrowserInjector } from '../../../../tools/dev-tool/src/injector-helper';\nimport { MockInjector } from '../../../../tools/dev-tool/src/mock-injector';\n\ndescribe('Editor contribution should be work', () => {\n  let mockInjector: MockInjector;\n\n  beforeEach(() => {\n    mockInjector = createBrowserInjector([EditorModule]);\n  });\n\n  describe('01 #contribution should be work', () => {\n    it('should registerCommands be work', () => {\n      const contribution = mockInjector.get(EditorContribution);\n      const register = jest.fn();\n      contribution.registerCommands({ registerCommand: register } as any);\n      expect(register).toBeCalled();\n    });\n  });\n});\n", "id": "core:packages/editor/__tests__/browser/editor.contribution.test.ts:0ef48da4-f853-4eeb-8c4f-949f74bc4eaf"}
{"path": "extensions/application-manager/src/views/treeItem.ts", "project_name": "appworks", "text": "\nimport * as vscode from 'vscode';\n\nexport class ItemData {\n  label = '';\n\n  id = '';\n\n  description = '';\n\n  tooltip = '';\n\n  command;\n\n  contextValue = '';\n\n  icon = '';\n\n  children: ItemData[] = [];\n\n  initialCollapsibleState: vscode.TreeItemCollapsibleState = vscode.TreeItemCollapsibleState.None;\n}\n\nexport class TreeItem extends vscode.TreeItem {\n  constructor(\n    itemData: ItemData,\n    public readonly collapsibleState: vscode.TreeItemCollapsibleState,\n    public readonly extensionContext: vscode.ExtensionContext,\n  ) {\n    super(itemData.label, collapsibleState);\n\n    if (itemData.command) {\n      this.command = itemData.command;\n    }\n    if (itemData.description) {\n      this.description = itemData.description;\n    }\n    if (itemData.tooltip) {\n      this.tooltip = itemData.tooltip;\n    }\n    if (itemData.id) {\n      this.id = itemData.id;\n    }\n\n    const { lightPath, darkPath } = this.getTreeItemIcon(itemData);\n    if (lightPath && darkPath) {\n      // @ts-ignore\n      this.iconPath.light = lightPath;\n      // @ts-ignore\n      this.iconPath.dark = darkPath;\n    } else {\n      // @ts-ignore no matching tag, remove the tree item icon path\n      delete this.iconPath;\n    }\n\n    this.contextValue = this.getTreeItemContextValue(itemData);\n  }\n\n  iconPath = {\n    light: '',\n    dark: '',\n  };\n\n  contextValue = 'treeItem';\n\n  private getTreeItemIcon(itemData: ItemData) {\n    const iconName = itemData.icon;\n    const lightPath =\n      iconName ?\n        vscode.Uri.file(this.extensionContext.asAbsolutePath(`assets/light/${iconName}`)) :\n        null;\n    const darkPath =\n      iconName ?\n        vscode.Uri.file(this.extensionContext.asAbsolutePath(`assets/dark/${iconName}`)) :\n        null;\n    return { lightPath, darkPath };\n  }\n\n  private getTreeItemContextValue(itemData: ItemData): string {\n    if (itemData.contextValue) {\n      return itemData.contextValue;\n    }\n    if (itemData.children.length) {\n      return 'parent';\n    }\n    return 'child';\n  }\n}\n", "id": "appworks:extensions/application-manager/src/views/treeItem.ts:ffcab13c-b83e-40bb-9dc1-d80c3725b583"}
{"path": "src/utils/omitByPath.ts", "project_name": "portman", "text": "import Dot from 'dot-object'\nimport { isObject } from './isObject'\n\n/**\n * Method to remove a nested property from an object by passing a path notation\n * @param objectOrArray the nested object or array\n * @param path the path definition (example: website[0].url)\n */\nexport const omitByPath = (\n  objectOrArray: Record<string, unknown> | Record<string, unknown>[],\n  path: string\n): Record<string, unknown> | Record<string, unknown>[] => {\n  if (!isObject(objectOrArray) && !Array.isArray(objectOrArray)) return objectOrArray\n\n  const dot = new Dot() // Initiate new dot-object\n\n  // Handle array of objects\n  if (Array.isArray(objectOrArray)) {\n    const indexKey = path.match(/\\d+/g)?.[0]\n    // Handle array definition (example: [0])\n    if (indexKey && objectOrArray[indexKey] && !path.includes('.')) {\n      objectOrArray.splice(Number(indexKey), 1)\n      return objectOrArray\n    }\n    // Handle array definition (example: [0].websites)\n    if (indexKey && objectOrArray[indexKey] && path.includes('.')) {\n      const item = objectOrArray[indexKey]\n      const subPath = path.substring(path.indexOf('.') + 1)\n      if (subPath) {\n        objectOrArray[indexKey] = omitByPath(item, subPath)\n      }\n      return objectOrArray\n    }\n  }\n\n  // Remove property from object\n  dot.delete(path, objectOrArray)\n  return objectOrArray\n}\n", "id": "portman:src/utils/omitByPath.ts:248e1425-4dac-4d96-ab91-32efa6af5e51"}
{"path": "packages/core/src/ddl/expressions/index.ts", "project_name": "abaplint", "text": "export * from \"./ddl_include\";\nexport * from \"./ddl_name\";\nexport * from \"./ddl_structure_field\";\nexport * from \"./ddl_structure\";\nexport * from \"./ddl_table_field\";\nexport * from \"./ddl_table\";\nexport * from \"./ddl_type\";", "id": "abaplint:packages/core/src/ddl/expressions/index.ts:57131920-8c92-43b8-8c43-1310fdd6a59b"}
{"path": "js/apps/system/_admin/aardvark/APP/react/src/views/analyzers/forms/StopwordsForm.tsx", "project_name": "arangodb", "text": "import React, { ChangeEvent } from \"react\";\nimport { FormProps, StopwordsState } from \"../constants\";\nimport { Cell, Grid } from \"../../../components/pure-css/grid\";\nimport StopwordsInput from \"./inputs/StopwordsInput\";\nimport Checkbox from \"../../../components/pure-css/form/Checkbox\";\n\nconst StopwordsForm = ({ formState, dispatch, disabled }: FormProps) => {\n  const updateHex = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch({\n      type: 'setField',\n      field: {\n        path: 'properties.hex',\n        value: event.target.checked\n      }\n    });\n  };\n\n  const hexProperty = (formState as StopwordsState).properties.hex;\n\n  return <Grid>\n    <Cell size={'1-2'}>\n      <StopwordsInput formState={formState} dispatch={dispatch} disabled={disabled} required={true}/>\n    </Cell>\n\n    <Cell size={'1-2'}>\n      <Checkbox onChange={updateHex} label={'Hex'} disabled={disabled} checked={hexProperty}/>\n    </Cell>\n  </Grid>;\n};\n\nexport default StopwordsForm;\n", "id": "arangodb:js/apps/system/_admin/aardvark/APP/react/src/views/analyzers/forms/StopwordsForm.tsx:e416c25f-d079-43b2-b046-6e26356b827d"}
{"path": "ext/sdk/resources/sdk-root/shell/src/fxdk/contrib/importer/node/importer.fs.ts", "project_name": "fivem", "text": "import { ApiClient } from \"backend/api/api-client\";\r\nimport { handlesClientEvent } from \"backend/api/api-decorators\";\r\nimport { CopyOptions, FsService } from \"backend/fs/fs-service\";\r\nimport { LogService } from \"backend/logger/log-service\";\r\nimport { NotificationService } from \"backend/notification/notification-service\";\r\nimport { ProjectAccess } from \"fxdk/project/node/project-access\";\r\nimport { Task, TaskReporterService } from \"backend/task/task-reporter-service\";\r\nimport { inject, injectable } from \"inversify\";\r\nimport { FsImporterApi } from \"../common/importer.fs\";\r\n\r\n@injectable()\r\nexport class FsImporter {\r\n  @inject(ApiClient)\r\n  protected readonly apiClient: ApiClient;\r\n\r\n  @inject(LogService)\r\n  protected readonly logService: LogService;\r\n\r\n  @inject(FsService)\r\n  protected readonly fsService: FsService;\r\n\r\n  @inject(TaskReporterService)\r\n  protected readonly taskReporterService: TaskReporterService;\r\n\r\n  @inject(NotificationService)\r\n  protected readonly notificationService: NotificationService;\r\n\r\n  @inject(ProjectAccess)\r\n  protected readonly projectAccess: ProjectAccess;\r\n\r\n  @handlesClientEvent(FsImporterApi.Endpoints.import)\r\n  async importAsset(request: FsImporterApi.ImportRequest): Promise<boolean> {\r\n    const importTask = this.taskReporterService.create(`Importing asset`);\r\n\r\n    try {\r\n      await this.doImport(importTask, request);\r\n      this.notificationService.info(`Succefully imported asset from ${request.sourcePath}`, 5000);\r\n      return true;\r\n    } catch (e) {\r\n      this.notificationService.error(`Failed to import asset: ${e.toString()}`);\r\n      this.logService.log('Failed to import asset', e, request);\r\n      return false;\r\n    } finally {\r\n      importTask.done();\r\n    }\r\n  }\r\n\r\n  private async doImport(task: Task, request: FsImporterApi.ImportRequest) {\r\n    const { sourcePath } = request;\r\n    const assetPath = this.fsService.joinPath(request.basePath, request.name);\r\n\r\n    const sourcePathStats = await this.fsService.statSafe(sourcePath);\r\n    if (!sourcePathStats) {\r\n      throw new Error(`Source path ${sourcePath} to import does not exist`);\r\n    }\r\n\r\n    if (await this.fsService.statSafe(assetPath)) {\r\n      throw new Error(`Can not import asset to existing path ${assetPath}`);\r\n    }\r\n\r\n    const copyOptions: CopyOptions = {\r\n      onProgress(progress) {\r\n        task.setProgress(progress);\r\n      }\r\n    };\r\n\r\n    if (sourcePathStats.isDirectory()) {\r\n      await this.fsService.mkdirp(assetPath);\r\n      await this.fsService.copyDirContent(sourcePath, assetPath, copyOptions);\r\n    } else {\r\n      await this.fsService.copyFileContent(sourcePath, assetPath, copyOptions);\r\n    }\r\n  }\r\n}\r\n", "id": "fivem:ext/sdk/resources/sdk-root/shell/src/fxdk/contrib/importer/node/importer.fs.ts:f1350bd9-7efd-4959-97f6-dd1e9d7cb686"}
{"path": "types/carbon__icons-react/es/CDA/24.d.ts", "project_name": "DefinitelyTyped", "text": "export { Cda24 as default } from \"../../\";\n", "id": "DefinitelyTyped:types/carbon__icons-react/es/CDA/24.d.ts:033199b7-c039-483b-a004-0aa13b7f6022"}
{"path": "VocaDbWeb/Scripts/Bootstrap/TabContext.tsx", "project_name": "vocadb", "text": "// Code from: https://github.com/react-bootstrap/react-bootstrap/blob/c11bc67ab3105e7a1839c0dcaacc5f1099885f02/src/TabContext.tsx\r\nimport * as React from 'react';\r\n\r\nexport interface TabContextType {\r\n\tonSelect: any;\r\n\tactiveKey: any;\r\n\ttransition: any;\r\n\tmountOnEnter: boolean;\r\n\tunmountOnExit: boolean;\r\n\tgetControlledId: (key: any) => any;\r\n\tgetControllerId: (key: any) => any;\r\n}\r\n\r\nconst TabContext = React.createContext<TabContextType | null>(null);\r\n\r\nexport default TabContext;\r\n", "id": "vocadb:VocaDbWeb/Scripts/Bootstrap/TabContext.tsx:4d16839c-32de-4046-9179-301d9bda40b1"}
{"path": "samples/react-enhanced-powerapps/lib/controls/PropertyPaneHTML/PropertyPaneHTML.d.ts", "project_name": "sp-dev-fx-webparts", "text": "import { IPropertyPaneField, PropertyPaneFieldType } from \"@microsoft/sp-property-pane\";\nimport { IPropertyPaneHTMLProps } from './IPropertyPaneHTMLProps';\nimport { IPropertyPaneHTMLInternalProps } from './IPropertyPaneHTMLInternalProps';\nexport declare class PropertyPaneHTMLBuilder implements IPropertyPaneField<IPropertyPaneHTMLProps> {\n    type: PropertyPaneFieldType;\n    properties: IPropertyPaneHTMLInternalProps;\n    private elem;\n    targetProperty: string;\n    shouldFocus?: boolean;\n    constructor(properties: IPropertyPaneHTMLProps);\n    render(): void;\n    private onDispose;\n    private onRender;\n}\nexport declare function PropertyPaneHTML(properties: IPropertyPaneHTMLProps): IPropertyPaneField<IPropertyPaneHTMLProps>;\n//# sourceMappingURL=PropertyPaneHTML.d.ts.map", "id": "sp-dev-fx-webparts:samples/react-enhanced-powerapps/lib/controls/PropertyPaneHTML/PropertyPaneHTML.d.ts:5ad4a47d-50a6-49e8-9cd4-f399e10fad66"}
{"path": "_src/Chapter10/gateway/src/main/webapp/app/entities/order-item/order-item.model.ts", "project_name": "java-978-1-8388-2498-3", "text": "import { BaseEntity } from './../../shared';\n\nexport const enum OrderItemStatus {\n    'AVAILABLE',\n    'OUT_OF_STOCK',\n    'BACK_ORDER'\n}\n\nexport class OrderItem implements BaseEntity {\n    constructor(\n        public id?: number,\n        public quantity?: number,\n        public totalPrice?: number,\n        public status?: OrderItemStatus,\n        public product?: BaseEntity,\n        public order?: BaseEntity,\n    ) {\n    }\n}\n", "id": "java-978-1-8388-2498-3:_src/Chapter10/gateway/src/main/webapp/app/entities/order-item/order-item.model.ts:93b1677c-6135-48a3-9d32-98e41f7ffbea"}
{"path": "src/mol-script/runtime/symbol.ts", "project_name": "molstar", "text": "// /**\n//  * Copyright (c) 2018 Mol* contributors, licensed under MIT, See LICENSE file for more info.\n//  *\n//  * @author <NAME> <<EMAIL>>\n//  */\n\n// import Environment from './environment'\n// import RuntimeExpression from './expression'\n// import Expression from '../language/expression';\n\n// type SymbolRuntime = SymbolRuntime.Dynamic | SymbolRuntime.Static\n\n// namespace SymbolRuntime {\n//     export interface Static {\n//         kind: 'static',\n//         readonly runtime: (ctx: any, args: Arguments) => any,\n//         readonly attributes: Attributes\n//     }\n\n//     export interface Dynamic {\n//         kind: 'dynamic',\n//         readonly compile: (env: Environment, args: Expression.Arguments) => RuntimeExpression\n//     }\n\n//     export interface Attributes { isStatic: boolean }\n\n//     export type Table = Map<string, SymbolRuntime>\n\n//     export type Arguments = ArrayLike<RuntimeExpression> | { [name: string]: RuntimeExpression | undefined }\n// }\n\n// export { SymbolRuntime }", "id": "molstar:src/mol-script/runtime/symbol.ts:03768921-ddfd-49df-abed-b72c49f64c75"}
{"path": "test/functional/query-builder/soft-delete/entity/Counters.ts", "project_name": "typeorm", "text": "import {Column} from \"../../../../../src/decorator/columns/Column\";\nimport {DeleteDateColumn} from \"../../../../../src/decorator/columns/DeleteDateColumn\";\nexport class Counters {\n\n    @Column({ default: 1 })\n    likes: number;\n\n    @Column({ nullable: true })\n    favorites: number;\n\n    @Column({ default: 0 })\n    comments: number;\n\n    @DeleteDateColumn()\n    deletedAt: Date;\n}", "id": "typeorm:test/functional/query-builder/soft-delete/entity/Counters.ts:5d188d32-5c87-4f57-92e7-55af8e090e6f"}
{"path": "step09_component_host/app/childOne.component.ts", "project_name": "angular4", "text": "import {Component} from '@angular/core';\n\n@Component({\n    selector: 'child-one',\n    template: `<div>This is child One with input: {{data}}</div>`,\n    inputs: ['data'],\n    host: {\n      class: 'row',\n      \"[style.color]\":\"backgroundColor()\" \n    }\n})\nexport class ChildOneComponent { \n    data: string;\n    constructor() {\n      this.data = \"default value\";\n    }\n    \n    backgroundColor(): string {\n        return \"red\";\n    }\n}", "id": "angular4:step09_component_host/app/childOne.component.ts:d27d66a9-b4f4-42d5-abdd-0effc7639280"}
{"path": "Extensions/Effects/night-pixi-filter.ts", "project_name": "GDevelop", "text": "namespace gdjs {\n  import PIXI = GlobalPIXIModule.PIXI;\n  export class NightPixiFilter extends PIXI.Filter {\n    constructor() {\n      const vertexShader = undefined;\n      const fragmentShader = [\n        'precision mediump float;',\n        '',\n        'varying vec2 vTextureCoord;',\n        'uniform sampler2D uSampler;',\n        'uniform float intensity;',\n        'uniform float opacity;',\n        '',\n        'void main(void)',\n        '{',\n        '   mat3 nightMatrix = mat3(-2.0 * intensity, -1.0 * intensity, 0, -1.0 * intensity, 0, 1.0 * intensity, 0, 1.0 * intensity, 2.0 * intensity);',\n        '   gl_FragColor = texture2D(uSampler, vTextureCoord);',\n        '   gl_FragColor.rgb = mix(gl_FragColor.rgb, nightMatrix * gl_FragColor.rgb, opacity);',\n        '}',\n      ].join('\\n');\n      const uniforms = {\n        intensity: { type: '1f', value: 1 },\n        opacity: { type: '1f', value: 1 },\n      };\n      super(vertexShader, fragmentShader, uniforms);\n    }\n  }\n  NightPixiFilter.prototype.constructor = gdjs.NightPixiFilter;\n  gdjs.PixiFiltersTools.registerFilterCreator('Night', {\n    makePIXIFilter: function (target, effectData) {\n      const filter = new gdjs.NightPixiFilter();\n      return filter;\n    },\n    updatePreRender: function (filter, target) {},\n    updateDoubleParameter: function (filter, parameterName, value) {\n      if (parameterName !== 'intensity' && parameterName !== 'opacity') {\n        return;\n      }\n      filter.uniforms[parameterName] = gdjs.PixiFiltersTools.clampValue(\n        value,\n        0,\n        1\n      );\n    },\n    updateStringParameter: function (filter, parameterName, value) {},\n    updateBooleanParameter: function (filter, parameterName, value) {},\n  });\n}\n", "id": "GDevelop:Extensions/Effects/night-pixi-filter.ts:6e8dbbae-beee-4c1b-8632-ca0062d6ee67"}
{"path": "crdts/src/number/number.ts", "project_name": "collabs", "text": "import {\n  CObject,\n  MessageMeta,\n  CollabEvent,\n  CollabEventsRecord,\n  InitToken,\n  Pre,\n  Message,\n  Optional,\n} from \"@collabs/core\";\nimport { CNumberComponentMessage } from \"../../generated/proto_compiled\";\nimport {\n  MultipleSemidirectProduct,\n  StatefulCRDT,\n} from \"../constructions/multiple_semidirect_product\";\nimport { ToggleCBoolean } from \"../boolean\";\nimport { PrimitiveCRDT } from \"../constructions\";\n\nexport interface CNumberEvent extends CollabEvent {\n  readonly arg: number;\n  readonly previousValue: number;\n}\n\nexport interface CNumberEventsRecord extends CollabEventsRecord {\n  Add: CNumberEvent;\n  Mult: CNumberEvent;\n  Min: CNumberEvent;\n  Max: CNumberEvent;\n}\n\nexport class CNumberState {\n  value: number;\n  constructor(readonly initialValue: number) {\n    this.value = initialValue;\n  }\n}\n\n// Exporting just for tests, it's not exported at top-level\nexport class AddComponent\n  extends PrimitiveCRDT<CNumberEventsRecord>\n  implements StatefulCRDT<CNumberState>\n{\n  readonly state: CNumberState;\n\n  constructor(initToken: InitToken, initialState: CNumberState) {\n    super(initToken);\n    this.state = initialState;\n  }\n\n  add(toAdd: number) {\n    if (toAdd !== 0) {\n      const message = CNumberComponentMessage.create({ arg: toAdd });\n      const buffer = CNumberComponentMessage.encode(message).finish();\n      this.sendCRDT(buffer);\n    }\n  }\n\n  protected receiveCRDT(message: string | Uint8Array, meta: MessageMeta) {\n    const decoded = CNumberComponentMessage.decode(<Uint8Array>message);\n    const previousValue = this.state.value;\n    this.state.value += decoded.arg;\n    this.emit(\"Add\", {\n      meta,\n      arg: decoded.arg,\n      previousValue,\n    });\n  }\n\n  canGC() {\n    return this.state.value === this.state.initialValue;\n  }\n\n  save(): Uint8Array {\n    const message = CNumberComponentMessage.create({\n      arg: this.state.value,\n    });\n    return CNumberComponentMessage.encode(message).finish();\n  }\n\n  load(saveData: Optional<Uint8Array>) {\n    if (!saveData.isPresent) return;\n    this.state.value = CNumberComponentMessage.decode(saveData.get()).arg;\n  }\n}\n\nexport class MultComponent\n  extends PrimitiveCRDT<CNumberEventsRecord>\n  implements StatefulCRDT<CNumberState>\n{\n  readonly state: CNumberState;\n\n  constructor(initToken: InitToken, initialState: CNumberState) {\n    super(initToken);\n    this.state = initialState;\n  }\n\n  mult(toMult: number) {\n    if (toMult !== 1) {\n      const message = CNumberComponentMessage.create({ arg: toMult });\n      const buffer = CNumberComponentMessage.encode(message).finish();\n      this.sendCRDT(buffer);\n    }\n  }\n\n  protected receiveCRDT(message: string | Uint8Array, meta: MessageMeta) {\n    const decoded = CNumberComponentMessage.decode(<Uint8Array>message);\n    const previousValue = this.state.value;\n    this.state.value *= decoded.arg;\n    this.emit(\"Mult\", {\n      meta,\n      arg: decoded.arg,\n      previousValue,\n    });\n  }\n\n  canGC() {\n    return this.state.value === this.state.initialValue;\n  }\n\n  save(): Uint8Array {\n    const message = CNumberComponentMessage.create({\n      arg: this.state.value,\n    });\n    return CNumberComponentMessage.encode(message).finish();\n  }\n\n  load(saveData: Optional<Uint8Array>) {\n    if (!saveData.isPresent) return;\n    this.state.value = CNumberComponentMessage.decode(saveData.get()).arg;\n  }\n}\n\nexport class MinComponent\n  extends PrimitiveCRDT<CNumberEventsRecord>\n  implements StatefulCRDT<CNumberState>\n{\n  readonly state: CNumberState;\n\n  constructor(initToken: InitToken, initialState: CNumberState) {\n    super(initToken);\n    this.state = initialState;\n  }\n\n  min(toComp: number) {\n    const message = CNumberComponentMessage.create({ arg: toComp });\n    const buffer = CNumberComponentMessage.encode(message).finish();\n    this.sendCRDT(buffer);\n  }\n\n  protected receiveCRDT(message: string | Uint8Array, meta: MessageMeta) {\n    const decoded = CNumberComponentMessage.decode(<Uint8Array>message);\n    const previousValue = this.state.value;\n    this.state.value = Math.min(this.state.value, decoded.arg);\n    this.emit(\"Min\", {\n      meta,\n      arg: decoded.arg,\n      previousValue,\n    });\n  }\n\n  canGC() {\n    return this.state.value === this.state.initialValue;\n  }\n\n  save(): Uint8Array {\n    const message = CNumberComponentMessage.create({\n      arg: this.state.value,\n    });\n    return CNumberComponentMessage.encode(message).finish();\n  }\n\n  load(saveData: Optional<Uint8Array>) {\n    if (!saveData.isPresent) return;\n    this.state.value = CNumberComponentMessage.decode(saveData.get()).arg;\n  }\n}\n\nexport class MaxComponent\n  extends PrimitiveCRDT<CNumberEventsRecord>\n  implements StatefulCRDT<CNumberState>\n{\n  readonly state: CNumberState;\n\n  constructor(initToken: InitToken, initialState: CNumberState) {\n    super(initToken);\n    this.state = initialState;\n  }\n\n  max(toComp: number) {\n    const message = CNumberComponentMessage.create({ arg: toComp });\n    const buffer = CNumberComponentMessage.encode(message).finish();\n    this.sendCRDT(buffer);\n  }\n\n  protected receiveCRDT(message: string | Uint8Array, meta: MessageMeta) {\n    const decoded = CNumberComponentMessage.decode(<Uint8Array>message);\n    const previousValue = this.state.value;\n    this.state.value = Math.max(this.state.value, decoded.arg);\n    this.emit(\"Max\", {\n      meta,\n      arg: decoded.arg,\n      previousValue,\n    });\n  }\n\n  canGC() {\n    return this.state.value === this.state.initialValue;\n  }\n\n  save(): Uint8Array {\n    const message = CNumberComponentMessage.create({\n      arg: this.state.value,\n    });\n    return CNumberComponentMessage.encode(message).finish();\n  }\n\n  load(saveData: Optional<Uint8Array>) {\n    if (!saveData.isPresent) return;\n    this.state.value = CNumberComponentMessage.decode(saveData.get()).arg;\n  }\n}\n\n/**\n * Unlike CNumber, this doesn't allow multiplications with\n * negative args.\n */\nclass CNumberBase extends MultipleSemidirectProduct<CNumberState> {\n  minCRDT: MinComponent;\n  maxCRDT: MaxComponent;\n  addCRDT: AddComponent;\n  multCRDT: MultComponent;\n  constructor(initToken: InitToken, initialValue: number) {\n    super(initToken);\n\n    const state = new CNumberState(initialValue);\n    super.setupState(state);\n    /**\n     * Arbitration order\n     * 0: min\n     * 1: max\n     * 2: add\n     * 3: mult\n     */\n    this.minCRDT = super.setupOneCRDT(Pre(MinComponent)(state));\n    this.maxCRDT = super.setupOneCRDT(Pre(MaxComponent)(state));\n    this.addCRDT = super.setupOneCRDT(Pre(AddComponent)(state));\n    this.multCRDT = super.setupOneCRDT(Pre(MultComponent)(state));\n  }\n\n  protected action(\n    m2MessagePath: Message[],\n    _m2Meta: MessageMeta,\n    m2Index: number,\n    m1MessagePath: Message[],\n    _m1Meta: MessageMeta | null\n  ): { m1MessagePath: Message[] } | null {\n    const m2Decoded = CNumberComponentMessage.decode(\n      <Uint8Array>m2MessagePath[0]\n    );\n    const m1Decoded = CNumberComponentMessage.decode(\n      <Uint8Array>m1MessagePath[0]\n    );\n    let actedArg: number;\n    switch (m2Index) {\n      case 3:\n        actedArg = m2Decoded.arg * m1Decoded.arg;\n        break;\n      case 2:\n        actedArg = m2Decoded.arg + m1Decoded.arg;\n        break;\n      case 1:\n        actedArg = Math.max(m2Decoded.arg, m1Decoded.arg);\n        break;\n      default:\n        actedArg = m1Decoded.arg;\n    }\n    const acted = CNumberComponentMessage.create({\n      arg: actedArg,\n    });\n\n    return {\n      m1MessagePath: [CNumberComponentMessage.encode(acted).finish()],\n    };\n  }\n\n  get value(): number {\n    return this.state.internalState.value;\n  }\n}\n\n/**\n * Experimental; stable alternatives are [[CCounter]], [[ResettableCCounter]],\n * and [[LwwCVariable]]`<number>`.\n *\n * Experimental warnings:\n * - Eventual consistency may fail due to rounding issues.\n * The only safe way is to stick to integer operands that aren't\n * large enough to overflow anything.\n * - Uses tombstones (one per operation).  So the memory\n * usage will grow without bound, unlike most of our Collabs.\n *\n * See https://github.com/composablesys/collabs/issues/177\n */\nexport class CNumber extends CObject<CNumberEventsRecord> {\n  private base: CNumberBase;\n  /**\n   * Used to implement negative multiplications, which don't\n   * directly obey the semidirect product rules with min and\n   * max.  Instead, we use this boolean.  If true, the value\n   * is a negated view of our internal state.  Correspondingly,\n   * add, min, and max args must be negated, and min/max must\n   * be switched.\n   */\n  private negated: ToggleCBoolean;\n\n  constructor(initToken: InitToken, initialValue = 0) {\n    super(initToken);\n\n    this.base = this.addChild(\"\", Pre(CNumberBase)(initialValue));\n    this.negated = this.addChild(\"0\", Pre(ToggleCBoolean)());\n\n    this.base.minCRDT.on(\"Min\", (event) => {\n      if (this.negated.value) {\n        super.emit(\"Max\", {\n          arg: -event.arg,\n          previousValue: -event.previousValue,\n          meta: event.meta,\n        });\n      } else super.emit(\"Min\", event);\n    });\n    this.base.maxCRDT.on(\"Max\", (event) => {\n      if (this.negated.value) {\n        super.emit(\"Min\", {\n          arg: -event.arg,\n          previousValue: -event.previousValue,\n          meta: event.meta,\n        });\n      } else super.emit(\"Max\", event);\n    });\n    this.base.addCRDT.on(\"Add\", (event) => {\n      if (this.negated.value) {\n        super.emit(\"Add\", {\n          arg: -event.arg,\n          previousValue: -event.previousValue,\n          meta: event.meta,\n        });\n      } else super.emit(\"Add\", event);\n    });\n    this.base.multCRDT.on(\"Mult\", (event) => super.emit(\"Mult\", event));\n    this.negated.on(\"Set\", (event) =>\n      super.emit(\"Mult\", {\n        arg: -1,\n        previousValue: -this.value,\n        meta: event.meta,\n      })\n    );\n  }\n\n  add(toAdd: number) {\n    if (this.negated.value) {\n      this.base.addCRDT.add(-toAdd);\n    } else this.base.addCRDT.add(toAdd);\n  }\n\n  mult(toMult: number) {\n    if (toMult < 0) {\n      this.negated.toggle();\n      this.base.multCRDT.mult(-toMult);\n    } else this.base.multCRDT.mult(toMult);\n  }\n\n  min(toComp: number) {\n    if (this.negated.value) {\n      this.base.maxCRDT.max(-toComp);\n    } else this.base.minCRDT.min(toComp);\n  }\n\n  max(toComp: number) {\n    if (this.negated.value) {\n      this.base.minCRDT.min(-toComp);\n    } else this.base.maxCRDT.max(toComp);\n  }\n\n  get value(): number {\n    const value = (this.negated.value ? -1 : 1) * this.base.value;\n    // Although -0 === 0, some notions of equality\n    // (in particular chai's assert.deepStrictEqual)\n    // treat them differently.  This is a hack to prevent\n    // -0 vs 0 from violating EC under this equality def.\n    // It might be related to general floating point\n    // noncommutativity and will go away once we fix that.\n    return value === 0 ? 0 : value;\n  }\n\n  /**\n   * @return this.value.toString()\n   */\n  toString(): string {\n    return this.value.toString();\n  }\n}\n", "id": "collabs:crdts/src/number/number.ts:53d60693-a1a9-4b8f-b3ce-7540c4ae99b4"}
{"path": "example/storybook/stories/components/primitives/Icon/ThirdPartyIcons.tsx", "project_name": "NativeBase", "text": "import React from 'react';\nimport { Icon, Center, HStack } from 'native-base';\nimport { MaterialCommunityIcons, AntDesign, Entypo } from '@expo/vector-icons';\n\nexport const Example = () => {\n  return (\n    <Center>\n      <HStack space={3}>\n        <Icon\n          as={AntDesign}\n          name=\"android1\"\n          color=\"coolGray.800\"\n          _dark={{ color: 'warmGray.50' }}\n        />\n        <Icon\n          as={Entypo}\n          name=\"app-store\"\n          color=\"coolGray.800\"\n          _dark={{ color: 'warmGray.50' }}\n        />\n        <Icon\n          as={MaterialCommunityIcons}\n          name=\"web\"\n          color=\"coolGray.800\"\n          _dark={{ color: 'warmGray.50' }}\n        />\n      </HStack>\n    </Center>\n  );\n};\n", "id": "NativeBase:example/storybook/stories/components/primitives/Icon/ThirdPartyIcons.tsx:4dbde7d0-f391-49dd-b44a-6a3540c173ad"}
{"path": "src/typescript-reporter/extension/vue/TypeScriptVueExtensionSupport.ts", "project_name": "fork-ts-checker-webpack-plugin", "text": "import { TypeScriptVueExtensionConfiguration } from './TypeScriptVueExtensionConfiguration';\n\nfunction assertTypeScriptVueExtensionSupport(configuration: TypeScriptVueExtensionConfiguration) {\n  // We need to import template compiler for vue lazily because it cannot be included it\n  // as direct dependency because it is an optional dependency of fork-ts-checker-webpack-plugin.\n  // Since its version must not mismatch with user-installed Vue.js,\n  // we should let the users install template compiler for vue by themselves.\n  const compilerName = configuration.compiler;\n\n  try {\n    require(compilerName);\n  } catch (error) {\n    throw new Error(\n      [\n        `Could not initialize '${compilerName}'. When you use 'typescript.extensions.vue' option, make sure to install '${compilerName}' and that the version matches that of 'vue'.`,\n        `Error details: ${error.message}`,\n      ].join('\\n')\n    );\n  }\n}\n\nexport { assertTypeScriptVueExtensionSupport };\n", "id": "fork-ts-checker-webpack-plugin:src/typescript-reporter/extension/vue/TypeScriptVueExtensionSupport.ts:d729ccf8-d24d-40e9-8eae-05c02cca3232"}
{"path": "playground/src/diagnose.ts", "project_name": "markuplint", "text": "import type { LocaleSet } from '@markuplint/i18n';\nimport type { Violation } from '@markuplint/ml-config';\nimport type { AnyRuleSeed, Ruleset } from '@markuplint/ml-core';\nimport type { editor } from 'monaco-editor';\n\nimport * as HTMLParser from '@markuplint/html-parser';\nimport spec from '@markuplint/html-spec';\nimport { MLRule, MLCore } from '@markuplint/ml-core';\nimport { getEndCol, getEndLine } from '@markuplint/parser-utils';\nimport rules from '@markuplint/rules';\n\nexport type { MLCore } from '@markuplint/ml-core';\n\nexport const createLinter = async (ruleset: Ruleset) => {\n\tconst language = navigator.language || '';\n\tconst langCode = language.split(/_|-/)[0];\n\t// @ts-ignore TODO: Solve types\n\tconst localSet: LocaleSet =\n\t\tlangCode === 'ja'\n\t\t\t? await import('@markuplint/i18n/locales/ja.json')\n\t\t\t: await import('@markuplint/i18n/locales/en.json');\n\tconst linter = new MLCore({\n\t\tparser: HTMLParser,\n\t\tsourceCode: '',\n\t\truleset,\n\t\trules: Object.entries(rules as Record<string, AnyRuleSeed>).map(\n\t\t\t([name, seed]) => new MLRule({ name, ...seed }),\n\t\t),\n\t\tlocale: localSet,\n\t\tschemas: [spec],\n\t\tparserOptions: {},\n\t\tfilename: 'playground.html',\n\t});\n\treturn linter;\n};\n\nexport const diagnose = async (reports: Violation[]) => {\n\tconst diagnotics: editor.IMarkerData[] = [];\n\tfor (const report of reports) {\n\t\tdiagnotics.push({\n\t\t\tseverity: report.severity === 'warning' ? 4 : 8,\n\t\t\tstartLineNumber: report.line,\n\t\t\tstartColumn: report.col,\n\t\t\tendLineNumber: getEndLine(report.raw, report.line),\n\t\t\tendColumn: getEndCol(report.raw, report.col),\n\t\t\tmessage: `${report.message} (${report.ruleId}) <markuplint>`,\n\t\t});\n\t}\n\n\treturn diagnotics;\n};\n", "id": "markuplint:playground/src/diagnose.ts:c07e1e19-8efb-4f21-9c57-608b489df18a"}
{"path": "test/spec/oidc/renewTokens.ts", "project_name": "okta-auth-js", "text": "/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport tokens from '@okta/test.support/tokens';\nimport oauthUtil from '@okta/test.support/oauthUtil';\n\ndescribe('token.renewTokens', function() {\n  it('should return tokens', function() {\n    return oauthUtil.setupFrame({\n      oktaAuthArgs: {\n        pkce: false,\n        issuer: 'https://auth-js-test.okta.com',\n        clientId: 'NPSfOkH5eZrTy8PMDlvx',\n        redirectUri: 'https://example.com/redirect'\n      },\n      tokenRenewTokensArgs: [],\n      postMessageSrc: {\n        baseUri: 'https://auth-js-test.okta.com/oauth2/v1/authorize',\n        queryParams: {\n          'client_id': 'NPSfOkH5eZrTy8PMDlvx',\n          'redirect_uri': 'https://example.com/redirect',\n          'response_type': 'token id_token',\n          'response_mode': 'okta_post_message',\n          'state': oauthUtil.mockedState,\n          'nonce': oauthUtil.mockedNonce,\n          'scope': 'openid email',\n          'prompt': 'none'\n        }\n      },\n      time: 1449699929,\n      postMessageResp: {\n        'id_token': tokens.standardIdToken,\n        'access_token': tokens.standardAccessToken,\n        'expires_in': 3600,\n        'token_type': 'Bearer',\n        'state': oauthUtil.mockedState\n      },\n      validateFunc: ({ accessToken, idToken }) => {\n        oauthUtil.validateResponse(accessToken, tokens.standardAccessTokenParsed);\n        oauthUtil.validateResponse(idToken, tokens.standardIdTokenParsed);\n      }\n    });\n  });\n\n  it('should return tokens with authorization server', function() {\n    return oauthUtil.setupFrame({\n      oktaAuthArgs: {\n        pkce: false,\n        issuer: 'https://auth-js-test.okta.com/oauth2/aus8aus76q8iphupD0h7',\n        clientId: 'NPS<KEY>',\n        redirectUri: 'https://example.com/redirect'\n      },\n      tokenRenewTokensArgs: [],\n      postMessageSrc: {\n        baseUri: 'https://auth-js-test.okta.com/oauth2/aus8aus76q8iphupD0h7/v1/authorize',\n        queryParams: {\n          'client_id': 'NPSfOkH5eZrTy8PMDlvx',\n          'redirect_uri': 'https://example.com/redirect',\n          'response_type': 'token id_token',\n          'response_mode': 'okta_post_message',\n          'state': oauthUtil.mockedState,\n          'nonce': oauthUtil.mockedNonce,\n          'scope': 'openid email',\n          'prompt': 'none'\n        }\n      },\n      time: 1449699929,\n      postMessageResp: {\n        'id_token': tokens.authServerIdToken,\n        'access_token': tokens.authServerAccessToken,\n        'expires_in': 3600,\n        'token_type': 'Bearer',\n        'state': oauthUtil.mockedState\n      },\n      validateFunc: (res) => {\n        oauthUtil.validateResponse(res.accessToken, tokens.authServerAccessTokenParsed);\n        oauthUtil.validateResponse(res.idToken, tokens.authServerIdTokenParsed);\n      }\n    });\n  });\n\n  it('should accept tokenParams options', function() {\n    return oauthUtil.setupFrame({\n      oktaAuthArgs: {\n        pkce: false,\n        issuer: 'https://auth-js-test.okta.com',\n        clientId: 'NPSfOkH5eZrTy8PMDlvx',\n        redirectUri: 'https://example.com/redirect'\n      },\n      tokenRenewTokensArgs: [{ scopes: ['openid', 'email', 'profile'] }],\n      postMessageSrc: {\n        baseUri: 'https://auth-js-test.okta.com/oauth2/v1/authorize',\n        queryParams: {\n          'client_id': 'NPSfOkH5eZrTy8PMDlvx',\n          'redirect_uri': 'https://example.com/redirect',\n          'response_type': 'token id_token',\n          'response_mode': 'okta_post_message',\n          'state': oauthUtil.mockedState,\n          'nonce': oauthUtil.mockedNonce,\n          'scope': 'openid email profile',\n          'prompt': 'none'\n        }\n      },\n      time: 1449699929,\n      postMessageResp: {\n        'id_token': tokens.standardIdToken,\n        'access_token': tokens.standardAccessToken,\n        'expires_in': 3600,\n        'token_type': 'Bearer',\n        'state': oauthUtil.mockedState\n      },\n      validateFunc: ({ accessToken, idToken }) => {\n        oauthUtil.validateResponse(accessToken, tokens.standardAccessTokenParsed);\n        oauthUtil.validateResponse(idToken, tokens.standardIdTokenParsed);\n      }\n    });\n  });\n\n  it('returns access token when SDK is configured with { responseType: \\'token\\' }', function() {\n    return oauthUtil.setupFrame({\n      oktaAuthArgs: {\n        pkce: false,\n        issuer: 'https://auth-js-test.okta.com',\n        clientId: 'NPSfOkH5eZrTy8PMDlvx',\n        redirectUri: 'https://example.com/redirect',\n        responseType: ['token'],\n      },\n      tokenRenewTokensArgs: [],\n      postMessageSrc: {\n        baseUri: 'https://auth-js-test.okta.com/oauth2/v1/authorize',\n        queryParams: {\n          'client_id': 'NPSfOkH5eZrTy8PMDlvx',\n          'redirect_uri': 'https://example.com/redirect',\n          'response_type': 'token',\n          'response_mode': 'okta_post_message',\n          'state': oauthUtil.mockedState,\n          'nonce': oauthUtil.mockedNonce,\n          'scope': 'openid email',\n          'prompt': 'none'\n        }\n      },\n      time: 1449699929,\n      postMessageResp: {\n        'access_token': tokens.standardAccessToken,\n        'expires_in': 3600,\n        'token_type': 'Bearer',\n        'state': oauthUtil.mockedState\n      },\n      validateFunc: ({ accessToken }) => {\n        oauthUtil.validateResponse(accessToken, tokens.standardAccessTokenParsed);\n      }\n    });\n  });\n\n  it('returns ID token when SDK is configured with { responseType: \\'id_token\\' }', function() {\n    return oauthUtil.setupFrame({\n      oktaAuthArgs: {\n        pkce: false,\n        issuer: 'https://auth-js-test.okta.com',\n        clientId: 'NPSfOkH5eZrTy8PMDlvx',\n        redirectUri: 'https://example.com/redirect',\n        responseType: ['id_token'],\n      },\n      tokenRenewTokensArgs: [],\n      postMessageSrc: {\n        baseUri: 'https://auth-js-test.okta.com/oauth2/v1/authorize',\n        queryParams: {\n          'client_id': 'NPSfOkH5eZrTy8PMDlvx',\n          'redirect_uri': 'https://example.com/redirect',\n          'response_type': 'id_token',\n          'response_mode': 'okta_post_message',\n          'state': oauthUtil.mockedState,\n          'nonce': oauthUtil.mockedNonce,\n          'scope': 'openid email',\n          'prompt': 'none'\n        }\n      },\n      time: 1449699929,\n      postMessageResp: {\n        'id_token': tokens.standardIdToken,\n        'expires_in': 3600,\n        'token_type': 'Bearer',\n        'state': oauthUtil.mockedState\n      },\n      validateFunc: ({ idToken }) => {\n        oauthUtil.validateResponse(idToken, tokens.standardIdTokenParsed);\n      }\n    });\n  });\n});\n", "id": "okta-auth-js:test/spec/oidc/renewTokens.ts:836a6dee-09f9-46fa-89b7-5c08679e59e1"}
{"path": "src/accordion/AccordionState.ts", "project_name": "renderlesskit-react", "text": "import * as React from \"react\";\nimport { Dispatch, SetStateAction } from \"react\";\nimport { useControllableState } from \"@chakra-ui/hooks\";\n\nimport {\n  AccordionBaseActions,\n  AccordionBaseInitialState,\n  AccordionBaseState,\n  useAccordionBaseState,\n} from \"./AccordionBaseState\";\nimport { StringOrNull } from \"./helpers\";\n\nexport function useAccordionState(\n  props: AccordionInitialState = {},\n): AccordionStateReturn {\n  const { manual = true, allowToggle = false } = props;\n  const { move, ...baseState } = useAccordionBaseState(props);\n\n  const [selectedId, setSelectedId] = useControllableState({\n    defaultValue: props?.defaultSelectedId || null,\n    value: props?.selectedId,\n    onChange: props?.onSelectedIdChange,\n  });\n\n  const select = React.useCallback(\n    (id: string) => {\n      move(id);\n\n      if (allowToggle && id === selectedId) {\n        setSelectedId(null);\n        return;\n      }\n\n      setSelectedId(id);\n    },\n\n    [move, allowToggle, selectedId, setSelectedId],\n  );\n\n  return {\n    selectedId,\n    setSelectedId,\n    select,\n    manual,\n    allowToggle,\n    allowMultiple: false,\n    move,\n    ...baseState,\n  };\n}\n\nexport type AccordionState = AccordionBaseState & {\n  /**\n   * The current selected accordion's `id`.\n   */\n  selectedId: StringOrNull;\n\n  /**\n   * Allow to toggle accordion items\n   * @default false\n   */\n  allowToggle: boolean;\n\n  /**\n   * Allow to open multiple accordion items\n   */\n  allowMultiple: boolean;\n\n  /**\n   * Whether the accodion selection should be manual.\n   * @default true\n   */\n  manual: boolean;\n};\n\nexport type AccordionActions = AccordionBaseActions & {\n  /**\n   * Sets the value.\n   */\n  setSelectedId: Dispatch<SetStateAction<StringOrNull>>;\n\n  /**\n   * Moves into and selects an accordion by its `id`.\n   */\n  select: (id: string) => void;\n};\n\nexport type AccordionInitialState = Pick<\n  Partial<AccordionState>,\n  \"manual\" | \"allowToggle\" | \"selectedId\"\n> & {\n  /**\n   * The initial value to be used, in uncontrolled mode\n   * @default null\n   */\n  defaultSelectedId?: StringOrNull | (() => StringOrNull);\n  /**\n   * The callback fired when the value changes\n   */\n  onSelectedIdChange?: (value: StringOrNull) => void;\n  /**\n   * The function that determines if the state should be updated\n   */\n  shouldUpdate?: (prev: StringOrNull, next: StringOrNull) => boolean;\n} & AccordionBaseInitialState;\n\nexport type AccordionStateReturn = AccordionState & AccordionActions;\n", "id": "renderlesskit-react:src/accordion/AccordionState.ts:ef085d53-e3b6-42d5-b09c-18270cd2df33"}
{"path": "@types/jdk/java.security.cert.CertificateFactory.d.ts", "project_name": "1c", "text": "declare namespace java {\n  namespace security {\n    namespace cert {\n\n      class CertificateFactory {\n        protected constructor(arg0: java.security.cert.CertificateFactorySpi, arg1: java.security.Provider, arg2: java.lang.String | string)\n        public static getInstance(arg0: java.lang.String | string): java.security.cert.CertificateFactory\n        public static getInstance(arg0: java.lang.String | string, arg1: java.lang.String | string): java.security.cert.CertificateFactory\n        public static getInstance(arg0: java.lang.String | string, arg1: java.security.Provider): java.security.cert.CertificateFactory\n        public getProvider(): java.security.Provider\n        public getType(): java.lang.String\n        public generateCertificate(arg0: java.io.InputStream): java.security.cert.Certificate\n        public getCertPathEncodings(): java.util.Iterator<java.lang.String>\n        public generateCertPath(arg0: java.io.InputStream): java.security.cert.CertPath\n        public generateCertPath(arg0: java.io.InputStream, arg1: java.lang.String | string): java.security.cert.CertPath\n        public generateCertPath(arg0: java.util.List<java.security.cert.Certificate>): java.security.cert.CertPath\n        public generateCertificates(arg0: java.io.InputStream): java.util.Collection<java.security.cert.Certificate>\n        public generateCRL(arg0: java.io.InputStream): java.security.cert.CRL\n        public generateCRLs(arg0: java.io.InputStream): java.util.Collection<java.security.cert.CRL>\n      }\n\n    }\n  }\n}\n", "id": "1c:@types/jdk/java.security.cert.CertificateFactory.d.ts:4c989cdb-26cc-47d0-a7a0-69b5633ec9af"}
{"path": "components/tooltip/index.ts", "project_name": "bangle", "text": "import * as selectionTooltip from './selection-tooltip';\nimport type { SuggestTooltipRenderOpts } from './suggest-tooltip';\nimport * as suggestTooltip from './suggest-tooltip';\nimport type { TooltipRenderOpts } from './tooltip-placement';\nimport * as tooltipPlacement from './tooltip-placement';\n\nexport * from './create-tooltip-dom';\nexport { tooltipPlacement, selectionTooltip, suggestTooltip };\nexport type { TooltipRenderOpts };\nexport type { SuggestTooltipRenderOpts };\n", "id": "bangle:components/tooltip/index.ts:024853ce-09da-4567-944d-fa47bfd562bc"}
{"path": "src/render/renderer.ts", "project_name": "phodit", "text": "import { EventConstants } from \"../common/constants/event.constants\";\nimport { IFileOpen } from \"../common/interface/IFileOpen\";\nimport \"./key.event\";\nimport \"./menu.right\";\nimport { createTerminal } from \"./plugins/terminal\";\nimport { createEvent } from \"./support/event.util\";\nimport { getCodeMirrorMode } from \"./support/file.utils\";\nimport { markdownRender, removeLastDirectoryPartOf } from \"./support/markdown.utils\";\n\nconst {nativeTheme, ipcRenderer} = require(\"electron\");\n\nconst swal = require(\"sweetalert\");\n\ndeclare global {\n  // tslint:disable-next-line\n  interface Window {\n    easymde: any;\n  }\n}\n\nclass ClientUI {\n  public state = {\n    isShowTerminal: false,\n    hasCreateTerminal: false,\n    currentFile: \"\",\n    isCurrentFileTemp: false,\n    isOneFile: false,\n    isPath: false,\n  };\n\n  public easymde = new (window as any).EasyMDE({\n    spellChecker: false,\n    autosave: {\n      enabled: true,\n      uniqueId: \"phodit\",\n      delay: 1000,\n    },\n    promptTexts: {\n      link: \"link\",\n      image: \"image\",\n    },\n    minHeight: \"500px\",\n    maxHeight: \"100%\",\n    autoDownloadFontAwesome: false,\n    syncSideBySidePreviewScroll: false,\n    renderingConfig: {\n      singleLineBreaks: false,\n      codeSyntaxHighlighting: true\n    },\n    element: document.getElementById(\"input-section\"),\n  });\n\n  public init() {\n    (window as any).easymde = this.easymde;\n    // @ts-ignore\n    const clipboard = new ClipboardJS(\".wechat-button\");\n    this.easymde.codemirror.focus()\n\n    this.easymde.codemirror.on('optionChange', () => {\n      this.renderElements();\n    })\n    this.easymde.codemirror.on('cursorActivity', () => {\n      this.renderElements();\n    })\n    this.easymde.codemirror.on('viewportChange', () => {\n      this.renderElements();\n    })\n\n    clipboard.on(\"success\", (event: any) => {\n      swal({\n        title: \"Copy Success\", icon: \"success\", dangerMode: true,\n        buttons: {\n          confirm: {text: \"OK\"},\n        },\n      });\n      event.clearSelection();\n    });\n  }\n\n  private renderElements() {\n    this.easymde.codemirror.execCommand('markdownRenderImages');\n  }\n\n  public updatePos(currentFile: string) {\n    const lastPos = localStorage.getItem(\"line_\" + currentFile);\n    if (lastPos) {\n      const parsedPos = JSON.parse(lastPos);\n      this.easymde.codemirror.setCursor(parsedPos.line, parsedPos.ch);\n    }\n  }\n\n  public bindEvent() {\n    const that = this;\n    // 打开帮助\n    window.document.addEventListener(EventConstants.CLIENT.OPEN_GUIDE, (data) => {\n      ipcRenderer.send(EventConstants.PHODIT.OPEN_GUIDE, this.easymde.value());\n    });\n\n    // 全屏\n    window.document.addEventListener(EventConstants.CLIENT.FULL_SCREEN, (data) => {\n      document.getElementById(\"input\").classList.add(\"full-screen\");\n      ipcRenderer.send(EventConstants.PHODIT.FULL_SCREEN);\n    });\n\n    // 取消全屏\n    window.document.addEventListener(EventConstants.CLIENT.UN_FULL_SCREEN, (data) => {\n      document.getElementById(\"input\").classList.remove(\"full-screen\");\n      ipcRenderer.send(EventConstants.PHODIT.UN_FULL_SCREEN);\n    });\n\n    // Terminal show\n    window.document.addEventListener(EventConstants.CLIENT.SHOW_TERMINAL, () => {\n      if (!this.state.hasCreateTerminal) {\n        createTerminal(removeLastDirectoryPartOf(this.state.currentFile));\n        this.state.hasCreateTerminal = true;\n      }\n\n      this.state.isShowTerminal = !this.state.isShowTerminal;\n      if (this.state.isShowTerminal) {\n        document.getElementById(\"terminal-section\").setAttribute(\"style\", \"display: block;\");\n      } else {\n        document.getElementById(\"terminal-section\").setAttribute(\"style\", \"display: none;\");\n      }\n    });\n\n    // Terminal hidden\n    window.document.addEventListener(EventConstants.CLIENT.HIDDEN_TERMINAL, () => {\n      document.getElementById(\"terminal-section\").setAttribute(\"style\", \"display: none;\");\n    });\n\n    // Toggle Themes\n    window.document.addEventListener(EventConstants.CLIENT.TOGGLE_THEME, () => {\n      ipcRenderer.send(EventConstants.PHODIT.TOGGLE_THEME);\n      this.toggleTheme(that.easymde.codemirror);\n    });\n\n    // ShowSlides\n    window.document.addEventListener(EventConstants.CLIENT.SHOW_SLIDES, () => {\n      if (!this.state.currentFile) {\n        return;\n      }\n      ipcRenderer.send(EventConstants.PHODIT.SHOW_SLIDES, {\n        isTempFile: this.state.isCurrentFileTemp,\n        file: this.state.currentFile,\n        data: this.easymde.value(),\n      });\n    });\n\n    // 隐藏 SIDE\n    window.document.addEventListener(EventConstants.CLIENT.HIDDEN_SIDE, () => {\n      document.getElementById(\"tree-view\").setAttribute(\"style\", \"display: none;\");\n      document.querySelector(\".wechat-button\").setAttribute(\"data-clipboard-target\", \".editor-preview-side\");\n    });\n\n    // 展示 SIDE\n    window.document.addEventListener(EventConstants.CLIENT.SHOW_SIDE, () => {\n      document.querySelector(\".wechat-button\").removeAttribute(\"data-clipboard-target\");\n      if (this.state.isPath) {\n        document.getElementById(\"tree-view\").setAttribute(\"style\", \"display: block;\");\n      }\n    });\n\n    // 发起获取自动完成请求\n    window.document.addEventListener(EventConstants.CLIENT.GET_SUGGEST, (data: any) => {\n      ipcRenderer.send(EventConstants.PHODIT.GET_SUGGEST, data.detail);\n    });\n\n    // 打开左侧树型文件\n    window.document.addEventListener(EventConstants.CLIENT.TREE_OPEN, (event: any) => {\n      const file = JSON.parse(event.detail).filename;\n      this.state.currentFile = file;\n      this.state.isOneFile = true;\n\n      ipcRenderer.send(EventConstants.PHODIT.SAVE_FILE, {\n        isTempFile: this.state.isCurrentFileTemp,\n        data: this.easymde.value(),\n      });\n\n      ipcRenderer.send(EventConstants.PHODIT.OPEN_FILE, file);\n    });\n\n    // 返回 Markdown 渲染结果\n    window.document.addEventListener(EventConstants.CLIENT.SEND_MARKDOWN, (event: any) => {\n      const data = markdownRender(event.detail, this.state.currentFile);\n      createEvent(EventConstants.CLIENT.GET_RENDERER_MARKDOWN, data);\n    });\n\n    // Pandoc 转换\n    window.document.addEventListener(EventConstants.CLIENT.SHOW_WORD, (event: any) => {\n      swal({\n        title: \"Open File\", text: \"Are you want to Open File\", icon: \"info\", dangerMode: true,\n        buttons: {\n          cancel: {text: \"Cancel\", visible: true},\n          confirm: {text: \"OK\"},\n        },\n      }).then((willDelete: any) => {\n        if (willDelete) {\n          ipcRenderer.send(EventConstants.PHODIT.SHOW_WORD, this.state.currentFile);\n        }\n      });\n    });\n\n    // Pandoc 转换\n    window.document.addEventListener(EventConstants.CLIENT.SHOW_PDF, (event: any) => {\n      swal({\n        title: \"Open File\", text: \"Are you want to Open File\", icon: \"info\", dangerMode: true,\n        buttons: {\n          cancel: {text: \"Cancel\", visible: true},\n          confirm: {text: \"OK\"},\n        },\n      }).then((willDelete: any) => {\n        if (willDelete) {\n          ipcRenderer.send(EventConstants.PHODIT.SHOW_PDF, this.state.currentFile);\n        }\n      });\n    });\n\n    // 返回获取自动完成请求\n    ipcRenderer.on(EventConstants.PHODIT.SUGGEST_SEND, (event: any, arg: any) => {\n      createEvent(EventConstants.PHODIT.SUGGEST_TO_EDITOR, arg);\n    });\n\n    // 返回获取自动完成请求\n    ipcRenderer.on(EventConstants.PHODIT.TOGGLE_THEME, (event: any, arg: any) => {\n      createEvent(EventConstants.CLIENT.TOGGLE_THEME, arg);\n    });\n\n    // 打开文件\n    ipcRenderer.on(EventConstants.PHODIT.OPEN_ONE_FILE, (event: any, arg: IFileOpen) => {\n      this.state.currentFile = arg.file;\n      this.state.isOneFile = false;\n      this.state.isCurrentFileTemp = arg.isTempFile;\n      this.easymde.codemirror.setOption(\"mode\", getCodeMirrorMode(this.state.currentFile));\n      this.easymde.value(arg.data);\n      this.updatePos(arg.file);\n\n      localStorage.setItem(\"currentFile\", arg.file);\n    });\n\n    // 保存文件\n    ipcRenderer.on(EventConstants.CLIENT.SAVE_FILE, () => {\n      ipcRenderer.send(EventConstants.PHODIT.SAVE_FILE, {\n        isTempFile: this.state.isCurrentFileTemp,\n        data: this.easymde.value(),\n      });\n    });\n\n    // 打开某一目录\n    ipcRenderer.on(EventConstants.PHODIT.OPEN_PATH, (event: any, arg: any) => {\n      this.state.isPath = true;\n      document.getElementById(\"tree-view\").setAttribute(\"style\", \"display: block\");\n      (window as any).rootPath = arg.path + '/';\n      localStorage.setItem(\"currentPath\", arg.path + '/');\n\n      createEvent(\"phodit.tree.open\", {\n        path: arg.path,\n        tree: arg.tree,\n      });\n    });\n\n    // 改变临时文件的状态\n    ipcRenderer.on(EventConstants.TEMP_FILE_STATUS, (event: any, arg: any) => {\n      this.state.isCurrentFileTemp = arg.isTempFile;\n    });\n  }\n\n  public initTheme() {\n    if (window.localStorage.os_theme === \"dark\") {\n      ipcRenderer.send(EventConstants.PHODIT.SET_THEME, {mode: 'dark'})\n      this.easymde.codemirror.setOption('theme', 'django');\n    } else {\n      ipcRenderer.send(EventConstants.PHODIT.SET_THEME, {mode: 'light'})\n      this.easymde.codemirror.setOption('theme', 'easymde');\n    }\n\n    (window as any).__setTheme();\n  }\n\n  public toggleTheme(codemirror: any) {\n    if (window.localStorage.os_theme === \"dark\") {\n      window.localStorage.os_theme = \"light\";\n      codemirror.setOption('theme', 'easymde');\n    } else {\n      window.localStorage.os_theme = \"dark\";\n      codemirror.setOption('theme', 'django');\n    }\n\n    (window as any).__setTheme();\n  }\n}\n\nconst client = new ClientUI();\nclient.init();\nclient.bindEvent();\n\nclient.initTheme();\n", "id": "phodit:src/render/renderer.ts:e055a553-0a25-4fd0-ab7d-1171ee1e2e1d"}
{"path": "feature-libs/cart/import-export/components/import-to-cart/import-entries-dialog/import-entries-summary/import-entries-summary.component.ts", "project_name": "spartacus", "text": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport {\n  OrderEntriesSource,\n  ProductImportSummary,\n} from '@spartacus/cart/base/root';\nimport { ICON_TYPE } from '@spartacus/storefront';\n\n@Component({\n  selector: 'cx-import-entries-summary',\n  templateUrl: './import-entries-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ImportEntriesSummaryComponent {\n  iconTypes = ICON_TYPE;\n  orderEntriesSource = OrderEntriesSource;\n\n  warningDetailsOpened: boolean = false;\n  errorDetailsOpened: boolean = false;\n\n  @Input()\n  type: string;\n\n  @Input()\n  summary: ProductImportSummary;\n\n  @Output()\n  closeEvent = new EventEmitter<string>();\n\n  close(reason: string): void {\n    this.closeEvent.emit(reason);\n  }\n\n  toggleWarningList(): void {\n    this.warningDetailsOpened = !this.warningDetailsOpened;\n  }\n\n  toggleErrorList(): void {\n    this.errorDetailsOpened = !this.errorDetailsOpened;\n  }\n}\n", "id": "spartacus:feature-libs/cart/import-export/components/import-to-cart/import-entries-dialog/import-entries-summary/import-entries-summary.component.ts:6ea4a1d6-014c-4725-97d2-af5ca448810c"}
{"path": "test/__mocks__/nanoid.ts", "project_name": "react-redux-saga-boilerplate", "text": "// eslint-disable-next-line import/prefer-default-export\nexport const nanoid = () => 'ABCDEF';\n", "id": "react-redux-saga-boilerplate:test/__mocks__/nanoid.ts:fe83a8a3-640a-426f-99aa-c5d0668185c7"}
{"path": "lib/tools/mock-component.ts", "project_name": "shallow-render", "text": "import { directiveResolver } from './reflect';\nimport { Component, forwardRef, Type } from '@angular/core';\nimport { MockOf } from './mock-of.directive';\nimport { TestBed } from '@angular/core/testing';\nimport { mockWithInputsOutputsAndStubs } from './mock-with-inputs-and-outputs-and-stubs';\nimport { NG_VALUE_ACCESSOR, DefaultValueAccessor } from '@angular/forms';\n\nexport const mockComponent = <TComponent extends Type<any>>(\n  component: TComponent,\n  config?: { stubs?: object }\n): TComponent => {\n  const { exportAs, selector } = directiveResolver.resolve(component);\n\n  @MockOf(component)\n  @Component({\n    selector,\n    template: '<ng-content></ng-content>',\n    providers: [\n      { provide: component, useExisting: forwardRef(() => Mock) },\n      { provide: NG_VALUE_ACCESSOR, useClass: DefaultValueAccessor, multi: true },\n    ],\n    exportAs,\n  })\n  class Mock extends mockWithInputsOutputsAndStubs(component, config?.stubs) {}\n\n  // Provide our mock in place of any other usage of 'thing'.\n  // This makes `ViewChild` and `ContentChildren` selectors work!\n  TestBed.overrideComponent(Mock, {\n    add: { providers: [{ provide: component, useExisting: forwardRef(() => Mock) }] },\n  });\n  return Mock as any;\n};\n", "id": "shallow-render:lib/tools/mock-component.ts:fe20bb1a-7daa-45d0-9cd1-fcabcfa64717"}
{"path": "src/app/core/authentication/auth.service.ts", "project_name": "crypto-tracker-ui", "text": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, of } from 'rxjs';\nimport { map, share, switchMap, tap } from 'rxjs/operators';\nimport { TokenService } from './token.service';\nimport { User } from './interface';\nimport { guest } from './user';\nimport { LoginService } from './login.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private user$ = new BehaviorSubject<User>(guest);\n\n  constructor(private loginService: LoginService, private token: TokenService) {\n    this.token\n      .changed()\n      .pipe(switchMap(() => (this.check() ? this.loginService.me() : of(guest))))\n      .subscribe(user => this.user$.next(Object.assign({}, guest, user)));\n\n    this.token\n      .refreshed()\n      .pipe(switchMap(() => this.refresh()))\n      .subscribe();\n  }\n\n  check() {\n    return this.token.valid();\n  }\n\n  login(email: string, password: string, rememberMe = false) {\n    return this.loginService.login(email, password, rememberMe).pipe(\n      tap(token => this.token.set(token)),\n      map(() => this.check())\n    );\n  }\n\n  refresh() {\n    return this.loginService.refresh().pipe(\n      tap(token => this.token.refresh(token)),\n      map(() => this.check())\n    );\n  }\n\n  logout() {\n    return this.loginService.logout().pipe(\n      tap(() => this.token.clear()),\n      map(() => !this.check())\n    );\n  }\n\n  user() {\n    return this.user$.pipe(share());\n  }\n}\n", "id": "crypto-tracker-ui:src/app/core/authentication/auth.service.ts:9220fd33-2835-4ca3-8b0e-782b372e5548"}
{"path": "packages/app/client/src/ui/dialogs/tabManager/tabManager.spec.tsx", "project_name": "BotFramework-Emulator", "text": "//\n// Copyright (c) Microsoft. All rights reserved.\n// Licensed under the MIT license.\n//\n// Microsoft Bot Framework: http://botframework.com\n//\n// Bot Framework Emulator Github:\n// https://github.com/Microsoft/BotFramwork-Emulator\n//\n// Copyright (c) Microsoft Corporation\n// All rights reserved.\n//\n// MIT License:\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"\"AS IS\"\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\nimport { combineReducers, createStore } from 'redux';\nimport { mount } from 'enzyme';\nimport * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { editor } from '@bfemulator/app-shared';\n\nimport { TabManagerContainer } from './tabManagerContainer';\nimport { TabManager } from './tabManager';\n\nconst mockState = {\n  editor: {\n    activeEditor: 'primary',\n    draggingTab: true,\n    editors: {\n      primary: {\n        activeDocumentId: '1234',\n        documents: {\n          'e7985c20-b059-11e8-8bf1-69211e6350d9': {\n            contentType: 'application/vnd.microsoft.bfemulator.document.livechat',\n            documentId: 'e7985c20-b059-11e8-8bf1-69211e6350d9',\n            isGlobal: false,\n          },\n          '12345678': {\n            contentType: 'application/vnd.microsoft.bfemulator.document.transcript',\n            documentId: '12345678',\n            isGlobal: false,\n            fileName: 'CardExamples.transcript',\n          },\n          '1234': {\n            contentType: 'application/vnd.microsoft.bfemulator.document.transcript',\n            documentId: '1234',\n            isGlobal: false,\n          },\n        },\n        recentTabs: ['1234', '12345678', 'e7985c20-b059-11e8-8bf1-69211e6350d9'],\n        tabOrder: ['e7985c20-b059-11e8-8bf1-69211e6350d9', '12345678', '1234'],\n      },\n      secondary: {\n        activeDocumentId: null,\n        documents: {},\n        recentTabs: [],\n        tabOrder: [],\n      },\n    },\n    docsWithPendingChanges: [],\n  },\n};\nconst mockStore = createStore(combineReducers({ editor }), mockState);\nconst windowEvents = [];\nconst mockWindow = {\n  addEventListener: event => {\n    windowEvents.push(event);\n  },\n};\njest.mock('../../../state/store', () => ({\n  get store() {\n    return mockStore;\n  },\n}));\njest.mock('./tabManager.scss', () => ({}));\n\ndescribe('The TabManager component', () => {\n  let parent;\n  let node;\n  let instance;\n  beforeEach(() => {\n    windowEvents.length = 0;\n    parent = mount(\n      <Provider store={mockStore}>\n        <TabManagerContainer window={mockWindow} />\n      </Provider>\n    );\n    node = parent.find(TabManager);\n    instance = node.instance();\n  });\n\n  it('should set event listeners on the window object when the component mounts', () => {\n    expect(windowEvents).toEqual(['keydown', 'keyup']);\n  });\n\n  describe('should set the state as expected when the', () => {\n    it('\"ArrowUp\" key is pressed with the selected index at 0', () => {\n      instance.setState({ showing: true, selectedIndex: 0 });\n      instance.onKeyDown({ key: 'ArrowUp' });\n      expect(instance.state.selectedIndex).toBe(2);\n    });\n\n    it('\"ArrowUp\" key is pressed with the selected index not zero', () => {\n      instance.setState({ showing: true, selectedIndex: 1 });\n      instance.onKeyDown({ key: 'ArrowUp' });\n      expect(instance.state.selectedIndex).toBe(0);\n    });\n\n    it('\"DownArrow\" key is pressed with the selectedIndex not zero', () => {\n      instance.setState({ showing: true, selectedIndex: 2 });\n      instance.onKeyDown({ key: 'DownArrow' });\n      expect(instance.state.selectedIndex).toBe(2);\n    });\n\n    it('\"DownArrow\" key is pressed with the selectedIndex at 0', () => {\n      instance.setState({ showing: true, selectedIndex: 0 });\n      instance.onKeyDown({ key: 'DownArrow' });\n      expect(instance.state.selectedIndex).toBe(0);\n    });\n\n    it('\"Control\" key is pressed', () => {\n      instance.setState({ showing: true, controlIsPressed: false });\n      instance.onKeyDown({ key: 'Control' });\n      expect(instance.state.controlIsPressed).toBeTruthy();\n    });\n  });\n});\n", "id": "BotFramework-Emulator:packages/app/client/src/ui/dialogs/tabManager/tabManager.spec.tsx:572e9c90-6d05-4628-a253-82578e16d220"}
{"path": "packages/plugin-app-core/src/types/base.ts", "project_name": "ice-1", "text": "export interface IExportData {\n  specifier?: string;\n  importSource?: string;\n  exportMembers?: string[];\n  source: string;\n  exportName: string;\n}\n", "id": "ice-1:packages/plugin-app-core/src/types/base.ts:dd32133f-be15-40a8-8c99-087307f3181e"}
{"path": "src/components/Button/index.tsx", "project_name": "bee-mobile", "text": "export { default } from './Button';\nexport { default as ButtonGroup } from './ButtonGroup';\n", "id": "bee-mobile:src/components/Button/index.tsx:ac1cdd0f-1005-4399-9fa3-4d851d83328f"}
{"path": "components/treemap/src/treemap/colormapping.directive.ts", "project_name": "ej2-vue-ui-components", "text": "import { ComponentBase, EJComponentDecorator, allVue, gh } from '@syncfusion/ej2-vue-base';\nimport * as Vue3 from 'vue-class-component';\nimport Vue from 'vue';\n\nexport const isExecute: any = gh ? false : true;\n\nlet vueImport: any;\nif (!isExecute || parseInt(allVue.version) < 3) {\n    vueImport = (Vue3 as any).Vue;\n} else {\n    vueImport = Vue;\n}\n\n@EJComponentDecorator({}, isExecute)\nexport class ColorMappingsDirective extends vueImport {\n    public render(): void {\n        return;\n    }\n    public getTag(): string {\n        return 'e-colorMappings';\n    }\n}\nexport const ColorMappingsPlugin = {\n    name: 'e-colorMappings',\n    install(Vue: any) {\n        Vue.component(ColorMappingsPlugin.name, ColorMappingsDirective);\n    }\n}\n\n\n@EJComponentDecorator({}, isExecute)\nexport class ColorMappingDirective extends vueImport {\n    public render(): void {\n        return;\n    }\n    public getTag(): string {\n        return 'e-colorMapping';\n    }\n}\nexport const ColorMappingPlugin = {\n    name: 'e-colorMapping',\n    install(Vue: any) {\n        Vue.component(ColorMappingPlugin.name, ColorMappingDirective);\n    }\n}\n", "id": "ej2-vue-ui-components:components/treemap/src/treemap/colormapping.directive.ts:2b43bdd8-12ca-4c70-acb3-39c5081fc648"}
{"path": "packages/server-core/src/networking/services.ts", "project_name": "XREngine", "text": "import Instance from './instance/instance.service'\nimport InstanceAttendance from './instance-attendance/instance-attendance.service'\nimport InstanceProvision from './instance-provision/instance-provision.service'\nimport GameServerSubdomainProvision from './gameserver-subdomain-provision/gameserver-subdomain-provision.service'\nimport RtcPorts from './rtc-ports/rtc-ports.service'\n\nexport default [RtcPorts, Instance, GameServerSubdomainProvision, InstanceProvision, InstanceAttendance]\n", "id": "XREngine:packages/server-core/src/networking/services.ts:92178286-30c5-49cc-a69d-1418959a8c01"}
{"path": "dist/lib/angular-markdown-editor/angular-markdown-editor.component.d.ts", "project_name": "test1", "text": "import { AfterViewInit, ElementRef } from '@angular/core';\nimport { EditorLocale, EditorOption } from './models';\nexport declare const MARKDOWN_EDITOR_VALUE_ACCESSOR: any;\nexport declare class AngularMarkdownEditorComponent implements AfterViewInit {\n    private forRootConfig;\n    elm: ElementRef;\n    /** Locale set that has a language and dictionary that can be added as an alternative language. Can be 1 or more dictionaries */\n    locale: EditorLocale | EditorLocale[];\n    /** Id of the textarea DOM element used by the lib */\n    textareaId: string;\n    /** Markdown Editor Options to pass to the element */\n    options?: EditorOption;\n    /** Number of rows for the textarea */\n    rows: number;\n    value: any | any[];\n    onModelChange: Function;\n    onModelTouched: Function;\n    constructor(forRootConfig: EditorOption);\n    ngAfterViewInit(): void;\n    addLocaleSet(editorLocale: EditorLocale | EditorLocale[]): void;\n    initialization(): void;\n    /**\n     * Hook any of the editor event(s) to Dispatch Custom Event so that we can use them in Angular with (onX)=\"doSomething($event.detail.eventData)\"\n     * @param editor options\n     */\n    hookToEditorEvents(options: any): void;\n    /**\n     * Write value to the native element\n     * @param value string\n     */\n    writeValue(value: string): void;\n    registerOnChange(fn: Function): void;\n    registerOnTouched(fn: Function): void;\n    /** Dispatch of Custom Event, which by default will bubble & is cancelable */\n    private dispatchCustomEvent(eventName, data?, isBubbling?, isCancelable?);\n}\n", "id": "test1:dist/lib/angular-markdown-editor/angular-markdown-editor.component.d.ts:7d60e78b-57d7-4075-8d09-3ba5893a8b90"}
{"path": "node_modules/_ali-oss@6.12.0@ali-oss/lib/common/object/postAsyncFetch.d.ts", "project_name": "cms-server", "text": "export declare function postAsyncFetch(this: any, object: any, url: any, options?: any): Promise<object>;\n", "id": "cms-server:node_modules/_ali-oss@6.12.0@ali-oss/lib/common/object/postAsyncFetch.d.ts:98abed3d-e713-496d-b8ad-bdff53d67345"}
{"path": "src/import/graph_process.test.ts", "project_name": "bundle-buddy", "text": "import { GraphEdges } from \"../types\";\nimport { cleanGraph } from \"./graph_process\";\n\nit(\"strips magic prefixes\", () => {\n  const nodes: GraphEdges = [\n    { source: \"commonjs-proxy:/foo.js\", target: \"zap.ts\" }\n  ];\n  const ret = cleanGraph(nodes);\n\n  expect(ret[0].source).toBe(\"foo.js\");\n});\n\nit(\"strips common prefix\", () => {\n  const nodes: GraphEdges = [{ source: \"wow/foo.js\", target: \"wow/zap.ts\" }];\n  const ret = cleanGraph(nodes);\n\n  expect(ret[0].source).toBe(\"foo.js\");\n  expect(ret[0].target).toBe(\"zap.ts\");\n});\n\nit(\"strips common prefix ignoring ignored nodes\", () => {\n  const nodes: GraphEdges = [\n    {\n      source: \"wow/foo.js\",\n      target: \"wow/zap.ts\"\n    },\n    {\n      source: \"fs\",\n      target: \"wow/zap.ts\"\n    }\n  ];\n  const ret = cleanGraph(nodes);\n\n  expect(ret[0].source).toBe(\"foo.js\");\n  expect(ret[0].target).toBe(\"zap.ts\");\n  expect(ret[1].target).toBe(\"zap.ts\");\n});\n\nit(\"strips no matching prefix but common /\", () => {\n  const nodes: GraphEdges = [\n    {\n      source: \"(foo) ./wow.js\",\n      target: \"./zap.ts\"\n    },\n    {\n      source: \"./client.js\",\n      target: \"./zap.ts\"\n    },\n    {\n      source: \"./more.js\",\n      target: \"./no.ts\"\n    }\n  ];\n  const ret = cleanGraph(nodes);\n\n  expect(ret[0].source).toBe(\"(foo) ./wow.js\");\n  expect(ret[2].target).toBe(\"no.ts\");\n});\n", "id": "bundle-buddy:src/import/graph_process.test.ts:0a1746c6-a4e9-4334-8428-f989298e7fa5"}
{"path": "packages/fes/types.d.ts", "project_name": "fes.js", "text": "\n// @ts-ignore\nexport * from '@@/core/coreExports';\n// @ts-ignore\nexport * from '@@/core/pluginExports';\n", "id": "fes.js:packages/fes/types.d.ts:180aa0d8-2d55-41b2-bd1f-57dd9e076925"}
{"path": "packages/icons-vue/src/icons/ScheduleOutlined.tsx", "project_name": "ant-design-icons", "text": "// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport { FunctionalComponent } from 'vue';\nimport ScheduleOutlinedSvg from '@ant-design/icons-svg/lib/asn/ScheduleOutlined';\nimport AntdIcon, { AntdIconProps } from '../components/AntdIcon';\n\nexport interface ScheduleOutlinedIconType extends FunctionalComponent<AntdIconProps> {\n  displayName: string;\n}\n\nconst ScheduleOutlined: ScheduleOutlinedIconType = (props, context) => {\n  const p = { ...props, ...context.attrs };\n  return <AntdIcon {...p} icon={ScheduleOutlinedSvg}></AntdIcon>;\n};\n\nScheduleOutlined.displayName = 'ScheduleOutlined';\nScheduleOutlined.inheritAttrs = false;\nexport default ScheduleOutlined;", "id": "ant-design-icons:packages/icons-vue/src/icons/ScheduleOutlined.tsx:ac54a7a7-1e8c-4cbb-b393-67fc79532571"}
{"path": "example/polyfills.ts", "project_name": "ng2-validation", "text": "import 'reflect-metadata';\nimport 'zone.js/dist/zone';", "id": "ng2-validation:example/polyfills.ts:9ea47661-6c75-4ed7-8f07-36f1e671447b"}
{"path": "src/locales/el/company/noun.ts", "project_name": "faker", "text": "export default [\n  'ικανότητα',\n  'πρόσβαση',\n  'αλγόριθμος',\n  'αναλυτής',\n  'εφαρμογή',\n  'προσέγγιση',\n  'αρχιτεκτονική',\n  'αρχείο',\n  'τεχνητή νοημοσύνη',\n  'χωρητικότητα',\n  'πρόκληση',\n  'συνεργασία',\n  'περιπλοκότητα',\n  'πυρήνας',\n  'βάση δεδομένων',\n  'ορισμός',\n  'συνάρτηση',\n  'Διεπαφή Χρήστη',\n  'υλικό',\n  'υλοποίηση',\n  'εγκατάσταση',\n  'εγχειρίδιο χρήστη',\n  'διεπαφή',\n  'υπηρεσίες internet',\n  'γνωσιακή βάση',\n  'τοπικό δίκτυο',\n  'μετρικές',\n  'μεθοδολογία',\n  'μοντέλο',\n  'ανοιχτή αρχιτεκτονική',\n  'ενορχήστρωση',\n  'προϊόν',\n  'παραγωγικότητα',\n  'πρωτόκολο',\n  'ασφαλής γραμμή',\n  'λογισμικό',\n  'στρατηγική',\n  'επιτυχία',\n  'υποστήρυξη',\n];\n", "id": "faker:src/locales/el/company/noun.ts:5f002d9a-9b2e-42de-b914-c3d2718b9254"}
{"path": "packages/ts-interface-generator/src/test/testdata/sampleControl/SampleControl.ts", "project_name": "ui5-typescript", "text": "import Button from \"sap/m/Button\";\nimport RenderManager from \"sap/ui/core/RenderManager\";\n\n/**\n * @namespace ui5tssampleapp.control\n */\nexport default class SampleControl extends Button {\n\n\t// The following three lines were generated and should remain as-is to make TypeScript aware of the constructor signatures\n\tconstructor(idOrSettings?: string | $SampleControlSettings);\n\tconstructor(id?: string, settings?: $SampleControlSettings);\n\tconstructor(id?: string, settings?: $SampleControlSettings) { super(id, settings); }\n\n\tstatic readonly metadata = {\n\t\tproperties: {\n\t\t\tsubtext: \"string\",\n\t\t\ttextColor: { type: \"sap.ui.core.CSSColor\", defaultValue: \"\" },\n\t\t},\n\t\taggregations: {\n\t\t\tcontent: { multiple: true, type: \"sap.ui.core.Control\", bindable: true },\n\t\t\theader: { multiple: false, type: \"sap.ui.core.Control\" },\n\t\t},\n\t\tassociations: {\n\t\t\tpartnerControl: \"SampleControl\",\n\t\t\talsoLabelledBy: { type: \"sap.ui.core.Control\", multiple: true },\n\t\t},\n\t\tevents: {\n\t\t\tdoublePress: { allowPreventDefault: true },\n\t\t},\n\t};\n\n\tstatic renderer = {\n\t\tapiVersion: 2,\n\t\trender: function (rm: RenderManager, control: SampleControl) {\n\t\t\trm.openStart(\"div\", control);\n\t\t\trm.openEnd();\n\n\t\t\trm.text(control.getText());\n\t\t\t// @ts-ignore this only works with the generated interface\n\t\t\trm.text(control.getSubtext());\n\t\t\t// @ts-ignore this only works with the generated interface\n\t\t\tconst content = control.getContent();\n\t\t\tfor (let i = 0; i < content.length; i++) {\n\t\t\t\trm.renderControl(content[i]);\n\t\t\t}\n\n\t\t\trm.close(\"div\");\n\t\t}\n\t};\n\n\tdoit() {\n\t\talert(\"Hello\");\n\t}\n}\n", "id": "ui5-typescript:packages/ts-interface-generator/src/test/testdata/sampleControl/SampleControl.ts:e129da0f-bd4a-4458-a679-b7585b7159a9"}
{"path": "src/event.ts", "project_name": "easysubs", "text": "import { createEvent } from 'effector'\nimport { subTitleType } from 'subtitle'\n\nexport const toggleEnableState = createEvent<boolean>('Toggle extension enable state')\nexport const toggleShowProgressBarState = createEvent<boolean>('Toggle show progress bar state')\nexport const toggleShowSubsBackgroundState = createEvent<boolean>('Toggle show subs background')\nexport const toggleRewindBySubsState = createEvent<boolean>('Toggle show progress bar state')\nexport const setUserLanguage = createEvent<string>('Set user language')\nexport const setLearningService = createEvent<string>('Set learning service')\n\nexport const updateSubs = createEvent<subTitleType[]>('Update subtitles')\nexport const videoTimeUpdate = createEvent('Video time update')\nexport const toggleShowFullSubTranslatePopup = createEvent<boolean>('Toggle show full sub translate popup')\n\nexport const toggleAutoPause = createEvent<boolean>('Toggle auto pause')\n\nexport const setSubsFontSize = createEvent<number>('Set subs font size')\n", "id": "easysubs:src/event.ts:8d85db16-b8f5-4c86-94dd-db0d4b12fde0"}
{"path": "tests/cases/conformance/expressions/typeGuards/typeGuardFunctionErrors.ts", "project_name": "TypeScript", "text": "\nclass A {\n    propA: number;\n}\n\nclass B {\n    propB: number;\n}\n\nclass C extends A {\n    propC: number;\n}\n\nfunction hasANonBooleanReturnStatement(x): x is A {\n    return '';\n}\n\nfunction hasTypeGuardTypeInsideTypeGuardType(x): x is x is A {\n    return true;\n}\n\nfunction hasMissingIsKeyword(): x {\n    return true;\n}\n\nfunction hasMissingParameter(): x is A {\n    return true;\n}\n\nfunction hasMissingTypeInTypeGuardType(x): x is {\n    return true;\n}\n\nfunction hasNonMatchingParameter(y): x is A {\n    return true;\n}\n\nfunction hasNonMatchingParameterType1(x: A): x is B {\n    return true;\n}\n\nfunction hasNonMatchingParameterType2(x: string): x is number {\n    return true;\n}\n\nfunction hasNonMathcingGenericType<T>(a: string): a is T[] {\n    return true;\n}\n\nlet a: A;\nlet b: B;\n\ndeclare function isB(p1): p1 is B;\ndeclare function isC(p1): p1 is C;\ndeclare function funA(p1: any, p2: any): p1 is B;\ndeclare function hasNoTypeGuard(x);\n\n// Passed argument is not the same as the one being guarded.\nif (isB(b)) {\n    a.propB;\n}\n\n// Parameter index and argument index for the type guard target is not matching.\nif (funA(0, a)) {\n    a.propB; // Error\n}\n\n// No type guard in if statement\nif (hasNoTypeGuard(a)) {\n    a.propB;\n}\n\n// Type predicate type is not assignable\ndeclare function acceptingDifferentSignatureTypeGuardFunction(p1: (p1) => p1 is B);\nacceptingDifferentSignatureTypeGuardFunction(isC);\n\n// Boolean not assignable to type guard\nvar assign1: (p1, p2) => p1 is A;\nassign1 = function(p1, p2): boolean {\n    return true;\n};\n\n// Must have matching parameter index\nvar assign2: (p1, p2) => p1 is A;\nassign2 = function(p1, p2): p2 is A {\n    return true;\n};\n\n// No matching signature\nvar assign3: (p1, p2) => p1 is A;\nassign3 = function(p1, p2, p3): p1 is A {\n    return true;\n};\n\n// Type predicates in non-return type positions\nvar b1: b is A;\nfunction b2(a: b is A) {};\nfunction b3(): A | b is A {\n    return true;\n};\n\n// Non-compatiable type predicate positions for signature declarations\nclass D {\n    constructor(p1: A): p1 is C {\n        return true;\n    }\n    get m1(p1: A): p1 is C {\n        return true;\n    }\n    set m2(p1: A): p1 is C {\n        return true;\n    }\n}\n\ninterface I1 {\n    new (p1: A): p1 is C;\n}\n\ninterface I2 {\n    [index: number]: p1 is C;\n}\n\n// Reference to rest parameter\nfunction b4(...a): a is A {\n    return true;\n}\n\n// Reference to binding pattern\nfunction b5({a, b, p1}, p2, p3): p1 is A {\n    return true;\n}\n\nfunction b6([a, b, p1], p2, p3): p1 is A {\n    return true;\n}\n\nfunction b7({a, b, c: {p1}}, p2, p3): p1 is A {\n    return true;\n}\n\n// Should not crash the compiler\nvar x: A;\nif (hasMissingParameter()) {\n    x.propA;\n}\n\n// repro #17297\n\ntype Keys = 'a'|'b'|'c'\ntype KeySet<T extends Keys> = { [k in T]: true }\n\n// expected an error, since Keys doesn't have a 'd'\ndeclare function hasKey<T extends Keys>(x: KeySet<T>): x is KeySet<T|'d'>;\n\ntype Foo = { 'a': string; }\ntype Bar = { 'a': number; }\n\ninterface NeedsFoo<T extends Foo> {\n    foo: T;\n    isFoo(): this is NeedsFoo<Bar>; // should error\n};\n\ndeclare var anError: NeedsFoo<Bar>; // error, as expected\ndeclare var alsoAnError: NeedsFoo<number>; // also error, as expected\ndeclare function newError1(x: any): x is NeedsFoo<Bar>; // should error\ndeclare function newError2(x: any): x is NeedsFoo<number>; // should error\ndeclare function newError3(x: number): x is NeedsFoo<number>; // should error\n", "id": "TypeScript:tests/cases/conformance/expressions/typeGuards/typeGuardFunctionErrors.ts:294c8681-db08-464e-858b-f26e5c7808ca"}
{"path": "sources/commands/entry.ts", "project_name": "sherlock", "text": "import Octokit                    from '@octokit/rest';\nimport {Command, UsageError}      from 'clipanion';\nimport {existsSync, readFileSync} from 'fs';\nimport gitUrlParse                from 'git-url-parse';\nimport pkgUp                      from 'pkg-up';\nimport * as yup                   from 'yup';\n\nimport {GITHUB_REGEXP}    from '../constants';\nimport {executeRepro}     from '../executeRepro';\nimport {extractRepro}     from '../extractRepro';\nimport {fetchRequireList} from '../fetchRequireList';\n\nconst oneOfType = (alternatives: yup.Schema<any>[]) => {\n    const candidates = alternatives.slice(0, -1);\n    const tail = alternatives[alternatives.length - 1];\n\n    return yup.lazy(value => {\n        for (const candidate of candidates) {\n            try {\n                candidate.validateSync(value);\n                return candidate;\n            } catch (error) {\n                if (!(error instanceof Error) || error.name !== `ValidationError`) {\n                    throw error;\n                }\n            }\n        }\n\n        return tail;\n    });\n};\n\nexport class EntryCommand extends Command {\n    @Command.String()\n    issue!: string;\n\n    @Command.Array(`--require`)\n    requireList: string[] = [];\n\n    static schema = yup.object().shape({\n        issue: oneOfType([\n            yup.number().integer(),\n            yup.string().test(`exists`, `\\${path} doesn't exist`, value => existsSync(value)),\n            yup.string().matches(GITHUB_REGEXP, `The parameter must be an URL pointing to a valid GitHub issue`),\n        ]),\n    });\n\n    async execute() {\n        const pkgPath = await pkgUp();\n        if (pkgPath === null)\n            throw new UsageError(`This command must be run from within a package`);\n\n        let body: string;\n\n        if (existsSync(this.issue)) {\n            body = readFileSync(this.issue, `utf8`);\n        } else {\n            const packageJson = JSON.parse(readFileSync(pkgPath, `utf8`));\n            if (!packageJson.repository || packageJson.repository.type !== `git` || !packageJson.repository.url)\n                throw new UsageError(`This command must be run from within a package linked to a repository`);\n\n            const {owner, name: repo} = gitUrlParse(packageJson.repository.url);\n            if (!owner || !repo)\n                throw new UsageError(`This command must be run from within a package linked to a GitHub repository`);\n\n            const octokit = new Octokit({\n                auth: process.env.GITHUB_TOKEN,\n            });\n\n            if (!process.env.GITHUB_TOKEN && process.env.GITHUB_ACTIONS)\n                throw new UsageError(`Missing GitHub token in the environment`);\n\n            let issue: number;\n\n            const githubMatch = this.issue.match(GITHUB_REGEXP);\n            if (githubMatch) {\n                issue = parseInt(githubMatch[3], 10);\n            } else {\n                issue = parseInt(this.issue);\n            }\n\n            body = (await octokit.issues.get({\n                owner,\n                repo,\n                issue_number: issue,\n            })).data.body;\n        }\n\n        const repro = extractRepro(body);\n        if (!repro)\n            throw new UsageError(`This issue has no reproduction case attached - check that the code fences are tagged with \"\\`\\`\\` js repro\"`);\n\n        const requireList = await fetchRequireList(this.requireList);\n        const {assertion, error} = await executeRepro(repro, requireList);\n\n        this.context.stdout.write(assertion || error || `No problem found!\\n`);\n    }\n}\n", "id": "sherlock:sources/commands/entry.ts:0356ac08-e053-433a-b965-42b936b95179"}
{"path": "src/core/aztec/encoder/LatchTable.ts", "project_name": "library", "text": "// The Latch Table shows, for each pair of Modes, the optimal method for\n// getting from one mode to another.  In the worst possible case, this can\n// be up to 14 bits.  In the best possible case, we are already there!\n// The high half-word of each entry gives the number of bits.\n// The low half-word of each entry are the actual bits necessary to change\nexport const LATCH_TABLE: Int32Array[] = [\n  Int32Array.from([\n    0,\n    (5 << 16) + 28, // UPPER -> LOWER\n    (5 << 16) + 30, // UPPER -> DIGIT\n    (5 << 16) + 29, // UPPER -> MIXED\n    (10 << 16) + (29 << 5) + 30 // UPPER -> MIXED -> PUNCT\n  ]),\n  Int32Array.from([\n    (9 << 16) + (30 << 4) + 14, // LOWER -> DIGIT -> UPPER\n    0,\n    (5 << 16) + 30, // LOWER -> DIGIT\n    (5 << 16) + 29, // LOWER -> MIXED\n    (10 << 16) + (29 << 5) + 30 // LOWER -> MIXED -> PUNCT\n  ]),\n  Int32Array.from([\n    (4 << 16) + 14, // DIGIT -> UPPER\n    (9 << 16) + (14 << 5) + 28, // DIGIT -> UPPER -> LOWER\n    0,\n    (9 << 16) + (14 << 5) + 29, // DIGIT -> UPPER -> MIXED\n    (14 << 16) + (14 << 10) + (29 << 5) + 30\n    // DIGIT -> UPPER -> MIXED -> PUNCT\n  ]),\n  Int32Array.from([\n    (5 << 16) + 29, // MIXED -> UPPER\n    (5 << 16) + 28, // MIXED -> LOWER\n    (10 << 16) + (29 << 5) + 30, // MIXED -> UPPER -> DIGIT\n    0,\n    (5 << 16) + 30 // MIXED -> PUNCT\n  ]),\n  Int32Array.from([\n    (5 << 16) + 31, // PUNCT -> UPPER\n    (10 << 16) + (31 << 5) + 28, // PUNCT -> UPPER -> LOWER\n    (10 << 16) + (31 << 5) + 30, // PUNCT -> UPPER -> DIGIT\n    (10 << 16) + (31 << 5) + 29, // PUNCT -> UPPER -> MIXED\n    0\n  ])\n];\n", "id": "library:src/core/aztec/encoder/LatchTable.ts:d59ba4b7-6928-448c-908b-c5750e65aa68"}
{"path": "libs/api/domains/identity/src/lib/identity.module.ts", "project_name": "island.is", "text": "import { Module, DynamicModule } from '@nestjs/common'\n\nimport {\n  NationalRegistryXRoadConfig,\n  NationalRegistryXRoadModule,\n} from '@island.is/api/domains/national-registry-x-road'\n\nimport { IdentityResolver } from './identity.resolver'\nimport { IdentityService } from './identity.service'\n\nexport type Config = {\n  nationalRegistryXRoad: NationalRegistryXRoadConfig\n}\n\n@Module({})\nexport class IdentityModule {\n  static register(config: Config): DynamicModule {\n    return {\n      module: IdentityModule,\n      imports: [\n        NationalRegistryXRoadModule.register(config.nationalRegistryXRoad),\n      ],\n      providers: [IdentityResolver, IdentityService],\n      exports: [IdentityService],\n    }\n  }\n}\n", "id": "island.is:libs/api/domains/identity/src/lib/identity.module.ts:8913eddd-4e63-47d6-9d2d-6b2124d0f78a"}
{"path": "sources/nodes/postprocessing/NodePass.d.ts", "project_name": "three-full", "text": "//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// WARNING: This file was auto-generated, any change will be overridden in next release. Please use configs/es6.conf.js then run \"npm run convert\". //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nimport { ShaderPass } from '../../postprocessing/ShaderPass';\nimport { ScreenNode } from '../inputs/ScreenNode';\n\nexport class NodePass extends ShaderPass {\n\n\tconstructor();\n\n\tname: string;\n\tuuid: string;\n\tuserData: object;\n\tinput: ScreenNode;\n\tneedsUpdate: boolean;\n\n\tcopy( source: NodePass ): this;\n\ttoJSON( meta?: object | string ): object;\n\n}\n", "id": "three-full:sources/nodes/postprocessing/NodePass.d.ts:5a7adf46-6c50-4d34-a7da-fac411009160"}
{"path": "infra-sk/webpack.config.ts", "project_name": "skia-buildbot", "text": "import webpack from 'webpack';\nimport commonBuilder from './pulito/webpack.common';\n\nconst configFactory: webpack.ConfigurationFactory = (_, args) => commonBuilder(__dirname, args.mode);\n\nexport = configFactory;\n", "id": "skia-buildbot:infra-sk/webpack.config.ts:f47b59d5-a9f6-4287-8640-faca9aebc25f"}
{"path": "src/directives/directives.module.ts", "project_name": "weather-app", "text": "import { NgModule } from '@angular/core';\nimport { AnimateItemSliding } from './animate-item-sliding/animate-item-sliding';\n\n@NgModule({\n  declarations: [\n    AnimateItemSliding\n  ],\n  exports: [\n    AnimateItemSliding\n  ]\n})\nexport class DirectivesModule {\n}\n", "id": "weather-app:src/directives/directives.module.ts:7b1025da-578e-41e3-9eb0-72ee2a7f3c2c"}
{"path": "packages/backend/contracts/drive.ts", "project_name": "e-shop", "text": "/**\n * Contract source: https://git.io/JBt3I\n *\n * Feel free to let us know via PR, if you find something broken in this contract\n * file.\n */\n\ndeclare module '@ioc:Adonis/Core/Drive' {\n  interface DisksList {\n    local: {\n      config: LocalDriverConfig\n      implementation: LocalDriverContract\n    }\n    // s3: {\n    //   config: S3DriverConfig\n    //   implementation: S3DriverContract\n    // }\n    // gcs: {\n    //   config: GcsDriverConfig\n    //   implementation: GcsDriverContract\n    // }\n  }\n}\n", "id": "e-shop:packages/backend/contracts/drive.ts:aacdd4a3-9c3e-4ece-b703-6e6fb451a8c3"}
{"path": "src/components/Footer/style.ts", "project_name": "spec-next", "text": "import styled from 'styled-components'\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 128px;\n  padding: 0 16px;\n`\n\nexport const Description = styled.p`\n  font-size: 14px;\n  color: var(--text-tertiary);\n  max-width: 320px;\n  display: flex;\n  flex: 1 0 auto;\n  align-items: flex-start;\n  padding-bottom: 16px;\n`\n\nexport const Icons = styled.div`\n  display: flex;\n  flex: 1 0 auto;\n  align-items: flex-start;\n  margin-left: -16px;\n  padding-bottom: 8px;\n\n  a {\n    color: var(--text-tertiary);\n  }\n\n  a:hover {\n    color: var(--text-primary);\n  }\n\n  .icon {\n    margin-left: 16px;\n  }\n`\n", "id": "spec-next:src/components/Footer/style.ts:399ef5ca-468e-47a2-9c1f-8e8f55b1d134"}
{"path": "src/components/clipboard/ClipboardCode.stories.tsx", "project_name": "design-system", "text": "import React from 'react';\n\nimport { ClipboardCode } from './ClipboardCode';\n\nexport default {\n  title: 'Clipboard/ClipboardCode',\n};\n\nexport const Default = () => (\n  <div style={{ padding: '3em', width: 300 }}>\n    <ClipboardCode code=\"git checkout master\" />\n  </div>\n);\n\nexport const Wrapped = () => (\n  <div style={{ padding: '3em', width: 250 }}>\n    <ClipboardCode code=\"git checkout master\" />\n  </div>\n);\n", "id": "design-system:src/components/clipboard/ClipboardCode.stories.tsx:49ecece1-09da-48e5-9d7f-e95f4d381b49"}
{"path": "packages/pirateship/src/components/PSRow.tsx", "project_name": "flagship", "text": "import React, { FunctionComponent } from 'react';\nimport {\n  Image,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  TouchableHighlight,\n  View,\n  ViewStyle\n} from 'react-native';\nimport { border, fontSize, palette } from '../styles/variables';\n\nconst arrowImg = require('../../assets/images/arrow.png');\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: 18,\n    paddingBottom: 18,\n    paddingLeft: 15,\n    paddingRight: 15,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderBottomWidth: border.width,\n    borderBottomColor: border.color\n  },\n  arrow: {\n    width: 15,\n    height: 15,\n    transform: [{ rotate: '180deg' }]\n  },\n  title: {\n    fontSize: fontSize.base,\n    color: palette.onBackground\n  }\n});\n\nexport interface PSRowProps {\n  onPress: () => void;\n  title: string;\n  style?: StyleProp<ViewStyle>;\n  textStyle?: StyleProp<TextStyle>;\n  showImage?: boolean;\n  renderImage?: () => JSX.Element;\n}\n\nconst PSRow: FunctionComponent<PSRowProps> = (props): JSX.Element => {\n  const renderImage = (): JSX.Element => {\n    if (props.renderImage) {\n      return props.renderImage();\n    }\n\n    return (\n      <Image source={arrowImg} style={styles.arrow} resizeMode='contain' />\n    );\n  };\n\n  const { onPress, showImage, style, textStyle, title } = props;\n\n  return (\n    <TouchableHighlight onPress={onPress} underlayColor={palette.surface}>\n      <View style={[styles.container, style]}>\n        <Text style={[styles.title, textStyle]}>{title}</Text>\n        {showImage && renderImage()}\n      </View>\n    </TouchableHighlight>\n  );\n};\n\nexport default PSRow;\n", "id": "flagship:packages/pirateship/src/components/PSRow.tsx:b1b80550-b672-4c96-8b54-d085415d6f9f"}
{"path": "frontend/src/app/modules/distribution/distribution.component.ts", "project_name": "OpenSpeedMonitor", "text": "import { Component } from '@angular/core';\nimport {DistributionDataDTO, DistributionData} from './models/distribution-data.model';\nimport {URL} from '../../enums/url.enum';\nimport {ResultSelectionStore} from '../result-selection/services/result-selection.store';\nimport {BehaviorSubject} from 'rxjs';\nimport {ViolinchartDataService} from './services/violinchart-data.service';\n\n@Component({\n  selector: 'osm-distribution',\n  templateUrl: './distribution.component.html',\n  styleUrls: ['./distribution.component.scss']\n})\nexport class DistributionComponent {\n\n  showChartCard = false;\n  results$ = new BehaviorSubject<DistributionDataDTO>(new DistributionData());\n\n  constructor(private violinChartService: ViolinchartDataService, private resultSelectionStore: ResultSelectionStore) {\n  }\n\n  getDistributionChartData() {\n    this.results$.next(null);\n    this.showChartCard = true;\n\n    this.violinChartService.fetchDistributionData<DistributionDataDTO>(\n      this.resultSelectionStore.resultSelectionCommand,\n      this.resultSelectionStore.remainingResultSelection,\n      URL.DISTRIBUTION_VIOLINCHART_DATA\n    ).subscribe(next => {\n      this.results$.next(next);\n    });\n  }\n}\n", "id": "OpenSpeedMonitor:frontend/src/app/modules/distribution/distribution.component.ts:b6291d50-f71f-4fef-826a-298d414dedfe"}
{"path": "components/layout/Sidebar.d.ts", "project_name": "react-toolbox", "text": "import * as React from \"react\";\nimport { DrawerCommonProps } from '../drawer/Drawer';\n\nexport interface SidebarTheme {\n  /**\n   * Added to the root class when it is clipped.\n   */\n  clipped?: string;\n  /**\n   * Added to the root class if sidebar is pinned.\n   */\n  pinned?: string;\n}\n\nexport interface SidebarProps extends DrawerCommonProps {\n  /**\n   * If true, when the `AppBar` gets pinned, it will stand over the `Drawer`.\n   * @default false\n   */\n  clipped?: boolean;\n  /**\n   * The breakpoint at which the drawer is automatically pinned.\n   */\n  permanentAt?: \"sm\" | \"smTablet\" | \"md\" | \"lg\" | \"lgTablet\" | \"xl\" | \"xxl\" | \"xxxl\";\n  /**\n   * If true, the sidebar will be pinned open.\n   * @default false\n   */\n  pinned?: boolean;\n  /**\n   * Classnames object defining the component style.\n   */\n  theme?: SidebarTheme;\n  /**\n   * Width in standard increments (1-12) or percentage (25, 33, 50, 66, 75, 100)\n   * @default 5\n   */\n  width?: number; // 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 25 | 33 | 50 | 66 | 75 | 100;\n}\n\nexport class Sidebar extends React.Component<SidebarProps, {}> { }\n", "id": "react-toolbox:components/layout/Sidebar.d.ts:95f66a26-df94-402f-a40c-171462112862"}
{"path": "packages/lib/services/searchengine/SearchEngineUtils.test.ts", "project_name": "joplin", "text": "import { setupDatabaseAndSynchronizer, db, switchClient } from '../../testing/test-utils.js';\nimport SearchEngine from '../../services/searchengine/SearchEngine';\nimport SearchEngineUtils from '../../services/searchengine/SearchEngineUtils';\nimport Setting from '../../models/Setting';\nconst Note = require('../../models/Note').default;\n\n\nlet searchEngine: any = null;\n\ndescribe('services_SearchEngineUtils', function() {\n\tbeforeEach(async (done) => {\n\t\tawait setupDatabaseAndSynchronizer(1);\n\t\tawait switchClient(1);\n\t\tsearchEngine = new SearchEngine();\n\t\tsearchEngine.setDb(db());\n\t\tdone();\n\t});\n\n\tdescribe('filter todos based on showCompletedTodos', function() {\n\t\tit('show completed', (async () => {\n\t\t\tconst note1 = await Note.save({ title: 'abcd', body: 'body 1' });\n\t\t\tconst todo1 = await Note.save({ title: 'abcd', body: 'todo 1', is_todo: 1 });\n\t\t\tconst todo2 = await Note.save({ title: 'abcd', body: 'todo 2', is_todo: 1, todo_completed: 1590085027710 });\n\t\t\tawait Note.save({ title: 'qwer', body: 'body 2' });\n\t\t\tawait searchEngine.syncTables();\n\n\t\t\tSetting.setValue('showCompletedTodos', true);\n\n\t\t\tconst rows = await SearchEngineUtils.notesForQuery('abcd', true, null, searchEngine);\n\n\t\t\texpect(rows.length).toBe(3);\n\t\t\texpect(rows.map(r=>r.id)).toContain(note1.id);\n\t\t\texpect(rows.map(r=>r.id)).toContain(todo1.id);\n\t\t\texpect(rows.map(r=>r.id)).toContain(todo2.id);\n\n\t\t\tconst options: any = {};\n\t\t\toptions.fields = ['id', 'title'];\n\n\t\t\tconst rows2 = await SearchEngineUtils.notesForQuery('abcd', true, options, searchEngine);\n\t\t\texpect(rows2.length).toBe(3);\n\t\t\texpect(rows2.map(r=>r.id)).toContain(note1.id);\n\t\t\texpect(rows2.map(r=>r.id)).toContain(todo1.id);\n\t\t\texpect(rows2.map(r=>r.id)).toContain(todo2.id);\n\t\t}));\n\n\t\tit('hide completed', (async () => {\n\t\t\tconst note1 = await Note.save({ title: 'abcd', body: 'body 1' });\n\t\t\tconst todo1 = await Note.save({ title: 'abcd', body: 'todo 1', is_todo: 1 });\n\t\t\tawait Note.save({ title: 'qwer', body: 'body 2' });\n\t\t\tawait Note.save({ title: 'abcd', body: 'todo 2', is_todo: 1, todo_completed: 1590085027710 });\n\t\t\tawait searchEngine.syncTables();\n\n\t\t\tSetting.setValue('showCompletedTodos', false);\n\n\t\t\tconst rows = await SearchEngineUtils.notesForQuery('abcd', true, null, searchEngine);\n\n\t\t\texpect(rows.length).toBe(2);\n\t\t\texpect(rows.map(r=>r.id)).toContain(note1.id);\n\t\t\texpect(rows.map(r=>r.id)).toContain(todo1.id);\n\n\t\t\tconst options: any = {};\n\t\t\toptions.fields = ['id', 'title'];\n\t\t\tconst rows2 = await SearchEngineUtils.notesForQuery('abcd', true, options, searchEngine);\n\t\t\texpect(rows2.length).toBe(2);\n\t\t\texpect(rows2.map(r=>r.id)).toContain(note1.id);\n\t\t\texpect(rows2.map(r=>r.id)).toContain(todo1.id);\n\t\t}));\n\n\t\tit('show completed (!applyUserSettings)', (async () => {\n\t\t\tconst note1 = await Note.save({ title: 'abcd', body: 'body 1' });\n\t\t\tconst todo1 = await Note.save({ title: 'abcd', body: 'todo 1', is_todo: 1 });\n\t\t\tawait Note.save({ title: 'qwer', body: 'body 2' });\n\t\t\tconst todo2 = await Note.save({ title: 'abcd', body: 'todo 2', is_todo: 1, todo_completed: 1590085027710 });\n\t\t\tawait searchEngine.syncTables();\n\n\t\t\tSetting.setValue('showCompletedTodos', false);\n\n\t\t\tconst rows = await SearchEngineUtils.notesForQuery('abcd', false, null, searchEngine);\n\n\t\t\texpect(rows.length).toBe(3);\n\t\t\texpect(rows.map(r=>r.id)).toContain(note1.id);\n\t\t\texpect(rows.map(r=>r.id)).toContain(todo1.id);\n\t\t\texpect(rows.map(r=>r.id)).toContain(todo2.id);\n\t\t}));\n\t});\n\n\tit('remove auto added fields', (async () => {\n\t\tawait Note.save({ title: 'abcd', body: 'body 1' });\n\t\tawait searchEngine.syncTables();\n\n\t\tconst testCases = [\n\t\t\t['title', 'todo_due'],\n\t\t\t['title', 'todo_completed'],\n\t\t\t['title'],\n\t\t\t['title', 'todo_completed', 'todo_due'],\n\t\t];\n\n\t\tfor (const testCase of testCases) {\n\t\t\tconst rows = await SearchEngineUtils.notesForQuery('abcd', false, { fields: [...testCase] }, searchEngine);\n\t\t\ttestCase.push('type_');\n\t\t\texpect(Object.keys(rows[0]).length).toBe(testCase.length);\n\t\t\tfor (const field of testCase) {\n\t\t\t\texpect(rows[0]).toHaveProperty(field);\n\t\t\t}\n\t\t}\n\t}));\n});\n", "id": "joplin:packages/lib/services/searchengine/SearchEngineUtils.test.ts:b43be92c-5c00-47c3-829b-79f5916068ff"}
{"path": "packages/ts-morph/src/compiler/ast/type/index.ts", "project_name": "ts-morph", "text": "export * from \"./ArrayTypeNode\";\nexport * from \"./ConditionalTypeNode\";\nexport * from \"./ConstructorTypeNode\";\nexport * from \"./ExpressionWithTypeArguments\";\nexport * from \"./FunctionOrConstructorTypeNodeBase\";\nexport * from \"./FunctionTypeNode\";\nexport * from \"./ImportTypeNode\";\nexport * from \"./IndexedAccessTypeNode\";\nexport * from \"./InferTypeNode\";\nexport * from \"./IntersectionTypeNode\";\nexport * from \"./LiteralTypeNode\";\nexport * from \"./MappedTypeNode\";\nexport * from \"./NamedTupleMember\";\nexport * from \"./ParenthesizedTypeNode\";\nexport * from \"./TemplateLiteralTypeNode\";\nexport * from \"./ThisTypeNode\";\nexport * from \"./TupleTypeNode\";\nexport * from \"./TypeAliasDeclaration\";\nexport * from \"./TypeLiteralNode\";\nexport * from \"./TypeNode\";\nexport * from \"./TypeParameterDeclaration\";\nexport * from \"./TypePredicateNode\";\nexport * from \"./TypeReferenceNode\";\nexport * from \"./UnionTypeNode\";\n", "id": "ts-morph:packages/ts-morph/src/compiler/ast/type/index.ts:8e5819d4-3cce-4e6b-8d50-9c382b6d716b"}
{"path": "ui/src/app/components/webcomponents/dry-run-web-form.component.ts", "project_name": "testsigma", "text": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {WorkspaceVersion} from \"../../models/workspace-version.model\";\nimport {DryTestPlan} from \"../../models/dry-test-plan.model\";\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {TestPlanLabType} from \"../../enums/test-plan-lab-type.enum\";\nimport {Environment} from \"../../models/environment.model\";\nimport {BaseComponent} from \"../../shared/components/base.component\";\nimport {AuthenticationGuard} from \"../../shared/guards/authentication.guard\";\n\n@Component({\n  selector: 'app-dry-run-web-form',\n  templateUrl: './dry-run-web-form.component.html',\n  styles: []\n})\nexport class DryRunWebFormComponent extends BaseComponent implements OnInit {\n\n  @Input('formGroup') webForm: FormGroup;\n  @Input('version') version: WorkspaceVersion;\n  @Input('testPlan') testPlan: DryTestPlan;\n  @Input('environment') environment?: Environment;\n  @Output(\"closeDialog\")closeDryRunDialog = new EventEmitter<any>();\n\n  constructor(public authGuard: AuthenticationGuard) {\n    super(authGuard);\n  }\n\n  get isHybrid() {\n    return this.webForm.controls['testPlanLabType'].value == TestPlanLabType.Hybrid;\n  }\n\n  get environmentFormGroup(): FormGroup {\n    return (<FormGroup>(<FormGroup>(<FormGroup>(<FormGroup>this.webForm.controls['testDevices']).controls[0])));\n  }\n\n  get testPlanLabType(): TestPlanLabType {\n    return <TestPlanLabType>this.webForm.controls['testPlanLabType'].value;\n  }\n\n  get isRest() {\n    return this?.version?.workspace?.isRest\n  }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges(): void {\n    this.environmentFormGroup.removeControl('platform');\n    this.environmentFormGroup.removeControl('resolution');\n    this.environmentFormGroup.removeControl('osVersion');\n    this.environmentFormGroup.removeControl('browser');\n    this.environmentFormGroup.removeControl('browserVersion');\n    this.environmentFormGroup.addControl('platform', new FormControl(this.testPlan.testDevices[0].platform, [this.requiredIfValidator(() => !this.isRest)]));\n    this.environmentFormGroup.addControl('resolution', new FormControl(this.testPlan.testDevices[0].resolution, []));\n    this.environmentFormGroup.addControl('osVersion', new FormControl(this.testPlan.testDevices[0].osVersion, []));\n    this.environmentFormGroup.addControl('browser', new FormControl(this.testPlan.testDevices[0].browser, [this.requiredIfValidator(() => !this.version?.workspace.isMobileNative && !this.isRest && this.isHybrid)]));\n    this.environmentFormGroup.addControl('browserVersion', new FormControl(this.testPlan.testDevices[0].browserVersion, []));\n  }\n  requiredIfValidator(predicate) {\n    return (formControl => {\n      if (!formControl.parent) {\n        return null;\n      }\n      if (predicate()) {\n        return Validators.required(formControl);\n      }\n      return null;\n    })\n  }\n\n  closeDialogTab(){\n    this.closeDryRunDialog.emit();\n  }\n}\n", "id": "testsigma:ui/src/app/components/webcomponents/dry-run-web-form.component.ts:8f471950-7807-47a3-ad16-e1f2bb7aebe3"}
{"path": "ee/client/omnichannel/components/CannedResponse/modals/index.ts", "project_name": "Rocket.Chat", "text": "export { default } from './CreateCannedResponse';\n", "id": "Rocket.Chat:ee/client/omnichannel/components/CannedResponse/modals/index.ts:24a4096d-1f0b-44f6-9db5-7e86ab949437"}
{"path": "src/client/visualizations/bar-chart/improved-bar-chart/utils/bar-chart-model.ts", "project_name": "turnilo", "text": "/*\n * Copyright 2017-2018 Allegro.pl\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Timezone } from \"chronoshift\";\nimport { List, OrderedMap } from \"immutable\";\nimport { Dataset, Datum } from \"plywood\";\nimport { NORMAL_COLORS } from \"../../../../../common/models/colors/colors\";\nimport { Dimension } from \"../../../../../common/models/dimension/dimension\";\nimport { Essence } from \"../../../../../common/models/essence/essence\";\nimport { ConcreteSeries } from \"../../../../../common/models/series/concrete-series\";\nimport { Split } from \"../../../../../common/models/split/split\";\nimport { Omit } from \"../../../../../common/utils/functional/functional\";\nimport { selectFirstSplitDatums } from \"../../../../utils/dataset/selectors/selectors\";\nimport { getContinuousSplit, getNominalDimension, getNominalSplit, hasNominalSplit } from \"../../../line-chart/utils/splits\";\n\nenum ModelVariantId { BASE, STACKED }\n\ninterface BarChartModelCommons {\n  variant: ModelVariantId;\n  continuousSplit: Split;\n  timezone: Timezone;\n  hasComparison: boolean;\n  series: List<ConcreteSeries>;\n}\n\nexport interface BaseBarChartModel extends BarChartModelCommons {\n  variant: ModelVariantId.BASE;\n}\n\ntype Color = string;\n\ntype ColorMap = OrderedMap<string, Color>;\n\nexport interface StackedBarChartModel extends BarChartModelCommons {\n  variant: ModelVariantId.STACKED;\n  colors: ColorMap;\n  nominalSplit: Split;\n  nominalDimension: Dimension;\n}\n\nexport type BarChartModel = BaseBarChartModel | StackedBarChartModel;\n\nexport function isStacked(model: BarChartModel): model is StackedBarChartModel {\n  return model.variant === ModelVariantId.STACKED;\n}\n\nfunction readCommons(essence: Essence): Omit<BarChartModelCommons, \"variant\"> {\n  const continuousSplit = getContinuousSplit(essence);\n  const hasComparison = essence.hasComparison();\n  const timezone = essence.timezone;\n  const series = essence.getConcreteSeries();\n  return {\n    continuousSplit,\n    hasComparison,\n    timezone,\n    series\n  };\n}\n\nfunction createColorMap(nominalSplit: Split, dataset: Dataset): ColorMap {\n  const { reference } = nominalSplit;\n  const datums = selectFirstSplitDatums(dataset);\n  return datums.reduce<ColorMap>((map: ColorMap, datum: Datum, i: number) => {\n    const key = String(datum[reference]);\n    const colorIndex = i % NORMAL_COLORS.length;\n    const color = NORMAL_COLORS[colorIndex];\n    return map.set(key, color);\n  }, OrderedMap<string, Color>());\n}\n\nexport function create(essence: Essence, dataset: Dataset): BarChartModel {\n  const commons = readCommons(essence);\n  if (!hasNominalSplit(essence)) {\n    return {\n      ...commons,\n      variant: ModelVariantId.BASE\n    };\n  }\n  const nominalSplit = getNominalSplit(essence);\n  const nominalDimension = getNominalDimension(essence);\n  const colors = createColorMap(nominalSplit, dataset);\n  return {\n    ...commons,\n    variant: ModelVariantId.STACKED,\n    nominalSplit,\n    nominalDimension,\n    colors\n  };\n}\n", "id": "turnilo:src/client/visualizations/bar-chart/improved-bar-chart/utils/bar-chart-model.ts:051dfe93-b813-435e-b07d-eb553be00cf7"}
{"path": "apps/client/src/app/model/other/inventory.ts", "project_name": "ffxiv-teamcraft", "text": "export class Inventory {\n\n  private static INVENTORY_PANEL_SIZE = 35;\n\n  private grid: { id: number, icon: number, amount: number }[] = new Array(Inventory.INVENTORY_PANEL_SIZE);\n\n  private nextFreeSlot = 0;\n\n  public get content(): { id: number, icon: number, amount: number }[] {\n    return this.grid;\n  }\n\n  add(id: number, icon: number, amount: number): void {\n    if (amount === 0) {\n      return;\n    }\n    const usedSlots = this.grid.filter(slot => slot !== undefined).length;\n    if (usedSlots > 0 && usedSlots % 35 === 0) {\n      this.grid.push(...new Array(Inventory.INVENTORY_PANEL_SIZE));\n    }\n    const stackSize = 999;\n    const stacks = Math.ceil(amount / stackSize);\n    for (let stack = 1; stack <= stacks; stack++) {\n      let stackAmount = stackSize;\n      // If it's the last stack, get the remaining items.\n      if (stack === stacks) {\n        stackAmount = amount % stackSize;\n      }\n      this.grid[this.nextFreeSlot] = { id: id, icon: icon, amount: stackAmount };\n      this.nextFreeSlot++;\n    }\n  }\n\n  getDisplay(): { id: number, icon: number, amount: number }[][] {\n    const display = [];\n    const grid = [...this.grid].sort((a, b) => {\n      if (a.id === b.id) {\n        // If it's the same item, order by amount DESC\n        return b.amount - a.amount;\n      }\n      return a.id - b.id;\n    });\n    while (grid.length) {\n      display.push(grid.splice(0, 35));\n    }\n    return display;\n  }\n}\n", "id": "ffxiv-teamcraft:apps/client/src/app/model/other/inventory.ts:be494f99-0687-4615-9ccd-d0955e2f15a2"}
{"path": "modules/webgl/test/adapter/device-helpers/is-old-ie.spec.ts", "project_name": "luma.gl", "text": "/* eslint-disable max-len */\nimport {isOldIE} from '@luma.gl/webgl/adapter/device-helpers/is-old-ie';\nimport test from 'tape-promise/tape';\n\ntest('isOldIE', (t) => {\n  t.equal(\n    isOldIE({userAgent: 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)'}),\n    true,\n    'should return true for IE 10'\n  );\n\n  t.equal(\n    isOldIE({userAgent: 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko'}),\n    true,\n    'should return true for IE 11'\n  );\n\n  t.equal(\n    isOldIE({\n      userAgent:\n        'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0'\n    }),\n    false,\n    'should return false for IE 12'\n  );\n\n  t.equal(\n    isOldIE({\n      userAgent:\n        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.162 Safari/537.36'\n    }),\n    false,\n    'should return false for Chrome'\n  );\n\n  t.end();\n});\n", "id": "luma.gl:modules/webgl/test/adapter/device-helpers/is-old-ie.spec.ts:fd71fb72-c7dd-42d2-97e6-06c4be0e0388"}
{"path": "controls/spreadsheet/src/workbook/common/util.ts", "project_name": "ej2", "text": "import { CellModel, ColumnModel, getCell, SheetModel, setCell, Workbook, getSheetIndex, CellStyleModel } from './../index';\nimport { getCellAddress, getRangeIndexes, BeforeCellUpdateArgs, beforeCellUpdate, workbookEditOperation, CellUpdateArgs, InsertDeleteModelArgs, getColumnHeaderText } from './index';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n\n/**\n * Check whether the text is formula or not.\n *\n * @param {string} text - Specify the text.\n * @param {boolean} isEditing - Specify the isEditing.\n * @returns {boolean} - Check whether the text is formula or not.\n */\nexport function checkIsFormula(text: string, isEditing?: boolean): boolean {\n    return text && text[0] === '=' && (text.length > 1 || isEditing);\n}\n/**\n * Check whether the value is cell reference or not.\n *\n * @param {string} value - Specify the value to check.\n * @returns {boolean} - Returns boolean value\n */\nexport function isCellReference(value: string): boolean {\n    let range: string = value;\n    range = range.split('$').join('');\n    if (range.indexOf(':') > -1) {\n        const rangeSplit: string[] = range.split(':');\n        if (isValidCellReference(rangeSplit[0]) && isValidCellReference(rangeSplit[1])) {\n            return true;\n        }\n    } else if (range.indexOf(':') < 0) {\n        if (isValidCellReference(range)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Check whether the value is character or not.\n *\n * @param {string} value - Specify the value to check.\n * @returns {boolean} - Returns boolean value\n */\nexport function isChar(value: string): boolean {\n    if ((value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90) || (value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122)) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Check whether the range selection is on complete row.\n *\n * @param {SheetModel} sheet - Specify the sheet.\n * @param {number[]} range - Specify the range index.\n * @returns {boolean} - Returns boolean value\n * @hidden\n */\nexport function isRowSelected(sheet: SheetModel, range: number[]): boolean {\n    return range[1] === 0 && range[3] === sheet.colCount - 1;\n}\n\n/**\n * Check whether the range selection is on complete column.\n *\n * @param {SheetModel} sheet - Specify the sheet.\n * @param {number[]} range - Specify the range index.\n * @returns {boolean} - Returns boolean value\n * @hidden\n */\nexport function isColumnSelected(sheet: SheetModel, range: number[]): boolean {\n    return range[0] === 0 && range[2] === sheet.rowCount - 1;\n}\n\n/**\n * @param {number[]} range - Specify the range\n * @param {number} rowIdx - Specify the row index\n * @param {number} colIdx - Specify the col index\n * @returns {boolean} - Returns boolean value\n */\nexport function inRange(range: number[], rowIdx: number, colIdx: number) : boolean {\n    return range && (rowIdx >= range[0] && rowIdx <= range[2] && colIdx >= range[1] && colIdx <= range[3]);\n}\n\n/**\n * @param {number[]} address - Specify the address\n * @param {number} rowIdx - Specify the row index\n * @param {number} colIdx - Specify the col index\n * @returns {boolean} - Returns boolean value\n */\nexport function isInMultipleRange(address: string, rowIdx: number, colIdx: number): boolean {\n    let range: number[];\n    let isInRange: boolean;\n    const splitedAddress: string[] = address.split(' ');\n    for (let i: number = 0, len: number = splitedAddress.length; i < len; i++) {\n        range = getRangeIndexes(splitedAddress[i]);\n        isInRange = inRange(range, rowIdx, colIdx);\n        if (isInRange) {\n            break;\n        }\n    }\n    return isInRange;\n}\n\n/** @hidden\n * @param {number[]} range - Specify the range\n * @param {number[]} testRange - Specify the test range\n * @param {boolean} isModify - Specify the boolean value\n * @returns {boolean} - Returns boolean value\n */\nexport function isInRange(range: number[], testRange: number[], isModify?: boolean) : boolean {\n    let inRange: boolean = range[0] <= testRange[0] && range[2] >= testRange[2] && range[1] <= testRange[1] && range[3] >= testRange[3];\n    if (inRange) { return true; }\n    if (isModify) {\n        if (testRange[0] < range[0] && testRange[2] < range[0] || testRange[0] > range[2] && testRange[2] > range[2]) {\n            return false;\n        } else {\n            if (testRange[0] < range[0] && testRange[2] > range[0]) {\n                testRange[0] = range[0];\n                inRange = true;\n            }\n            if (testRange[2] > range[2]) {\n                testRange[2] = range[2];\n                inRange = true;\n            }\n        }\n        if (testRange[1] < range[1] && testRange[3] < range[1] || testRange[1] > range[3] && testRange[3] > range[3]) {\n            return false;\n        } else {\n            if (testRange[1] < range[1] && testRange[3] > range[1]) {\n                testRange[1] = range[1];\n                inRange = true;\n            }\n            if (testRange[3] > range[3]) {\n                testRange[3] = range[3];\n                inRange = true;\n            }\n        }\n    }\n    return inRange;\n}\n\n/**\n * @hidden\n * @param {string} address - Specifies the address for whole column.\n * @param {number[]} testRange - Specifies range used to split the address.\n * @param {number} colIdx - Specifies the column index.\n * @returns {string} - returns the modified address.\n */\nexport function getSplittedAddressForColumn(address: string, testRange: number[], colIdx: number): string {\n    const colName: string = getColumnHeaderText(colIdx + 1);\n    if (address) {\n        address.split(' ').forEach((addrs: string) => {\n            const range: number[] = getRangeIndexes(addrs);\n            if (isInRange(range, testRange)) {\n                address = address.split(addrs).join(colName + (range[0] + 1) +\n                    ':' + colName + testRange[0] + ' ' + colName + (testRange[2] + 2) +\n                    ':' + colName + (range[2] + 1));\n            } else if (isInRange(range, testRange, true)) {\n                let modifiedAddress: string;\n                if (testRange[0] > range[0]) {\n                    modifiedAddress = colName + (range[0] + 1) + ':' + colName + testRange[0];\n                } else {\n                    modifiedAddress = colName + (testRange[2] + 2) + ':' + colName + (range[2] + 1);\n                }\n                address = address.split(addrs).join(modifiedAddress);\n            }\n        });\n    } else {\n        address = colName + '1:' + colName + testRange[0] + ' ' + colName + (testRange[2] + 2) + ':' + colName + '1048576';\n    }\n    return address;\n}\n\n/**\n * Check whether the cell is locked or not\n *\n * @param {CellModel} cell - Specify the cell.\n * @param {ColumnModel} column - Specify the column.\n * @returns {boolean} - Returns boolean value\n * @hidden\n */\nexport function isLocked(cell: CellModel, column: ColumnModel): boolean {\n    if (!cell) {\n        cell = {};\n    }\n    if (cell.isLocked) {\n        return true;\n    } else if (cell.isLocked === false) {\n        return false;\n    } else if (column && column.isLocked) {\n        return true;\n    } else if (!cell.isLocked && (column && column.isLocked !== false)) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Check whether the value is cell reference or not.\n *\n * @param {string} value - Specify the value to check.\n * @returns {boolean} - Returns boolean value\n * @hidden\n */\nexport function isValidCellReference(value: string): boolean {\n    const text: string = value;\n    const startNum: number = 0;\n    let endNum: number = 0;\n    let j: number = 0;\n    const numArr: number[] = [89, 71, 69];\n    // XFD is the last column, for that we are using ascii values of Z, G, E (89, 71, 69) to restrict the flow.\n    let cellText: string = '';\n    const textLength: number = text.length;\n    for (let i: number = 0; i < textLength; i++) {\n        if (isChar(text[i])) {\n            endNum++;\n        }\n    }\n    cellText = text.substring(startNum, endNum);\n    const cellTextLength: number = cellText.length;\n    if (cellTextLength !== textLength) {\n        if (cellTextLength < 4) {\n            if (textLength !== 1 && (isNaN(parseInt(text, 10)))) {\n                while (j < cellTextLength) {\n                    if ((cellText[j]) && cellText[j].charCodeAt(0) < numArr[j]) {\n                        j++;\n                        continue;\n                    } else if (!(cellText[j]) && j > 0) {\n                        break;\n                    } else {\n                        return false;\n                    }\n                }\n                const cellNumber: number = parseFloat(text.substring(endNum, textLength));\n                if (cellNumber > 0 && cellNumber < 1048577) { // 1048576 - Maximum number of rows in excel.\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * @hidden\n * @param {SheetModel} sheet - Specify the sheet\n * @param {number} index - specify the index\n * @param {boolean} increase - specify the boolean value.\n * @param {string} layout - specify the string\n * @returns {number} - To skip the hidden index\n *\n */\n export function skipHiddenIdx(sheet: SheetModel, index: number, increase: boolean, layout: string = 'rows'): number {\n    if (increase) {\n        for (let i: number = index; i < Infinity; i++) {\n            if ((sheet[layout])[index] && (sheet[layout])[index].hidden) {\n                index++;\n            } else {\n                break;\n            }\n        }\n    } else {\n        for (let i: number = index; i > -1; i--) {\n            if ((sheet[layout])[index] && (sheet[layout])[index].hidden) {\n                index--;\n            } else {\n                break;\n            }\n        }\n    }\n    return index;\n}\n\n/**\n * @param {CellStyleModel} style - Cell style.\n * @param {boolean} onActionUpdate - Specifies the action.\n * @returns {boolean} - retruns `true` is height needs to be checked.\n * @hidden\n */\n export function isHeightCheckNeeded(style: CellStyleModel, onActionUpdate?: boolean): boolean {\n    const keys: string[] = Object.keys(style);\n    return (onActionUpdate ? keys.indexOf('fontSize') > -1 : keys.indexOf('fontSize') > -1\n        && Number(style.fontSize.split('pt')[0]) > 12) || keys.indexOf('fontFamily') > -1 || keys.indexOf('borderTop') > -1\n        || keys.indexOf('borderBottom') > -1;\n}\n\n/**\n * @param {number[]} currIndexes - current indexes in which formula get updated\n * @param {number[]} prevIndexes - copied indexes\n * @param {SheetModel} sheet - sheet model\n * @param {CellModel} prevCell - copied or prev cell\n * @returns {string} - retruns updated formula\n * @hidden\n */\nexport function getUpdatedFormula(currIndexes: number[], prevIndexes: number[], sheet: SheetModel, prevCell?: CellModel): string {\n    let cIdxValue: string; let cell: CellModel;\n    if (prevIndexes) {\n        cell = prevCell || getCell(prevIndexes[0], prevIndexes[1], sheet, false, true);\n        cIdxValue = cell.formula ? cell.formula.toUpperCase() : '';\n    }\n    if (cIdxValue) {\n        if (cIdxValue.indexOf('=') === 0) {\n            cIdxValue = cIdxValue.slice(1);\n        }\n        cIdxValue = cIdxValue.split('(').join(',').split(')').join(',');\n        const formulaOperators: string[] = ['+', '-', '*', '/', '>=', '<=', '<>', '>', '<', '=', '%']; let splitArray: string[];\n        let value: string = cIdxValue;\n        for (let i: number = 0; i < formulaOperators.length; i++) {\n            splitArray = value.split(formulaOperators[i]);\n            value = splitArray.join(',');\n        }\n        splitArray = value.split(',');\n        const newAddress: { [key: string]: string }[] = []; let newRef: string; let refObj: { [key: string]: string };\n        for (let j: number = 0; j < splitArray.length; j++) {\n            if (isCellReference(splitArray[j])) {\n                const range: number[] = getRangeIndexes(splitArray[j]);\n                const newRange: number[] = [currIndexes[0] - (prevIndexes[0] - range[0]), currIndexes[1] - (prevIndexes[1] - range[1]),\n                    currIndexes[0] - (prevIndexes[0] - range[2]), currIndexes[1] - (prevIndexes[1] - range[3])];\n                if (newRange[0] < 0 || newRange[1] < 0 || newRange[2] < 0 || newRange[3] < 0) {\n                    newRef = '#REF!';\n                } else {\n                    newRef = getCellAddress(newRange[0], newRange[1]);\n                    if (splitArray[j].includes(':')) {\n                        newRef += (':' + getCellAddress(newRange[2], newRange[3]));\n                    }\n                    newRef = isCellReference(newRef) ? newRef : '#REF!';\n                }\n                refObj = {}; refObj[splitArray[j]] = newRef;\n                if (splitArray[j].includes(':')) {\n                    newAddress.splice(0, 0, refObj);\n                } else {\n                    newAddress.push(refObj);\n                }\n            }\n        }\n        let objKey: string; cIdxValue = cell.formula;\n        for (let j: number = 0; j < newAddress.length; j++) {\n            objKey = Object.keys(newAddress[j])[0];\n            cIdxValue = cIdxValue.replace(new RegExp(objKey, 'gi'), newAddress[j][objKey].toUpperCase());\n        }\n        return cIdxValue;\n    } else {\n        return null;\n    }\n}\n\n/**@hidden */\nexport function updateCell(context: Workbook, sheet: SheetModel, prop: CellUpdateArgs): boolean {\n    const args: BeforeCellUpdateArgs = { cell: prop.cell, rowIndex: prop.rowIdx, colIndex: prop.colIdx, cancel: false, sheet: sheet.name };\n    if (!prop.preventEvt) { // Prevent event triggering for public method cell update.\n        context.trigger(beforeCellUpdate, args);\n    }\n    if (!prop.eventOnly && !args.cancel) { // `eventOnly` - To trigger event event and return without cell model update.\n        if (prop.valChange) {\n            const prevCell: CellModel = getCell(args.rowIndex, args.colIndex, sheet);\n            const prevCellVal: string = !prop.preventEvt && context.getDisplayText(prevCell);\n            const isFormulaCell: boolean = !!(prevCell && prevCell.formula);\n            setCell(args.rowIndex, args.colIndex, sheet, args.cell, !prop.pvtExtend);\n            const cell: CellModel = getCell(args.rowIndex, args.colIndex, sheet, false, true);\n            context.notify(\n                workbookEditOperation, { action: 'updateCellValue', address: [args.rowIndex, args.colIndex], sheetIndex:\n                getSheetIndex(context, sheet.name), value: isFormulaCell && !cell.formula ? (cell.value ||\n                (<unknown>cell.value === 0 ? '0' : '')) : (cell.formula || cell.value || (<unknown>cell.value === 0 ? '0' : '')) });\n            if (prop.requestType && args.cell === null) {\n                setCell(args.rowIndex, args.colIndex, sheet, args.cell, !prop.pvtExtend);\n            }\n            if (prop.cellDelete) {\n                delete cell.value;\n                delete cell.formula;\n                delete cell.hyperlink;\n            }\n            if (prop.uiRefresh) {\n                context.serviceLocator.getService<{ refresh: Function }>('cell').refresh(\n                    args.rowIndex, args.colIndex, prop.lastCell, prop.td, prop.checkCf, prop.checkWrap);\n            }\n            if (!prop.preventEvt) {\n                const cellDisplayText: string = context.getDisplayText(cell);\n                if (cellDisplayText !== prevCellVal) {\n                    let cellValue: string = getCell(args.rowIndex, args.colIndex, sheet, false, true).value;\n                    cellValue = cellValue || (<unknown>cellValue === 0 ? '0' : '');\n                    const evtArgs: { [key: string]: Object } = { value: cellValue, oldValue: prevCellVal, formula: cell.formula || '',\n                        address: `${sheet.name}!${getCellAddress(args.rowIndex, args.colIndex)}`, displayText: cellDisplayText };\n                    if (prop.requestType) {\n                        evtArgs.requestType = prop.requestType;\n                    }\n                    context.trigger('cellSave', evtArgs);\n                }\n            }\n        } else {\n            setCell(args.rowIndex, args.colIndex, sheet, args.cell, !prop.pvtExtend);\n        }\n    }\n    return args.cancel;\n}\n\n/**\n * @param {number} rowIdx - row index\n * @param {number} colIdx - column index\n * @param {SheetModel} sheet - sheet model\n * @returns {number[]} - retruns data range\n * @hidden\n */\nexport function getDataRange(rowIdx: number, colIdx: number, sheet: SheetModel): number[] {\n    let i: number = 0; let j: number = 0; let loopLength: number = 0;\n    const length: number = sheet.usedRange.rowIndex + sheet.usedRange.colIndex;\n    const startCell: { rowIndex: number, colIndex: number } = { rowIndex: rowIdx, colIndex: colIdx };\n    const endCell: { rowIndex: number, colIndex: number } = { rowIndex: rowIdx, colIndex: colIdx };\n    for (i = 1; i < length + 1; i++) {\n        for (j = -loopLength; j < loopLength + 1; j++) {                            // start from right\n            if (getCell(rowIdx + j, colIdx + i, sheet, null, true).value) {\n                endCell.rowIndex = endCell.rowIndex > rowIdx + j ? endCell.rowIndex : rowIdx + j;\n                endCell.colIndex = endCell.colIndex > colIdx + i ? endCell.colIndex : colIdx + i;\n            }\n        }\n        if (getCell(rowIdx + i, colIdx + i, sheet, null, true).value) {\n            endCell.rowIndex = endCell.rowIndex > rowIdx + i ? endCell.rowIndex : rowIdx + i;\n            endCell.colIndex = endCell.colIndex > colIdx + i ? endCell.colIndex : colIdx + i;\n        }\n        for (j = -loopLength; j < loopLength + 1; j++) {\n            if (getCell(rowIdx + i, colIdx + j, sheet, null, true).value) {\n                endCell.rowIndex = endCell.rowIndex > rowIdx + i ? endCell.rowIndex : rowIdx + i;\n                endCell.colIndex = endCell.colIndex > colIdx + j ? endCell.colIndex : colIdx + j;\n            }\n        }\n        if (getCell(rowIdx + i, colIdx - i, sheet, null, true).value) {\n            endCell.rowIndex = endCell.rowIndex > rowIdx + i ? endCell.rowIndex : rowIdx + i;\n            startCell.colIndex = startCell.colIndex < colIdx - i ? startCell.colIndex : colIdx - i;\n        }\n        for (j = -loopLength; j < loopLength + 1; j++) {\n            if (getCell(rowIdx + j, colIdx - i, sheet, null, true).value) {\n                startCell.rowIndex = startCell.rowIndex < rowIdx + j ? startCell.rowIndex : rowIdx + j;\n                startCell.colIndex = startCell.colIndex < colIdx - i ? startCell.colIndex : colIdx - i;\n                endCell.rowIndex = endCell.rowIndex > rowIdx + j ? endCell.rowIndex : rowIdx + j;\n            }\n        }\n        if (getCell(rowIdx - i, colIdx - i, sheet, null, true).value) {\n            startCell.rowIndex = startCell.rowIndex < rowIdx - i ? startCell.rowIndex : rowIdx - i;\n            startCell.colIndex = startCell.colIndex < colIdx - i ? startCell.colIndex : colIdx - i;\n        }\n        for (j = -loopLength; j < loopLength + 1; j++) {\n            if (getCell(rowIdx - i, colIdx + j, sheet, null, true).value) {\n                startCell.rowIndex = startCell.rowIndex < rowIdx - i ? startCell.rowIndex : rowIdx - i;\n                startCell.colIndex = startCell.colIndex < colIdx + j ? startCell.colIndex : colIdx + j;\n                endCell.colIndex = endCell.colIndex > colIdx + j ? endCell.colIndex : colIdx + j;\n            }\n        }\n        if (getCell(rowIdx - i, colIdx + i, sheet, null, true).value) {\n            startCell.rowIndex = startCell.rowIndex < rowIdx - i ? startCell.rowIndex : rowIdx - i;\n            endCell.colIndex = endCell.colIndex > colIdx + i ? endCell.colIndex : colIdx + i;\n        }\n        loopLength++;\n    }\n    return [startCell.rowIndex, startCell.colIndex, endCell.rowIndex, endCell.colIndex];\n}\n/**\n * @param {InsertDeleteModelArgs} args - row index\n * @param {number[]} formatRange - format range index\n * @returns {number[]} - retruns updated range\n * @hidden\n */\nexport function insertFormatRange(args: InsertDeleteModelArgs, formatRange: number[], isAction: boolean): number[] {\n    let sltRangeIndex: number[] = getRangeIndexes(args.model.selectedRange); let insertStartIndex: number = 0; let insertEndIndex: number = 0;\n    if (args.modelType === 'Column') {\n        if (isAction) {\n            sltRangeIndex = [0,args.start as number,0,args.end];\n        }\n        if (args.insertType === \"before\") {\n            if ((formatRange[1] <= sltRangeIndex[1] && formatRange[3] >= sltRangeIndex[1])) {\n                insertStartIndex = 0;\n                insertEndIndex = (sltRangeIndex[3] - sltRangeIndex[1]) + 1;\n            } else if (sltRangeIndex[1] < formatRange[1]) {\n                insertStartIndex = insertEndIndex = (sltRangeIndex[3] - sltRangeIndex[1]) + 1;\n            }\n        } else {\n            if ((formatRange[1] <= sltRangeIndex[3] && formatRange[3] >= sltRangeIndex[3])) {\n                insertStartIndex = 0;\n                insertEndIndex = (sltRangeIndex[3] - sltRangeIndex[1]) + 1;\n            } else if (sltRangeIndex[3] < formatRange[3]) {\n                insertStartIndex = insertEndIndex = (sltRangeIndex[3] - sltRangeIndex[1]) + 1;\n            }\n        }\n        return [formatRange[0], formatRange[1] + insertStartIndex, formatRange[2], formatRange[3] + insertEndIndex];\n    } else {\n        if (isAction) {\n            sltRangeIndex = [args.start as number,0,args.end,0];\n        }\n        if (args.insertType === \"above\") {\n            if ((formatRange[0] <= sltRangeIndex[0] && formatRange[2] >= sltRangeIndex[0])) {\n                insertStartIndex = 0;\n                insertEndIndex = (sltRangeIndex[2] - sltRangeIndex[0]) + 1;\n            } else if (sltRangeIndex[0] < formatRange[0]) {\n                insertStartIndex = insertEndIndex = (sltRangeIndex[2] - sltRangeIndex[0]) + 1;\n            }\n        } else {\n            if ((formatRange[0] <= sltRangeIndex[2] && formatRange[2] >= sltRangeIndex[2])) {\n                insertStartIndex = 0;\n                insertEndIndex = (sltRangeIndex[2] - sltRangeIndex[0]) + 1;\n            } else if (sltRangeIndex[2] < formatRange[2]) {\n                insertStartIndex = insertEndIndex = (sltRangeIndex[2] - sltRangeIndex[0]) + 1;\n            }\n        }\n        return [formatRange[0] + insertStartIndex, formatRange[1], formatRange[2] + insertEndIndex, formatRange[3]];\n    }\n}\n/**\n * @param {InsertDeleteModelArgs} args - row index\n * @param {number[]} formatRange - cell range index\n * @returns {number[]} - retruns data range\n * @hidden\n */\nexport function deleteFormatRange(args: InsertDeleteModelArgs, formatRange: number[]): number[] {\n    let cellRange: number[]; let deleteStartIndex: number = 0; let deleteEndIndex: number = 0;\n    if (args.modelType === 'Column') {\n        cellRange = [0, args.start as number, args.model.usedRange.rowIndex, args.end];\n        if (cellRange[3] < formatRange[1]) {\n            deleteStartIndex = deleteEndIndex = cellRange[3] - cellRange[1] + 1;\n        }\n        else if (cellRange[1] >= formatRange[1] && cellRange[3] <= formatRange[3]) {\n            deleteEndIndex = cellRange[3] - cellRange[1] + 1;\n        } else if (cellRange[1] >= formatRange[1] && cellRange[1] <= formatRange[3]) {\n            deleteEndIndex = formatRange[3] - cellRange[1] + 1;\n        }\n        else if (cellRange[1] < formatRange[1] && cellRange[3] >= formatRange[1]) {\n            deleteStartIndex = formatRange[1] - cellRange[1];\n            deleteEndIndex = cellRange[3] - cellRange[1] + 1;\n        }\n        else if (cellRange[1] < formatRange[1] && cellRange[3] < formatRange[3]) {\n            deleteStartIndex = (cellRange[3] - formatRange[1]) + (cellRange[3] - cellRange[1]) + 1;\n            deleteEndIndex = cellRange[3] - cellRange[1] + 1;\n        }\n        return [formatRange[0], formatRange[1] - deleteStartIndex, formatRange[2], formatRange[3] - deleteEndIndex];\n    } else {\n        cellRange = [args.start as number, 0, args.end, args.model.usedRange.colIndex];\n        if (cellRange[2] < formatRange[0]) {\n            deleteStartIndex = deleteEndIndex = cellRange[2] - cellRange[0] + 1;\n        }\n        else if (cellRange[0] >= formatRange[0] && cellRange[2] <= formatRange[2]) {\n            deleteEndIndex = cellRange[2] - cellRange[0] + 1;\n        } else if (cellRange[0] >= formatRange[0] && cellRange[0] <= formatRange[2]) {\n            deleteEndIndex = formatRange[2] - cellRange[0] + 1;\n        }\n        else if (cellRange[0] < formatRange[0] && cellRange[2] >= formatRange[0]) {\n            deleteStartIndex = formatRange[0] - cellRange[0];\n            deleteEndIndex = cellRange[2] - cellRange[0] + 1;\n        }\n        else if (cellRange[0] < formatRange[0] && cellRange[2] < formatRange[2]) {\n            deleteStartIndex = (cellRange[2] - formatRange[0]) + (cellRange[2] - cellRange[0]) + 1;\n            deleteEndIndex = cellRange[2] - cellRange[0] + 1;\n        }\n        return [formatRange[0] - deleteStartIndex, formatRange[1], formatRange[2] - deleteEndIndex, formatRange[3]];\n    }\n}\n", "id": "ej2:controls/spreadsheet/src/workbook/common/util.ts:85b74fc9-cc2f-4b09-b88d-36a22fee8116"}
{"path": "src/pages/AppContainer/AppContainer.tsx", "project_name": "Hue-debugger-UI", "text": "import React, { Fragment, FC, useState, useEffect } from 'react';\r\nimport * as service from '../../services/xs-json-requester';\r\nimport Menu from '../../components/Menu/Menu';\r\nimport JSONContainer from '../JSONContainer/JSONContainer';\r\nimport Console from '../../components/Console/Console';\r\nimport LoaderSpinner from '../../components/LoaderSpinner/LoaderSpinner';\r\nimport '../../styles/cssOverwrite.scss';\r\nimport './appContainer.scss';\r\n\r\ninterface IProps {\r\n  ip: string | null;\r\n  token: string | null;\r\n  showSweetAlertDialog: (title: string, hint: string, action: () => void) => void;\r\n  removeAuthentication: () => void;\r\n}\r\n\r\nconst AppContainer: FC<IProps> = (props) => {\r\n  const apiUrl = `http://${props.ip}/api/${props.token}`;\r\n\r\n  const [refreshCount, setRefreshCount] = useState<number>(0);\r\n  const [failedLoading, setFailedLoading] = useState<boolean>(false);\r\n  const [failedMessage, setFailedMessage] = useState<string>('');\r\n  const [hueData, setHueData] = useState<any>(null);\r\n  const [menuItems, setMenuItems] = useState<any[]>([]);\r\n  const [subMenuItems, setSubMenuItems] = useState<any[]>([]);\r\n  const [activeMenu, setActiveMenu] = useState<number>(0);\r\n  const [activeSubMenu, setActiveSubMenu] = useState<number>(0);\r\n  const [showConsole, setShowConsole] = useState<boolean>(false);\r\n  const [consoleOutput, setConsoleOutput] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    requestHueData();\r\n    setInterval(() => {\r\n      setRefreshCount((prevCount) => prevCount + 1);\r\n    }, 2000);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    requestHueData();\r\n  }, [activeMenu, activeSubMenu, refreshCount]);\r\n\r\n  const requestHueData = async (options?: { force?: boolean }) => {\r\n    try {\r\n      const newMenuItems = await fetchMenuItems('');\r\n      const newSubMenuItems = await fetchMenuItems(newMenuItems[activeMenu].id);\r\n\r\n      const dataQuery = newMenuItems[activeMenu]?.id || '';\r\n      const dataPath = newSubMenuItems[activeSubMenu]?.id || '';\r\n\r\n      const prepareHueData = await fetchHueData(`${dataQuery}/${dataPath}`);\r\n\r\n      const newHueData = {\r\n        keyName: newSubMenuItems[activeSubMenu]?.id,\r\n        data: prepareHueData,\r\n      };\r\n\r\n      if (JSON.stringify(newHueData) !== JSON.stringify(hueData) || options?.force) {\r\n        setMenuItems(newMenuItems);\r\n        setSubMenuItems(newSubMenuItems);\r\n        setHueData(newHueData);\r\n      }\r\n    } catch (e) {\r\n      setFailedLoading(true);\r\n      setFailedMessage(e.message);\r\n      throw e;\r\n    }\r\n  };\r\n\r\n  const fetchMenuItems = async (query: string): Promise<any[]> => {\r\n    const result = await service.getJSON(`${apiUrl}/${query}`);\r\n\r\n    if (result[0]) {\r\n      throw result[0].error.description;\r\n    }\r\n\r\n    if (query === 'config') {\r\n      return [];\r\n    }\r\n\r\n    return Object.keys(result).map((item) => ({\r\n      id: item,\r\n      name: query ? `${item} : ${result[item].name}` : item.replace(/^\\w/, (c) => c.toUpperCase()),\r\n    }));\r\n  };\r\n\r\n  const fetchHueData = async (query: string): Promise<any> => {\r\n    const result = await service.getJSON(`${apiUrl}/${query}`);\r\n\r\n    if (result[0]) {\r\n      throw result[0].error.description;\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  const putHueData = async (query: string, data: any) => {\r\n    const url = `${apiUrl}/${menuItems[activeMenu].id}/${query}`;\r\n\r\n    try {\r\n      const result = await service.putJSON(url, data);\r\n      requestHueData({ force: true });\r\n      writeToConsole(result);\r\n    } catch (error) {\r\n      writeToConsole(error);\r\n    }\r\n  };\r\n\r\n  const deleteHueData = async (query: string) => {\r\n    const url = `${apiUrl}/${menuItems[activeMenu].id}/${query}`;\r\n\r\n    try {\r\n      const result = await service.deleteJSON(url, null);\r\n      writeToConsole(result);\r\n      requestHueData({ force: true });\r\n    } catch (error) {\r\n      writeToConsole(error);\r\n    }\r\n  };\r\n\r\n  const createNewHueData = async (newHueData: any) => {\r\n    try {\r\n      const result = await service.postJSON(`${apiUrl}/${menuItems[activeMenu].id}}/`, newHueData);\r\n      writeToConsole(result);\r\n      requestHueData({ force: true });\r\n    } catch (error) {\r\n      writeToConsole(error);\r\n    }\r\n  };\r\n\r\n  const writeToConsole = (write: any[]) => setConsoleOutput((prevOutput) => [...prevOutput, write]);\r\n\r\n  const menuClick = (menuIndex: number) => {\r\n    setActiveMenu(menuIndex);\r\n    setActiveSubMenu(0);\r\n  };\r\n\r\n  const subMenuClick = (menuIndex: number) => {\r\n    setActiveSubMenu(menuIndex);\r\n  };\r\n\r\n  const consoleClick = () => {\r\n    setShowConsole((prevShow) => !prevShow);\r\n  };\r\n\r\n  if (!hueData) {\r\n    return (\r\n      <LoaderSpinner\r\n        isLoading={!failedLoading}\r\n        failMessage={failedMessage}\r\n        backAction={props.removeAuthentication}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='mainContainer'>\r\n        <Menu\r\n          key={activeMenu}\r\n          menuItems={menuItems}\r\n          menuClick={menuClick}\r\n          menuSelected={activeMenu}\r\n        />\r\n        <JSONContainer\r\n          jsonData={hueData}\r\n          subMenuItems={subMenuItems}\r\n          putHueData={putHueData}\r\n          deleteHueData={deleteHueData}\r\n          createNewHueData={createNewHueData}\r\n          writeToConsole={writeToConsole}\r\n          subMenuClick={subMenuClick}\r\n          activeSubMenu={activeSubMenu}\r\n          showSweetAlertDialog={props.showSweetAlertDialog}\r\n        />\r\n      </div>\r\n      <Console show={showConsole} toggleConsole={consoleClick} consoleOutput={consoleOutput} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AppContainer;\r\n", "id": "Hue-debugger-UI:src/pages/AppContainer/AppContainer.tsx:950830ed-deb4-4fd8-b427-23d5eb30948f"}
{"path": "src/engine/fractals/burningbird.ts", "project_name": "FractalJS", "text": "import { FractalDef } from \"./example\";\n\nconst escape = 4;\nvar iLog2 = 1.0 / Math.log(2.0);\n\nexport default {\n  fractalId: \"burningbird\",\n  uiOrder: 2.5,\n  name: \"<NAME>\",\n  preset: { x: -0.46, y: 0.07, w: 3.26, iter: 50 },\n  fn: {\n    normal: (cx, cy, iter) => {\n      var zx = 0,\n        zy = 0,\n        sqx = 0,\n        sqy = 0,\n        i = 0,\n        znx,\n        zny;\n      cy = -cy; // this fractal is usually represented upside down\n      while (true) {\n        zny = (zx + zx) * zy + cy;\n        znx = sqx - sqy + cx;\n        zx = znx;\n        zy = Math.abs(zny);\n        if (++i >= iter) break;\n        sqx = zx * zx;\n        sqy = zy * zy;\n        if (sqx + sqy > escape) break;\n      }\n      return i;\n    },\n    smooth: (cx, cy, iter) => {\n      var zx = 0,\n        zy = 0,\n        sqx = 0,\n        sqy = 0,\n        i = 0,\n        j,\n        znx,\n        zny;\n      cy = -cy; // this fractal is usually represented upside down\n      while (true) {\n        zny = (zx + zx) * zy + cy;\n        znx = sqx - sqy + cx;\n        zx = znx;\n        zy = Math.abs(zny);\n        if (++i >= iter) break;\n        sqx = zx * zx;\n        sqy = zy * zy;\n        if (sqx + sqy > escape) break;\n      }\n      if (i === iter) return i;\n      for (j = 0; j < 4; ++j) {\n        zny = (zx + zx) * zy + cy;\n        znx = sqx - sqy + cx;\n        zx = znx;\n        zy = Math.abs(zny);\n        sqx = zx * zx;\n        sqy = zy * zy;\n      }\n      return 5 + i - Math.log(Math.log(sqx + sqy)) * iLog2;\n    },\n  },\n} as FractalDef;\n", "id": "FractalJS:src/engine/fractals/burningbird.ts:ecaabc43-6b3b-446b-a884-3507a77dfe92"}
{"path": "packages/mobile/src/screens/governance/utils.ts", "project_name": "keplr-extension", "text": "import { IntlShape } from \"react-intl\";\n\nexport const dateToLocalString = (intl: IntlShape, dateStr: string) => {\n  if (!dateStr) {\n    return;\n  }\n\n  const current = new Date();\n  const date = new Date(dateStr);\n  const isYearDifferent = current.getFullYear() !== date.getFullYear();\n\n  return intl\n    .formatDate(dateStr, {\n      format: \"en\",\n      year: isYearDifferent ? \"numeric\" : undefined,\n    })\n    .replace(\"GMT\", \"UTC\");\n};\n", "id": "keplr-extension:packages/mobile/src/screens/governance/utils.ts:826d9b33-8ff5-450f-9a1e-96a3ff6a5623"}
{"path": "ng-semantic/loader/loader.d.ts", "project_name": "Ng-Semantic-example", "text": "export declare class SemanticLoaderComponent {\n    class: string;\n    text: string;\n    complete: boolean;\n}\n", "id": "Ng-Semantic-example:ng-semantic/loader/loader.d.ts:f2f38ece-9cd9-4485-bc3f-5198d65bd0a6"}
{"path": "packages/prime-ui/src/globals.d.ts", "project_name": "prime", "text": "declare module 'braft-editor';\ndeclare module 'markdown-draft-js';\ndeclare module 'react-easy-crop';\n\ndeclare module '*.svg';\ndeclare module '*.png';\ndeclare module '*.jpg';\ndeclare module '*.jpeg';\ndeclare module '*.gif';\ndeclare module '*.bmp';\ndeclare module '*.tiff';\ndeclare module '*.gql';\n", "id": "prime:packages/prime-ui/src/globals.d.ts:07b8dc51-b699-4935-8747-530f3d231b35"}
{"path": "packages/roosterjs-editor-plugins/lib/plugins/ContextMenu/index.ts", "project_name": "roosterjs", "text": "export { default as ContextMenu, ContextMenuOptions } from './ContextMenu';\n", "id": "roosterjs:packages/roosterjs-editor-plugins/lib/plugins/ContextMenu/index.ts:b32b1693-5a7d-4de3-8258-342033366677"}
{"path": "src/smallcommands.ts", "project_name": "julia-vscode", "text": "import * as fs from 'async-file'\nimport * as path from 'path'\nimport * as vscode from 'vscode'\nimport * as telemetry from './telemetry'\nimport { registerCommand } from './utils'\n\nfunction toggleLinter() {\n    telemetry.traceEvent('command-togglelinter')\n\n    const cval = vscode.workspace.getConfiguration('julia').get('lint.run', false)\n    vscode.workspace.getConfiguration('julia').update('lint.run', !cval, true)\n}\n\nfunction applyTextEdit(we) {\n    telemetry.traceEvent('command-applytextedit')\n\n    const wse = new vscode.WorkspaceEdit()\n    for (const edit of we.documentChanges[0].edits) {\n        wse.replace(we.documentChanges[0].textDocument.uri, new vscode.Range(edit.range.start.line, edit.range.start.character, edit.range.end.line, edit.range.end.character), edit.newText)\n    }\n    vscode.workspace.applyEdit(wse)\n}\n\n// function lintPackage() {\n//     telemetry.traceEvent('command-lintpackage');\n\n//     if (g_languageClient == null) {\n//         vscode.window.showErrorMessage('Error: package linting only works with a running julia language server.');\n//     }\n//     else {\n//         try {\n//             g_languageClient.sendRequest(\"julia/lint-package\");\n//         }\n//         catch (ex) {\n//             if (ex.message == \"Language client is not ready yet\") {\n//                 vscode.window.showErrorMessage('Error: package linting only works with a running julia language server.');\n//             }\n//             else {\n//                 throw ex;\n//             }\n//         }\n//     }\n// }\n\nasync function newJuliaFile(uri?: vscode.Uri) {\n    if (uri) {\n        const stat = await vscode.workspace.fs.stat(uri)\n        const dir = stat.type === vscode.FileType.Directory ? uri.fsPath : path.dirname(uri.fsPath)\n        const defaultName = path.join(dir, 'untitled.jl')\n        const givenPath = await vscode.window.showInputBox({\n            value: defaultName,\n            valueSelection: [dir.length + 1, defaultName.length - 3], // select file name\n            prompt: 'Enter a file path to be created',\n            validateInput: async input => {\n                const givenPath = vscode.Uri.file(input).fsPath\n                const exist = await fs.exists(givenPath)\n                if (exist) { return `${givenPath} already exists` }\n                const givenDir = path.dirname(givenPath)\n                const dirExist = await fs.exists(givenDir)\n                if (!dirExist) { return `Directory ${givenDir} doesn't exist` }\n                return undefined // valid\n            }\n        })\n        if (!givenPath) { return } // canceled, etc\n        const targetUri = vscode.Uri.file(givenPath)\n        try {\n            await fs.writeTextFile(targetUri.fsPath, '')\n            const document = await vscode.workspace.openTextDocument(targetUri)\n            await vscode.languages.setTextDocumentLanguage(document, 'julia')\n            await vscode.window.showTextDocument(document)\n        } catch (err) {\n            vscode.window.showErrorMessage(`Failed to create ${targetUri.fsPath}`)\n        }\n    } else {\n        // untitled editor\n        const document = await vscode.workspace.openTextDocument({\n            language: 'julia'\n        })\n        await vscode.window.showTextDocument(document)\n    }\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n    context.subscriptions.push(\n        registerCommand('language-julia.applytextedit', applyTextEdit),\n        registerCommand('language-julia.toggleLinter', toggleLinter),\n        registerCommand('language-julia.newJuliaFile', newJuliaFile)\n    )\n}\n", "id": "julia-vscode:src/smallcommands.ts:ab8006c5-f341-48d8-adbf-ebf33f964548"}
{"path": "packages/fts-dev/src/index.ts", "project_name": "functional-typescript", "text": "import { generateDefinition } from 'fts'\nimport { createHttpHandler, createHttpServer } from 'fts-http'\nimport http from 'http'\nimport path from 'path'\nimport tempy from 'tempy'\n\nexport class DevServerOptions {\n  port: number = 3000\n}\n\nexport async function createDevServer(\n  file: string,\n  options: Partial<DevServerOptions> = {}\n): Promise<http.Server> {\n  const opts = {\n    ...new DevServerOptions(),\n    ...options\n  }\n\n  file = path.resolve(file)\n  const { name } = path.parse(file)\n  const outDir = tempy.directory()\n  const definition = await generateDefinition(file, {\n    compilerOptions: {\n      outDir\n    },\n    emit: true\n  })\n  console.log(definition)\n\n  const jsFilePath = path.join(outDir, `${name}.js`)\n  const handler = createHttpHandler(definition, jsFilePath)\n\n  return createHttpServer(handler, opts.port, { silent: false })\n}\n", "id": "functional-typescript:packages/fts-dev/src/index.ts:5b893c6b-4680-43ee-bff6-d54ee64c8b24"}
{"path": "packages/mui-component-mapper/src/files/date-picker.d.ts", "project_name": "react-forms", "text": "import { DatePickerProps as MuiDatePickerProps } from \"@material-ui/pickers/DatePicker\";\nimport { UseFieldApiComponentConfig } from \"@data-driven-forms/react-form-renderer\";\nimport { GridProps } from \"@material-ui/core\";\nimport { MuiPickersUtilsProviderProps } from \"@material-ui/pickers/MuiPickersUtilsProvider\";\n\ninterface InternalDatePickerProps extends MuiDatePickerProps {\n  FormFieldGridProps: GridProps;\n  MuiPickersUtilsProviderProps: MuiPickersUtilsProviderProps;\n  DatePickerProps: MuiDatePickerProps;\n}\n\nexport type DatePickerProps = InternalDatePickerProps & UseFieldApiComponentConfig;\n\ndeclare const DatePicker: React.ComponentType<DatePickerProps>;\n\nexport default DatePicker;\n", "id": "react-forms:packages/mui-component-mapper/src/files/date-picker.d.ts:b7bb74d4-a5a9-4121-b051-ef169a43bbf9"}
{"path": "packages/insomnia-app/app/main/grpc-ipc-main.ts", "project_name": "insomnia", "text": "import { ipcMain } from 'electron';\n\nimport { GrpcRequestEventEnum } from '../common/grpc-events';\nimport * as grpc from '../network/grpc';\nimport { GrpcIpcRequestParams } from '../network/grpc/prepare';\nimport { ResponseCallbacks } from '../network/grpc/response-callbacks';\n\nexport function init() {\n  ipcMain.on(GrpcRequestEventEnum.start, (e, params: GrpcIpcRequestParams) =>\n    grpc.start(params, new ResponseCallbacks(e)),\n  );\n  ipcMain.on(GrpcRequestEventEnum.sendMessage, (e, params: GrpcIpcRequestParams) =>\n    // @ts-expect-error -- TSCONVERSION\n    grpc.sendMessage(params, new ResponseCallbacks(e)),\n  );\n  ipcMain.on(GrpcRequestEventEnum.commit, (_, requestId) => grpc.commit(requestId));\n  ipcMain.on(GrpcRequestEventEnum.cancel, (_, requestId) => grpc.cancel(requestId));\n  ipcMain.on(GrpcRequestEventEnum.cancelMultiple, (_, requestIdS) =>\n    grpc.cancelMultiple(requestIdS),\n  );\n}\n", "id": "insomnia:packages/insomnia-app/app/main/grpc-ipc-main.ts:96a9c8e7-bcb7-4322-b101-30a15a7b4507"}
{"path": "components/tooltip/src/__tests__/index.test.ts", "project_name": "minna-ui", "text": "// import { tooltip } from '..';\nimport BasicTooltip from './__fixtures__/BasicTooltip.svelte';\n\ndescribe('Tooltip', () => {\n  it('renders nothing visible by default', () => {\n    expect.assertions(1);\n    const target = document.createElement('div');\n    // const component = new BasicTooltip({ target });\n    new BasicTooltip({ target });\n    // console.log('@@@@', component.$$.ctx);\n    // expect(target.innerHTML).toEqual('xx');\n    expect(target.innerHTML).toBeDefined();\n  });\n\n  it('attaches tooltip on hover', () => {\n    expect.assertions(1);\n    const target = document.createElement('div');\n    // const component = new BasicTooltip({ target });\n    new BasicTooltip({ target });\n    // console.log('@@@@', component.$$.ctx);\n    // expect(target.innerHTML).toEqual('xx');\n    expect(target.innerHTML).toBeDefined();\n  });\n});\n", "id": "minna-ui:components/tooltip/src/__tests__/index.test.ts:b9fd8d78-1fb6-453d-99df-95d35892264d"}
{"path": "packages/utils/test/global.test.ts", "project_name": "sentry-javascript", "text": "import { getGlobalObject } from '../src/global';\n\ndescribe('getGlobalObject()', () => {\n  test('should return the same object', () => {\n    const backup = global.process;\n    delete global.process;\n    const first = getGlobalObject();\n    const second = getGlobalObject();\n    expect(first).toEqual(second);\n    global.process = backup;\n  });\n});\n", "id": "sentry-javascript:packages/utils/test/global.test.ts:229474db-dcd1-4438-8a27-7dc0e0970312"}
{"path": "packages/system/src/Effect/interruptAllChildren.ts", "project_name": "core", "text": "// ets_tracing: off\n\nimport { interruptAll } from \"../Fiber\"\nimport type { Effect } from \"./effect\"\nimport { ensuringChildren_ } from \"./ensuringChildren\"\n\n/**\n * Returns a new effect that will not succeed with its value before first\n * interrupting all child fibers forked by the effect.\n */\nexport function interruptAllChildren<R, E, A>(self: Effect<R, E, A>, __trace?: string) {\n  return ensuringChildren_(self, interruptAll, __trace)\n}\n", "id": "core:packages/system/src/Effect/interruptAllChildren.ts:564a447c-0d40-44ef-a837-ccafb7f5625f"}
{"path": "src/server/messages.ts", "project_name": "creevey", "text": "import cluster from 'cluster';\nimport {\n  WorkerMessage,\n  TestMessage,\n  WebpackMessage,\n  DockerMessage,\n  ProcessMessage,\n  WorkerHandler,\n  TestHandler,\n  WebpackHandler,\n  DockerHandler,\n  ShutdownHandler,\n} from '../types';\n\nfunction emitMessage<T>(message: T): boolean {\n  if (cluster.isWorker && !process.connected) return false;\n  return (\n    process.send?.(message) ??\n    // @ts-expect-error: wrong typings `process.emit` return boolean\n    process.emit('message', message)\n  );\n}\n\nexport function emitWorkerMessage(message: WorkerMessage): boolean {\n  return emitMessage({ scope: 'worker', ...message });\n}\n\nexport function emitTestMessage(message: TestMessage): boolean {\n  return emitMessage({ scope: 'test', ...message });\n}\n\nexport function emitWebpackMessage(message: WebpackMessage): boolean {\n  return emitMessage({ scope: 'webpack', ...message });\n}\n\nexport function emitDockerMessage(message: DockerMessage): boolean {\n  return emitMessage({ scope: 'docker', ...message });\n}\n\nexport function emitShutdownMessage(): boolean {\n  return emitMessage({ scope: 'shutdown' });\n}\n\ninterface Handlers {\n  worker: Set<WorkerHandler>;\n  test: Set<TestHandler>;\n  webpack: Set<WebpackHandler>;\n  docker: Set<DockerHandler>;\n  shutdown: Set<ShutdownHandler>;\n}\n\nconst handlers: Handlers = Object.assign(Object.create(null) as unknown, {\n  worker: new Set<WorkerHandler>(),\n  test: new Set<TestHandler>(),\n  webpack: new Set<WebpackHandler>(),\n  docker: new Set<DockerHandler>(),\n  shutdown: new Set<ShutdownHandler>(),\n});\n\nconst handler = (message: ProcessMessage): void => {\n  switch (message.scope) {\n    case 'worker':\n      return handlers.worker.forEach((h) => h(message));\n    case 'test':\n      return handlers.test.forEach((h) => h(message));\n    case 'webpack':\n      return handlers.webpack.forEach((h) => h(message));\n    case 'docker':\n      return handlers.docker.forEach((h) => h(message));\n    case 'shutdown':\n      return handlers.shutdown.forEach((h) => h(message));\n  }\n};\nprocess.on('message', handler);\n\nexport function sendTestMessage(target: NodeJS.Process | cluster.Worker, message: TestMessage): void {\n  target.send?.({ scope: 'test', ...message });\n}\nexport function sendDockerMessage(target: NodeJS.Process | cluster.Worker, message: DockerMessage): void {\n  target.send?.({ scope: 'docker', ...message });\n}\nexport function sendShutdownMessage(target: NodeJS.Process | cluster.Worker): void {\n  target.send?.({ scope: 'shutdown' });\n}\n\nexport function subscribeOn(scope: 'worker', handler: WorkerHandler): () => void;\nexport function subscribeOn(scope: 'test', handler: TestHandler): () => void;\nexport function subscribeOn(scope: 'webpack', handler: WebpackHandler): () => void;\nexport function subscribeOn(scope: 'docker', handler: DockerHandler): () => void;\nexport function subscribeOn(scope: 'shutdown', handler: ShutdownHandler): () => void;\nexport function subscribeOn(\n  scope: 'worker' | 'test' | 'webpack' | 'docker' | 'shutdown',\n  handler: WorkerHandler | TestHandler | WebpackHandler | DockerHandler | ShutdownHandler,\n): () => void;\n\nexport function subscribeOn(\n  scope: 'worker' | 'test' | 'webpack' | 'docker' | 'shutdown',\n  handler: WorkerHandler | TestHandler | WebpackHandler | DockerHandler | ShutdownHandler,\n): () => void {\n  switch (scope) {\n    case 'worker': {\n      const workerHandler = handler as WorkerHandler;\n      handlers.worker.add(workerHandler);\n      return () => handlers.worker.delete(workerHandler);\n    }\n    case 'test': {\n      const testHandler = handler as TestHandler;\n      handlers.test.add(testHandler);\n      return () => handlers.test.delete(testHandler);\n    }\n    case 'webpack': {\n      const webpackHandler = handler as WebpackHandler;\n      handlers.webpack.add(webpackHandler);\n      return () => handlers.webpack.delete(webpackHandler);\n    }\n    case 'docker': {\n      const dockerHandler = handler as DockerHandler;\n      handlers.docker.add(dockerHandler);\n      return () => handlers.docker.delete(dockerHandler);\n    }\n    case 'shutdown': {\n      const shutdownHandler = handler as ShutdownHandler;\n      handlers.shutdown.add(shutdownHandler);\n      return () => handlers.shutdown.delete(shutdownHandler);\n    }\n  }\n}\n", "id": "creevey:src/server/messages.ts:d68134fe-8f4c-49ea-81bf-f77315632b7f"}
{"path": "configurator/frontend/src/catalog/mappings/lib/facebookPixel.tsx", "project_name": "jitsu", "text": "import { DestinationConfigurationTemplate } from '../types';\n\nconst mapping: DestinationConfigurationTemplate = {\n  displayName: 'Facebook Pixel',\n  comment: <>This templates converts incoming  events to <a href=\"https://developers.facebook.com/docs/marketing-api/conversions-api/\">Facebook conversion (pixel)</a> API calls.\n    {' '}Make sure you use Facebook destination, otherwise configuration won't make much sense\n  </>,\n  keepUnmappedFields: false,\n  mappings: [\n    {\n      src: '/event_type',\n      dst: '/event_name',\n      action: 'move'\n    },\n    {\n      src: '/eventn_ctx/event_id',\n      dst: '/event_id',\n      action: 'move'\n    },\n    {\n      src: '/eventn_ctx_event_id',\n      dst: '/event_id',\n      action: 'move'\n    },\n    {\n      src: '/eventn_ctx/url',\n      dst: '/event_source_url',\n      action: 'move'\n    },\n    {\n      src: '/url',\n      dst: '/event_source_url',\n      action: 'move'\n    },\n    {\n      src: '/source_ip',\n      dst: '/user_data/client_ip_address',\n      action: 'move'\n    },\n    {\n      src: '/eventn_ctx/user/email',\n      dst: '/user_data/em',\n      action: 'move'\n    },\n    {\n      src: '/user/email',\n      dst: '/user_data/em',\n      action: 'move'\n    },\n    {\n      src: '/eventn_ctx/user_agent',\n      dst: '/user_data/client_user_agent',\n      action: 'move'\n    },\n    {\n      src: '/user_agent',\n      dst: '/user_data/client_user_agent',\n      action: 'move'\n    }\n  ]\n}\n\nexport default mapping;\n", "id": "jitsu:configurator/frontend/src/catalog/mappings/lib/facebookPixel.tsx:c0334714-6164-4c1b-abc7-d24712de63d4"}
{"path": "tests/cases/compiler/readonlyInDeclarationFile.ts", "project_name": "TypeScript", "text": "// @target: es5\r\n// @declaration: true\r\n\r\ninterface Foo {\r\n    readonly x: number;\r\n    readonly [x: string]: Object;\r\n}\r\n\r\nclass C {\r\n    readonly [x: string]: Object;\r\n    private readonly a1: number;\r\n    protected readonly a2: number;\r\n    public readonly a3: number;\r\n    private get b1() { return 1 }\r\n    protected get b2() { return 1 }\r\n    public get b3() { return 1 }\r\n    private get c1() { return 1 }\r\n    private set c1(value) { }\r\n    protected get c2() { return 1 }\r\n    protected set c2(value) { }\r\n    public get c3() { return 1 }\r\n    public set c3(value) { }\r\n    private static readonly s1: number;\r\n    protected static readonly s2: number;\r\n    public static readonly s3: number;\r\n    private static get t1() { return 1 }\r\n    protected static get t2() { return 1 }\r\n    public static get t3() { return 1 }\r\n    private static get u1() { return 1 }\r\n    private static set u1(value) { }\r\n    protected static get u2() { return 1 }\r\n    protected static set u2(value) { }\r\n    public static get u3() { return 1 }\r\n    public static set u3(value) { }\r\n}\r\n\r\nvar z: {\r\n    readonly a: string;\r\n    readonly [x: string]: Object;\r\n}\r\n\r\nfunction f() {\r\n    return {\r\n        get x() { return 1; },\r\n        get y() { return 1; },\r\n        set y(value) { }\r\n    }\r\n}\r\n\r\nfunction g() {\r\n    var x: {\r\n        readonly a: string;\r\n        readonly [x: string]: Object;\r\n    }\r\n    return x;\r\n}", "id": "TypeScript:tests/cases/compiler/readonlyInDeclarationFile.ts:40a4af49-c412-43c8-9001-34050c4d1fdb"}
{"path": "packages/-ember-data/app/serializers/-default.ts", "project_name": "data", "text": "export { default } from '@ember-data/serializer/json';\n", "id": "data:packages/-ember-data/app/serializers/-default.ts:f6edb05a-9bf7-443a-9e42-7378424c9cc1"}
{"path": "app/src/ui/diff/image-diffs/onion-skin.tsx", "project_name": "desktop", "text": "import * as React from 'react'\nimport { ICommonImageDiffProperties } from './modified-image-diff'\nimport { ImageContainer } from './image-container'\n\ninterface IOnionSkinState {\n  readonly crossfade: number\n}\n\nexport class OnionSkin extends React.Component<\n  ICommonImageDiffProperties,\n  IOnionSkinState\n> {\n  public constructor(props: ICommonImageDiffProperties) {\n    super(props)\n\n    this.state = { crossfade: 1 }\n  }\n\n  public render() {\n    const style: React.CSSProperties = {\n      height: this.props.maxSize.height,\n      width: this.props.maxSize.width,\n    }\n\n    const maxSize: React.CSSProperties = {\n      maxHeight: this.props.maxSize.height,\n      maxWidth: this.props.maxSize.width,\n    }\n\n    return (\n      <div className=\"image-diff-onion-skin\">\n        <div className=\"sizing-container\" ref={this.props.onContainerRef}>\n          <div className=\"image-container\" style={style}>\n            <div className=\"image-diff-previous\" style={style}>\n              <ImageContainer\n                image={this.props.previous}\n                onElementLoad={this.props.onPreviousImageLoad}\n                style={maxSize}\n              />\n            </div>\n\n            <div\n              className=\"image-diff-current\"\n              style={{\n                ...style,\n                opacity: this.state.crossfade,\n              }}\n            >\n              <ImageContainer\n                image={this.props.current}\n                onElementLoad={this.props.onCurrentImageLoad}\n                style={maxSize}\n              />\n            </div>\n          </div>\n        </div>\n\n        <input\n          style={{\n            width: this.props.maxSize.width / 2,\n          }}\n          className=\"slider\"\n          type=\"range\"\n          max={1}\n          min={0}\n          value={this.state.crossfade}\n          step={0.001}\n          onChange={this.onValueChange}\n        />\n      </div>\n    )\n  }\n\n  private onValueChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ crossfade: e.currentTarget.valueAsNumber })\n  }\n}\n", "id": "desktop:app/src/ui/diff/image-diffs/onion-skin.tsx:81e0afd1-8423-4cc2-86c4-d7a9475c82d7"}
{"path": "starlight/wallet/src/pages/shared/graphs/BarGraph.tsx", "project_name": "starlight", "text": "import * as React from 'react'\nimport styled from 'styled-components'\n\nimport { GraphSegment } from 'pages/shared/graphs/GraphSegment'\nimport { DUSTYGRAY } from 'pages/shared/Colors'\nimport { Tooltip } from 'pages/shared/Tooltip'\n\nimport { stroopsToLumens } from 'helpers/lumens'\n\nconst GraphWrapper = styled.span`\n  display: flex;\n  align-items: center;\n`\nconst LabelWrapper = styled.span<{ align: string }>`\n  margin-${props => props.align}: 10px;\n  padding-bottom: 5px;\n  text-align: ${props => props.align};\n  width: auto;\n`\nconst Label = styled.span`\n  color: ${DUSTYGRAY};\n  cursor: default;\n  display: inline-block;\n  font-family: 'Nitti Grotesk';\n  font-size: 14px;\n  font-weight: 500;\n  text-transform: uppercase;\n`\nconst SubLabel = styled.label<{ color: string }>`\n  color: ${props => props.color};\n  display: block;\n  font-family: 'Nitti Grotesk';\n  font-size: 18px;\n  font-weight: 700;\n  text-transform: uppercase;\n`\nconst SegmentWrapper = styled.div`\n  flex-grow: 2;\n`\n\ninterface Props {\n  leftLabel?: string\n  leftTooltip?: string\n  leftAmount: number\n  rightAmount: number\n  rightLabel?: string\n  rightTooltip?: string\n  leftColor: string\n  rightColor: string\n}\n\nexport class BarGraph extends React.Component<Props> {\n  public constructor(props: Props) {\n    super(props)\n  }\n\n  private totalAmount() {\n    return this.props.leftAmount + this.props.rightAmount\n  }\n\n  private calculatePercentage(amount: number) {\n    if (this.totalAmount() === 0) {\n      return 0\n    }\n    return (amount / this.totalAmount()) * 100\n  }\n\n  public render() {\n    return (\n      <GraphWrapper>\n        <LabelWrapper align=\"right\">\n          {this.props.leftTooltip ? (\n            <Tooltip hover content={this.props.leftTooltip}>\n              <Label>{this.props.leftLabel || 'Send'}</Label>\n            </Tooltip>\n          ) : (\n            <Label>{this.props.leftLabel || 'Send'}</Label>\n          )}\n          <SubLabel color={this.props.leftColor}>\n            {stroopsToLumens(this.props.leftAmount)} XLM\n          </SubLabel>\n        </LabelWrapper>\n        <SegmentWrapper>\n          <GraphSegment\n            color={this.props.leftColor}\n            height=\"25px\"\n            side=\"left\"\n            full={this.calculatePercentage(this.props.rightAmount) === 0}\n            width={this.calculatePercentage(this.props.leftAmount)}\n          />\n          <GraphSegment\n            color={this.props.rightColor}\n            height=\"25px\"\n            side=\"right\"\n            full={this.calculatePercentage(this.props.leftAmount) === 0}\n            width={this.calculatePercentage(this.props.rightAmount)}\n          />\n        </SegmentWrapper>\n        <LabelWrapper align=\"left\">\n          {this.props.rightTooltip ? (\n            <Tooltip hover content={this.props.rightTooltip}>\n              <Label>{this.props.rightLabel || 'Receive'}</Label>\n            </Tooltip>\n          ) : (\n            <Label>{this.props.rightLabel || 'Receive'}</Label>\n          )}\n          <SubLabel color={this.props.rightColor}>\n            {stroopsToLumens(this.props.rightAmount)} XLM\n          </SubLabel>\n        </LabelWrapper>\n      </GraphWrapper>\n    )\n  }\n}\n", "id": "starlight:starlight/wallet/src/pages/shared/graphs/BarGraph.tsx:71ae5299-942c-4faf-839a-265788dcc843"}
{"path": "projects/demo-app/src/app/demo-options/demo-options.component.ts", "project_name": "angular-cascadable-mentions", "text": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-demo-options',\n  templateUrl: './demo-options.component.html'\n})\nexport class DemoOptionsComponent {\n\n  format(item:any) {\n    return item['value'].toUpperCase();\n  }\n\n  complexItems = [\n    {\n      \"value\" : \"user1\",\n      \"email\": \"<EMAIL>\",\n      \"name\": \"<NAME>\"\n    },\n    {\n      \"value\" : \"user2\",\n      \"email\": \"<EMAIL>\",\n      \"name\": \"<NAME>\"\n    },\n    {\n      \"value\" : \"user3\",\n      \"email\": \"<EMAIL>\",\n      \"name\": \"<NAME>\"\n    }\n  ];\n}\n", "id": "angular-cascadable-mentions:projects/demo-app/src/app/demo-options/demo-options.component.ts:18459c5c-6b6f-4b4e-8d5f-0d7f3ceb81d0"}
{"path": "src/types/component.ts", "project_name": "instantsearch.js", "text": "export type ComponentCSSClasses<TCSSClasses> = Required<\n  { [className in keyof TCSSClasses]: string }\n>;\n", "id": "instantsearch.js:src/types/component.ts:5a01cf4e-d22f-4679-91dc-b679315c8212"}
{"path": "web/src/app/dashboard/failure-roller/failure-roller.component.ts", "project_name": "overwatch", "text": "import { Component, Output, EventEmitter, OnInit } from \"@angular/core\";\nimport { trigger, state, style, transition, animate, keyframes } from \"@angular/animations\";\nimport { SystemFailureDto } from \"../../common/system-failure/system-failure.dto\";\n\ninterface FailureRowVo {\n    id: string;\n    state: \"idle\" | \"changed\";\n    failure: SystemFailureVo;\n}\n\ninterface SystemFailureVo {\n    time: number;\n    system: string;\n    status: string;\n    count: number;\n}\n\n@Component({\n    selector: \"ow-failure-roller\",\n    templateUrl: \"failure-roller.template.html\",\n    styleUrls: [ \"failure-roller.style.scss\" ],\n    animations: [\n        trigger(\"rowState\", [\n            state(\"idle\", style({ opacity: 1, transform: \"translateX(0)\" })),\n            state(\"changed\", style({ opacity: 1, transform: \"translateX(0)\" })),\n            transition(\"void => *\", [\n                style({ opacity: 0, transform: \"translateX(-100%)\" }),\n                animate(\"0.2s ease-out\")\n            ]),\n            transition(\"idle <=> changed\", [\n                animate(1000, keyframes([\n                    style({ opacity: 1 }),\n                    style({ opacity: 0.3 }),\n                    style({ opacity: 1 }),\n                    style({ opacity: 0.3 }),\n                    style({ opacity: 1 })\n                ]))\n            ])\n        ])\n    ]\n})\nexport class FailureRoller implements OnInit {\n\n    @Output() systemSelected = new EventEmitter<string>();\n    private failureRows: Array<FailureRowVo> = [];\n    private failureLookup: Map<string, FailureRowVo> = new Map<string, FailureRowVo>();\n    private maxLogRows = 20;\n\n    ngOnInit() {\n    }\n\n    onSystemSelected(system: string) {\n        this.systemSelected.emit(system);\n    }\n\n    private failureHash(failure: SystemFailureDto): string {\n        let time = failure.time;\n        time = time - time % 60;\n        return `${ time }_${ failure.system }_${ failure.status }`;\n    }\n\n    addLogItem = (failure: SystemFailureDto) => {\n        let id = this.failureHash(failure);\n        if (this.failureLookup.has(id)) {\n            let rowVo: FailureRowVo = this.failureLookup.get(id);\n            rowVo.failure.count++;\n            rowVo.state = rowVo.state === \"idle\" ? \"changed\" : \"idle\";\n        } else {\n            let vo: SystemFailureVo = {\n                time: failure.time,\n                system: failure.system,\n                status: failure.status,\n                count: 1\n            };\n            let newRow: FailureRowVo = {\n                id: id,\n                failure: vo,\n                state: \"idle\"\n            };\n            this.failureLookup.set(id, newRow);\n            this.failureRows.unshift(newRow);\n            this.failureRows.sort((a, b) => b.failure.time - a.failure.time);\n            if (this.failureRows.length > this.maxLogRows) {\n                let removed = this.failureRows.pop();\n                this.failureLookup.delete(removed.id);\n            }\n        }\n    }\n\n}\n", "id": "overwatch:web/src/app/dashboard/failure-roller/failure-roller.component.ts:ed9bd922-2ce0-4e08-8b20-191e200a931b"}
{"path": "interfaces/javascript/ell_module/templates/index.d.ts", "project_name": "ELL", "text": "export * from \"./ell\"\nexport * from \"./ell_manual\"\n\n", "id": "ELL:interfaces/javascript/ell_module/templates/index.d.ts:dbde8cae-c4d4-44c5-9578-4afed6b6861b"}
{"path": "src/Web/WebSPA/Client/src/features/scenes/useSomeParticipants.tsx", "project_name": "adam-video-conferencing", "text": "import _ from 'lodash';\nimport { useSelector } from 'react-redux';\nimport { selectParticipants } from '../conference/selectors';\nimport { Participant } from '../conference/types';\nimport { selectParticipantsOfRoomWebcamAvailable } from '../media/selectors';\nimport { selectParticipantsOfCurrentRoom } from '../rooms/selectors';\nimport { selectActiveParticipants } from './selectors';\n\nexport type UseParticipantsOptions = {\n   /** only return active participants (participants that are speaking). Included participants are still included */\n   activeOnly?: boolean;\n\n   /** only return participants with active webcam. this also applied to included participants */\n   webcamOnly?: boolean;\n\n   /** participants that should always be included. Please note that filter properties also apply to them */\n   includedParticipants?: Participant[];\n\n   /** excluded participants */\n   excludedParticipants?: string[];\n};\n\nexport default function useSomeParticipants(\n   { includedParticipants, excludedParticipants, webcamOnly, activeOnly }: UseParticipantsOptions = {},\n   count?: number,\n): Participant[] {\n   const activeParticipants = useSelector(selectActiveParticipants);\n   const allParticipants = useSelector(selectParticipants);\n   const participantsInRoom = useSelector(selectParticipantsOfCurrentRoom);\n   const participantsWithWebcam = useSelector(selectParticipantsOfRoomWebcamAvailable);\n\n   const orderedActiveParticipantsOfCurrentRoom = _(Object.entries(activeParticipants))\n      .filter(([id]) => participantsInRoom.includes(id))\n      .orderBy(([, state]) => state.orderNumber)\n      .map(([participantId]) => allParticipants[participantId])\n      .filter((x): x is Participant => !!x)\n      .value();\n\n   let query = _(includedParticipants ?? [])\n      .concat(orderedActiveParticipantsOfCurrentRoom)\n      .concat(participantsInRoom.map((x) => allParticipants[x]).filter((x): x is Participant => !!x))\n      .uniqBy((x) => x.id);\n\n   if (activeOnly) {\n      query = query.filter(\n         (x) => !activeParticipants[x.id]?.inactive || !!includedParticipants?.find((y) => y.id === x.id),\n      );\n   }\n\n   if (excludedParticipants) {\n      query = query.filter((x) => !excludedParticipants?.includes(x.id));\n   }\n\n   if (webcamOnly) {\n      query = query.filter((x) => participantsWithWebcam.includes(x.id));\n   }\n\n   if (count !== undefined) {\n      query = query.slice(0, count);\n   }\n\n   return query.value();\n}\n", "id": "adam-video-conferencing:src/Web/WebSPA/Client/src/features/scenes/useSomeParticipants.tsx:961e4271-426e-42ad-afe6-512a649e8756"}
{"path": "spec/schema/intersect.ts", "project_name": "typebox", "text": "import { Type } from '@sinclair/typebox'\nimport { ok, fail } from './validate'\n\ndescribe('Intersect', () => {\n\n    it('Should intersect two objects', () => {\n        const A = Type.Object({ a: Type.String() })\n        const B = Type.Object({ b: Type.Number() })\n        const T = Type.Intersect([A, B])\n        ok(T, { a: 'hello', b: 42 })\n    })\n\n    it('Should allow additional properties if not using unevaluatedProperties', () => {\n        const A = Type.Object({ a: Type.String() })\n        const B = Type.Object({ b: Type.Number() })\n        const T = Type.Intersect([A, B])\n        ok(T, { a: 'hello', b: 42, c: true })\n    })\n\n    it('Should not allow additional properties if using unevaluatedProperties', () => {\n        const A = Type.Object({ a: Type.String() })\n        const B = Type.Object({ b: Type.Number() })\n        const T = Type.Intersect([A, B], { unevaluatedProperties: false })\n        fail(T, { a: 'hello', b: 42, c: true })\n    })\n\n    describe('Should not allow unevaluatedProperties with record intersection', () => {\n        const A = Type.Object({\n            a: Type.String(),\n            b: Type.String(),\n            c: Type.String()\n        })\n        const B = Type.Record(Type.Number(), Type.Number())\n        const T = Type.Intersect([A, B])\n        ok(T, {\n            a: 'a', b: 'b', c: 'c',\n            0: 1, 1: 2, 2: 3\n        })\n    })\n\n    describe('Should intersect object with number record', () => {\n        const A = Type.Object({\n            a: Type.String(),\n            b: Type.String(),\n            c: Type.String()\n        })\n        const B = Type.Record(Type.Number(), Type.Number())\n        const T = Type.Intersect([A, B])\n        ok(T, {\n            a: 'a', b: 'b', c: 'c',\n            0: 1, 1: 2, 2: 3\n        })\n    })\n\n    describe('Should not intersect object with string record', () => {\n        const A = Type.Object({\n            a: Type.String(),\n            b: Type.String(),\n            c: Type.String()\n        })\n        const B = Type.Record(Type.String(), Type.Number())\n        const T = Type.Intersect([A, B])\n        fail(T, {\n            a: 'a', b: 'b', c: 'c',\n            x: 1, y: 2, z: 3\n        })\n    })\n\n    describe('Should intersect object with union literal record', () => {\n        const A = Type.Object({\n            a: Type.String(),\n            b: Type.String(),\n            c: Type.String()\n        })\n        const K = Type.Union([\n            Type.Literal('x'),\n            Type.Literal('y'),\n            Type.Literal('z')\n        ])\n        const B = Type.Record(K, Type.Number())\n        const T = Type.Intersect([A, B])\n        ok(T, {\n            a: 'a', b: 'b', c: 'c',\n            x: 1, y: 2, z: 3\n        })\n    })\n\n    describe('Should intersect with partial', () => {\n        const A = Type.Object({ a: Type.Number() })\n        const B = Type.Object({ b: Type.Number() })\n        const P = Type.Intersect([Type.Partial(A), Type.Partial(B)], { unevaluatedProperties: false })\n        ok(P, { a: 1, b: 2 })\n        ok(P, { a: 1 })\n        ok(P, { b: 1 })\n        fail(P, { c: 1 })\n    })\n})\n", "id": "typebox:spec/schema/intersect.ts:3370d94d-b08c-421b-9016-27edbce57aa2"}
{"path": "src/utils.ts", "project_name": "codeclimate", "text": "import { createHash, timingSafeEqual } from 'crypto';\nimport { readFile, createWriteStream } from 'fs';\nimport { promisify } from 'util';\nimport { getInput } from '@actions/core';\nimport fetch from 'node-fetch';\nimport { readKey, readSignature, createMessage, verify } from 'openpgp';\n\nconst readFileAsync = promisify(readFile);\ntype ReadFileAsyncOptions = Omit<Parameters<typeof readFileAsync>[1], 'string'>;\n\n/**\n * Parses GitHub Action input and returns the optional value as a string.\n *\n * @param name Input name (declared in `action.yml`).\n * @param defaultValue Default value as optional fallback.\n * @returns Parsed input value.\n */\nexport const getOptionalString = (name: string, defaultValue = '') =>\n  getInput(name, { required: false }) || defaultValue;\n\n/**\n * Naively checks if 2 given JSON objects are identical.\n *\n * @param obj1 First JSON.\n * @param obj2 Second JSON.\n * @returns `true` if same, `false` if not.\n */\nexport const areObjectsEqual = (\n  obj1: object | [],\n  obj2: object | []\n): boolean => JSON.stringify(obj1) === JSON.stringify(obj2);\n\n/**\n * Downloads the given URL as a file to the given file location.\n *\n * @param url URL to download.\n * @param file File path to save the download to.\n * @param mode (Optional) File mode.\n */\nexport function downloadToFile(\n  url: string,\n  file: string,\n  mode: number = 0o755\n): Promise<void> {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await fetch(url, { timeout: 2 * 60 * 1000 }); // Timeout in 2 minutes.\n      const writer = createWriteStream(file, { mode });\n      response.body.pipe(writer);\n      writer.on('close', () => {\n        return resolve();\n      });\n    } catch (err) {\n      return reject(err);\n    }\n  });\n}\n\n/**\n * Returns file contents as a `Buffer`.\n *\n * @param filePath File path to read.\n * @param options (Optional) File read options. @see https://nodejs.org/dist/latest-v16.x/docs/api/fs.html#fs_filehandle_readfile_options\n * @returns File contents as `Buffer`.\n */\nexport async function getFileContents(\n  filePath: string,\n  options?: ReadFileAsyncOptions\n): Promise<Buffer> {\n  return await readFileAsync(filePath, options);\n}\n\n/**\n * Returns file contents as a string. Useful for reading ASCII-encoded files.\n *\n * @param filePath File path to read.\n * @param options (Optional) File read options. @see https://nodejs.org/dist/latest-v16.x/docs/api/fs.html#fs_filehandle_readfile_options\n * @returns File contents as string.\n */\nexport async function getFileContentsAsString(\n  filePath: string,\n  options?: ReadFileAsyncOptions\n): Promise<string> {\n  return (await getFileContents(filePath, options)).toString('utf8');\n}\n\n/**\n * Returns given file's checksum by calculating the hash for the given algorithm.\n *\n * @param filePath File to generate checksum for.\n * @param algorithm Hashing algorithm. @default `sha256`\n * @returns Checksum of file as string.\n */\nexport async function getFileChecksum(\n  filePath: string,\n  algorithm: string = 'sha256'\n): Promise<string> {\n  const fileContents = await getFileContents(filePath);\n  return createHash(algorithm).update(fileContents).digest('hex');\n}\n\n/**\n * Verifies that the file and its checksum file actually match. It generates\n * the checksum and compares it with the checksum in the accompanying checksum file.\n *\n * Note that the checksum file is of the format `<checksum> <filename>`.\n *\n * @param originalFile Original file for which the checksum was generated.\n * @param checksumFile Checksum file.\n * @param algorithm (Optional) Hashing algorithm. @default `sha256`\n * @returns Returns `true` if checksums match, `false` if they don't.\n */\nexport async function verifyChecksum(\n  originalFile: string,\n  checksumFile: string,\n  algorithm: string = 'sha256'\n): Promise<boolean> {\n  const binaryChecksum = await getFileChecksum(originalFile, algorithm);\n  const declaredChecksumFileContents = await getFileContents(checksumFile);\n  const declaredChecksum = declaredChecksumFileContents\n    .toString()\n    .trim()\n    .split(' ')[0];\n  try {\n    return timingSafeEqual(\n      Buffer.from(binaryChecksum),\n      Buffer.from(declaredChecksum)\n    );\n  } catch {\n    // Fail on other errors that can definitely cause the comparison to fail, including\n    // mismatched Buffer byte lengths.\n    return false;\n  }\n}\n\n/**\n * Verifies the GPG signature of the given file.\n *\n * @param messageFilePath The message file that was signed.\n * @param signatureFilePath GPG signature file.\n * @param publicKeyFilePath GPG public key file.\n * @returns Returns `true` if signatures match, `false` if they don't.\n */\nexport async function verifySignature(\n  messageFilePath: string,\n  signatureFilePath: string,\n  publicKeyFilePath: string\n): Promise<boolean> {\n  const messageText = await getFileContentsAsString(messageFilePath);\n  const signatureBuffer = await getFileContents(signatureFilePath);\n  const publicKeyText = await getFileContentsAsString(publicKeyFilePath);\n\n  const publicKey = await readKey({\n    armoredKey: publicKeyText,\n  });\n\n  const signature = await readSignature({\n    binarySignature: signatureBuffer,\n  });\n  const message = await createMessage({ text: messageText });\n  const verificationResult = await verify({\n    message,\n    signature,\n    verificationKeys: publicKey,\n  });\n  const { verified } = verificationResult.signatures[0];\n  try {\n    await verified;\n    return true;\n  } catch {\n    return false;\n  }\n}\n", "id": "codeclimate:src/utils.ts:97c52b89-c8a6-4393-bd16-9e7c2c89d618"}
{"path": "src/frontend/packages/core/src/features/endpoints/backup-restore/backup-restore.types.ts", "project_name": "stratos-ui", "text": "import { EndpointModel } from '../../../../../store/src/types/endpoint.types';\n\nexport enum BackupEndpointTypes {\n  ENDPOINT = 'endpoint',\n  CONNECT = 'connect',\n}\n\nexport enum BackupEndpointConnectionTypes {\n  NONE = 'NONE',\n  CURRENT = 'CURRENT',\n  ALL = 'ALL'\n}\n\nexport interface BackupEndpointsConfig<T> {\n  [endpointId: string]: T;\n}\n\nexport interface BaseEndpointConfig {\n  [BackupEndpointTypes.ENDPOINT]: boolean;\n  [BackupEndpointTypes.CONNECT]: BackupEndpointConnectionTypes;\n}\n\nexport interface BackupEndpointConfigUI extends BaseEndpointConfig {\n  entity: EndpointModel;\n}\n", "id": "stratos-ui:src/frontend/packages/core/src/features/endpoints/backup-restore/backup-restore.types.ts:fdcbfadb-bac0-423f-a623-2410833b99d8"}
{"path": "src/modules/users/interfaces/services/get.user.service.interface.ts", "project_name": "base-app-nestjs", "text": "import { UserDomain } from 'src/modules/users/domain/user.domain';\n\nexport interface GetUserService {\n    getById(id: string): Promise<UserDomain | undefined>;\n    getByEmail(email: string): Promise<UserDomain | undefined>;\n}\n", "id": "base-app-nestjs:src/modules/users/interfaces/services/get.user.service.interface.ts:45c5b064-7b3f-404e-82f6-5991a88c98ed"}
{"path": "packages/a11y-testing/src/definitions/Pill/pillIconBehaviorDefinition.ts", "project_name": "fluentui", "text": "import { Rule } from '../../types';\nimport { BehaviorRule } from '../../rules/rules';\n\nexport const pillIconBehaviorDefinition: Rule[] = [\n  BehaviorRule.root().hasAttribute('aria-hidden', 'true').description(`Icon should be hidden for screen readers`),\n];\n", "id": "fluentui:packages/a11y-testing/src/definitions/Pill/pillIconBehaviorDefinition.ts:87bd7d24-e683-48b5-9085-ff360242d427"}
{"path": "src/index.tsx", "project_name": "react-native-slider", "text": "import React, {PureComponent} from 'react';\nimport {\n    Animated,\n    Easing,\n    I18nManager,\n    Image,\n    ImageSourcePropType,\n    LayoutChangeEvent,\n    PanResponder,\n    PanResponderInstance,\n    View,\n    ViewStyle,\n} from 'react-native';\n// styles\nimport {defaultStyles as styles} from './styles';\nimport type {Dimensions, SliderProps, SliderState} from './types';\n\ntype RectReturn = {\n    containsPoint: (nativeX: number, nativeY: number) => boolean;\n    height: number;\n    trackDistanceToPoint: (nativeX: number) => number;\n    width: number;\n    x: number;\n    y: number;\n};\n\nconst Rect = ({\n    height,\n    width,\n    x,\n    y,\n}: {\n    height: number;\n    width: number;\n    x: number;\n    y: number;\n}) => ({\n    containsPoint: (nativeX: number, nativeY: number) =>\n        nativeX >= x &&\n        nativeY >= y &&\n        nativeX <= x + width &&\n        nativeY <= y + height,\n    height,\n    trackDistanceToPoint: (nativeX: number) => {\n        if (nativeX < x) {\n            return x - nativeX;\n        }\n\n        if (nativeX > x + width) {\n            return nativeX - (x + width);\n        }\n\n        return 0;\n    },\n    width,\n    x,\n    y,\n});\n\nconst DEFAULT_ANIMATION_CONFIGS = {\n    spring: {\n        friction: 7,\n        tension: 100,\n    },\n    timing: {\n        duration: 150,\n        easing: Easing.inOut(Easing.ease),\n        delay: 0,\n    },\n};\n\nconst normalizeValue = (\n    props: SliderProps,\n    value?: number | Array<number>,\n): Array<number> => {\n    if (!value || (Array.isArray(value) && value.length === 0)) {\n        return [0];\n    }\n\n    const {maximumValue, minimumValue} = props;\n\n    const getBetweenValue = (inputValue: number) =>\n        Math.max(Math.min(inputValue, maximumValue), minimumValue);\n\n    if (!Array.isArray(value)) {\n        return [getBetweenValue(value)];\n    }\n\n    return value.map(getBetweenValue).sort((a, b) => a - b);\n};\n\nconst updateValues = ({\n    values,\n    newValues = values,\n}: {\n    values: number | Array<number> | Animated.Value | Array<Animated.Value>;\n    newValues?: number | Array<number> | Animated.Value | Array<Animated.Value>;\n}): Animated.Value[] => {\n    if (\n        Array.isArray(newValues) &&\n        Array.isArray(values) &&\n        newValues.length !== values.length\n    ) {\n        return updateValues({values: newValues});\n    }\n\n    if (Array.isArray(values) && Array.isArray(newValues)) {\n        return values?.map((value: number | Animated.Value, index: number) => {\n            let valueToSet = newValues[index];\n            if (value instanceof Animated.Value) {\n                if (valueToSet instanceof Animated.Value) {\n                    valueToSet = valueToSet.__getValue();\n                }\n                value.setValue(valueToSet);\n                return value;\n            }\n\n            if (valueToSet instanceof Animated.Value) {\n                return valueToSet;\n            }\n\n            return new Animated.Value(valueToSet);\n        });\n    }\n\n    return [new Animated.Value(0)];\n};\n\nconst indexOfLowest = (values: Array<number>): number => {\n    let lowestIndex = 0;\n    values.forEach((value, index, array) => {\n        if (value < array[lowestIndex]) {\n            lowestIndex = index;\n        }\n    });\n    return lowestIndex;\n};\n\nexport class Slider extends PureComponent<SliderProps, SliderState> {\n    constructor(props: SliderProps) {\n        super(props);\n        this._panResponder = PanResponder.create({\n            onStartShouldSetPanResponder:\n                this._handleStartShouldSetPanResponder,\n            onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,\n            onPanResponderGrant: this._handlePanResponderGrant,\n            onPanResponderMove: this._handlePanResponderMove,\n            onPanResponderRelease: this._handlePanResponderEnd,\n            onPanResponderTerminationRequest:\n                this._handlePanResponderRequestEnd,\n            onPanResponderTerminate: this._handlePanResponderEnd,\n        });\n        this.state = {\n            allMeasured: false,\n            containerSize: {\n                width: 0,\n                height: 0,\n            },\n            thumbSize: {\n                width: 0,\n                height: 0,\n            },\n            trackMarksValues: updateValues({\n                values: normalizeValue(this.props, this.props.trackMarks),\n            }),\n            values: updateValues({\n                values: normalizeValue(\n                    this.props,\n                    this.props.value instanceof Animated.Value\n                        ? this.props.value.__getValue()\n                        : this.props.value,\n                ),\n            }),\n        };\n    }\n\n    static defaultProps = {\n        animationType: 'timing',\n        debugTouchArea: false,\n        trackMarks: [],\n        maximumTrackTintColor: '#b3b3b3',\n        maximumValue: 1,\n        minimumTrackTintColor: '#3f3f3f',\n        minimumValue: 0,\n        step: 0,\n        thumbTintColor: '#343434',\n        trackClickable: true,\n        value: 0,\n        vertical: false,\n    };\n\n    static getDerivedStateFromProps(props: SliderProps, state: SliderState) {\n        if (\n            props.trackMarks &&\n            !!state.trackMarksValues &&\n            state.trackMarksValues.length > 0\n        ) {\n            const newTrackMarkValues = normalizeValue(props, props.trackMarks);\n            const statePatch = {} as SliderState;\n\n            if (\n                state.trackMarksValues &&\n                newTrackMarkValues.length !== state.trackMarksValues.length\n            ) {\n                statePatch.trackMarksValues = updateValues({\n                    values: state.trackMarksValues,\n                    newValues: newTrackMarkValues,\n                });\n            }\n\n            return statePatch;\n        }\n    }\n\n    componentDidUpdate() {\n        const newValues = normalizeValue(\n            this.props,\n            this.props.value instanceof Animated.Value\n                ? this.props.value.__getValue()\n                : this.props.value,\n        );\n        newValues.forEach((value, i) => {\n            if (!this.state.values[i]) {\n                this._setCurrentValue(value, i);\n            } else if (value !== this.state.values[i].__getValue()) {\n                if (this.props.animateTransitions) {\n                    this._setCurrentValueAnimated(value, i);\n                } else {\n                    this._setCurrentValue(value, i);\n                }\n            }\n        });\n    }\n\n    _getRawValues(\n        values: Array<Animated.Value> | Array<Animated.AnimatedInterpolation>,\n    ) {\n        return values.map((value) => value.__getValue());\n    }\n\n    _handleStartShouldSetPanResponder = (\n        e: any,\n    ): /* gestureState: GestureState */\n    boolean => this._thumbHitTest(e); // Should we become active when the user presses down on the thumb?\n\n    _handleMoveShouldSetPanResponder(): /* e, gestureState: GestureState */\n    boolean {\n        // Should we become active when the user moves a touch over the thumb?\n        return false;\n    }\n\n    _handlePanResponderGrant = (e: {nativeEvent: any}) => {\n        const {thumbSize} = this.state;\n        const {nativeEvent} = e;\n        this._previousLeft = this.props.trackClickable\n            ? nativeEvent.locationX - thumbSize.width\n            : this._getThumbLeft(this._getCurrentValue(this._activeThumbIndex));\n\n        this.props?.onSlidingStart?.(this._getRawValues(this.state.values));\n    };\n\n    _handlePanResponderMove = (_e: any, gestureState: any) => {\n        if (this.props.disabled) {\n            return;\n        }\n\n        this._setCurrentValue(\n            this._getValue(gestureState),\n            this._activeThumbIndex,\n            () => {\n                this.props?.onValueChange?.(\n                    this._getRawValues(this.state.values),\n                );\n            },\n        );\n    };\n\n    _handlePanResponderRequestEnd = () =>\n        /* e, gestureState: GestureState */\n        {\n            // Should we allow another component to take over this pan?\n            return false;\n        };\n\n    _handlePanResponderEnd = (_e: any, gestureState: any) => {\n        if (this.props.disabled) {\n            return;\n        }\n\n        this._setCurrentValue(\n            this._getValue(gestureState),\n            this._activeThumbIndex,\n            () => {\n                if (this.props.trackClickable) {\n                    this.props?.onValueChange?.(\n                        this._getRawValues(this.state.values),\n                    );\n                }\n\n                this.props?.onSlidingComplete?.(\n                    this._getRawValues(this.state.values),\n                );\n            },\n        );\n\n        this._activeThumbIndex = 0;\n    };\n\n    _measureContainer = (e: LayoutChangeEvent) => {\n        this._handleMeasure('_containerSize', e);\n    };\n\n    _measureTrack = (e: LayoutChangeEvent) => {\n        this._handleMeasure('_trackSize', e);\n    };\n\n    _measureThumb = (e: LayoutChangeEvent) => {\n        this._handleMeasure('_thumbSize', e);\n    };\n\n    _handleMeasure = (\n        name: '_containerSize' | '_trackSize' | '_thumbSize',\n        e: LayoutChangeEvent,\n    ) => {\n        const {width, height} = e.nativeEvent.layout;\n        const size = {\n            width,\n            height,\n        };\n\n        const currentSize = this[name];\n\n        if (\n            currentSize &&\n            width === currentSize.width &&\n            height === currentSize.height\n        ) {\n            return;\n        }\n\n        this[name] = size;\n\n        if (this._containerSize && this._thumbSize) {\n            this.setState({\n                containerSize: this._containerSize,\n                thumbSize: this._thumbSize,\n                allMeasured: true,\n            });\n        }\n    };\n    _getRatio = (value: number) => {\n        const {maximumValue, minimumValue} = this.props;\n        return (value - minimumValue) / (maximumValue - minimumValue);\n    };\n    _getThumbLeft = (value: number) => {\n        const {containerSize, thumbSize} = this.state;\n        const {vertical} = this.props;\n\n        const standardRatio = this._getRatio(value);\n\n        const ratio = I18nManager.isRTL ? 1 - standardRatio : standardRatio;\n        return ratio * ((vertical ? containerSize.height : containerSize.width) - thumbSize.width);\n    };\n    _getValue = (gestureState: {dx: number, dy: number}) => {\n        const {containerSize, thumbSize, values} = this.state;\n        const {maximumValue, minimumValue, step, vertical} = this.props;\n        const length = containerSize.width - thumbSize.width;\n        const thumbLeft = vertical ? this._previousLeft + (gestureState.dy * -1) : this._previousLeft + gestureState.dx;\n        const nonRtlRatio = thumbLeft / length;\n        const ratio = I18nManager.isRTL ? 1 - nonRtlRatio : nonRtlRatio;\n        let minValue = minimumValue;\n        let maxValue = maximumValue;\n\n        const rawValues = this._getRawValues(values);\n\n        const buffer = step ? step : 0.1;\n\n        if (values.length === 2) {\n            if (this._activeThumbIndex === 1) {\n                minValue = rawValues[0] + buffer;\n            } else {\n                maxValue = rawValues[1] - buffer;\n            }\n        }\n\n        if (step) {\n            return Math.max(\n                minValue,\n                Math.min(\n                    maxValue,\n                    minimumValue +\n                        Math.round(\n                            (ratio * (maximumValue - minimumValue)) / step,\n                        ) *\n                            step,\n                ),\n            );\n        }\n\n        return Math.max(\n            minValue,\n            Math.min(\n                maxValue,\n                ratio * (maximumValue - minimumValue) + minimumValue,\n            ),\n        );\n    };\n    _getCurrentValue = (thumbIndex: number = 0) =>\n        this.state.values[thumbIndex].__getValue();\n\n    _setCurrentValue = (\n        value: number,\n        thumbIndex: number | null | undefined,\n        callback?: () => void,\n    ) => {\n        const safeIndex = thumbIndex ?? 0;\n        const animatedValue = this.state.values[safeIndex];\n\n        if (animatedValue) {\n            animatedValue.setValue(value);\n\n            if (callback) {\n                callback();\n            }\n        } else {\n            this.setState((prevState: SliderState) => {\n                const newValues = [...prevState.values];\n                newValues[safeIndex] = new Animated.Value(value);\n                return {\n                    values: newValues,\n                };\n            }, callback);\n        }\n    };\n\n    _setCurrentValueAnimated = (value: number, thumbIndex: number = 0) => {\n        const {animationType} = this.props;\n        const animationConfig = {\n            ...DEFAULT_ANIMATION_CONFIGS[animationType],\n            ...this.props.animationConfig,\n            toValue: value,\n            useNativeDriver: false,\n        };\n        Animated[animationType](\n            this.state.values[thumbIndex],\n            animationConfig,\n        ).start();\n    };\n\n    _getTouchOverflowSize = (): {\n        width: number;\n        height: number;\n    } => {\n        const {allMeasured, containerSize, thumbSize} = this.state;\n        const {thumbTouchSize} = this.props;\n        const size = {\n            width: 40,\n            height: 40,\n        };\n\n        if (allMeasured) {\n            size.width = Math.max(\n                0,\n                thumbTouchSize?.width || 0 - thumbSize.width,\n            );\n            size.height = Math.max(\n                0,\n                thumbTouchSize?.height || 0 - containerSize.height,\n            );\n        }\n\n        return size;\n    };\n\n    _getTouchOverflowStyle = () => {\n        const {width, height} = this._getTouchOverflowSize();\n\n        const touchOverflowStyle = {} as ViewStyle;\n\n        if (width !== undefined && height !== undefined) {\n            const verticalMargin = -height / 2;\n            touchOverflowStyle.marginTop = verticalMargin;\n            touchOverflowStyle.marginBottom = verticalMargin;\n            const horizontalMargin = -width / 2;\n            touchOverflowStyle.marginLeft = horizontalMargin;\n            touchOverflowStyle.marginRight = horizontalMargin;\n        }\n\n        if (this.props.debugTouchArea === true) {\n            touchOverflowStyle.backgroundColor = 'orange';\n            touchOverflowStyle.opacity = 0.5;\n        }\n\n        return touchOverflowStyle;\n    };\n    _thumbHitTest = (e: {nativeEvent: any}) => {\n        const {nativeEvent} = e;\n        const {trackClickable} = this.props;\n        const {values} = this.state;\n        const hitThumb = values.find((_, i) => {\n            const thumbTouchRect = this._getThumbTouchRect(i);\n\n            const containsPoint = thumbTouchRect.containsPoint(\n                nativeEvent.locationX,\n                nativeEvent.locationY,\n            );\n\n            if (containsPoint) {\n                this._activeThumbIndex = i;\n            }\n\n            return containsPoint;\n        });\n\n        if (hitThumb) {\n            return true;\n        }\n\n        if (trackClickable) {\n            // set the active thumb index\n            if (values.length === 1) {\n                this._activeThumbIndex = 0;\n            } else {\n                // we will find the closest thumb and that will be the active thumb\n                const thumbDistances = values.map((_value, index) => {\n                    const thumbTouchRect = this._getThumbTouchRect(index);\n\n                    return thumbTouchRect.trackDistanceToPoint(\n                        nativeEvent.locationX,\n                    );\n                });\n                this._activeThumbIndex = indexOfLowest(thumbDistances);\n            }\n\n            return true;\n        }\n\n        return false;\n    };\n\n    _getThumbTouchRect = (thumbIndex: number = 0): RectReturn => {\n        const {containerSize, thumbSize} = this.state;\n        const {thumbTouchSize} = this.props;\n        const {height, width} = thumbTouchSize || {height: 40, width: 40};\n\n        const touchOverflowSize = this._getTouchOverflowSize();\n\n        return Rect({\n            height,\n            width,\n            x:\n                touchOverflowSize.width / 2 +\n                this._getThumbLeft(this._getCurrentValue(thumbIndex)) +\n                (thumbSize.width - width) / 2,\n            y:\n                touchOverflowSize.height / 2 +\n                (containerSize.height - height) / 2,\n        });\n    };\n\n    _activeThumbIndex: number = 0;\n    _containerSize: Dimensions | null | undefined;\n    _panResponder: PanResponderInstance;\n    _previousLeft: number = 0;\n    _thumbSize: Dimensions | null | undefined;\n    _trackSize: Dimensions | null | undefined;\n\n    _renderDebugThumbTouchRect = (\n        thumbLeft: Animated.AnimatedInterpolation,\n        index: number,\n    ) => {\n        const {height, y, width} = this._getThumbTouchRect() || {};\n        const positionStyle = {\n            height,\n            left: thumbLeft,\n            top: y,\n            width,\n        };\n        return (\n            <Animated.View\n                key={`debug-thumb-${index}`}\n                pointerEvents=\"none\"\n                style={[styles.debugThumbTouchArea, positionStyle]}\n            />\n        );\n    };\n\n    _renderThumbImage = (thumbIndex: number = 0) => {\n        const {thumbImage} = this.props;\n\n        if (!thumbImage) {\n            return null;\n        }\n\n        return (\n            <Image\n                source={\n                    (Array.isArray(thumbImage)\n                        ? thumbImage[thumbIndex]\n                        : thumbImage) as ImageSourcePropType\n                }\n            />\n        );\n    };\n\n    render() {\n        const {\n            containerStyle,\n            debugTouchArea,\n            maximumTrackTintColor,\n            maximumValue,\n            minimumTrackTintColor,\n            minimumValue,\n            renderAboveThumbComponent,\n            renderTrackMarkComponent,\n            renderThumbComponent,\n            thumbStyle,\n            thumbTintColor,\n            trackStyle,\n            vertical,\n            ...other\n        } = this.props;\n        const {\n            allMeasured,\n            containerSize,\n            thumbSize,\n            trackMarksValues,\n            values,\n        } = this.state;\n        const interpolatedThumbValues = values.map((value) =>\n            value.interpolate({\n                inputRange: [minimumValue, maximumValue],\n                outputRange: I18nManager.isRTL\n                    ? [0, -(containerSize.width - thumbSize.width)]\n                    : [0, containerSize.width - thumbSize.width],\n            }),\n        );\n        const interpolatedTrackValues = values.map((value) =>\n            value.interpolate({\n                inputRange: [minimumValue, maximumValue],\n                outputRange: [0, containerSize.width - thumbSize.width],\n            }),\n        );\n        const interpolatedTrackMarksValues =\n            trackMarksValues &&\n            trackMarksValues.map((v) =>\n                v.interpolate({\n                    inputRange: [minimumValue, maximumValue],\n                    outputRange: I18nManager.isRTL\n                        ? [0, -(containerSize.width - thumbSize.width)]\n                        : [0, containerSize.width - thumbSize.width],\n                }),\n            );\n        const valueVisibleStyle = {} as ViewStyle;\n\n        if (!allMeasured) {\n            valueVisibleStyle.opacity = 0;\n        }\n\n        const interpolatedRawValues = this._getRawValues(\n            interpolatedTrackValues,\n        );\n\n        const minThumbValue = new Animated.Value(\n            Math.min(...interpolatedRawValues),\n        );\n        const maxThumbValue = new Animated.Value(\n            Math.max(...interpolatedRawValues),\n        );\n        const minimumTrackStyle = {\n            position: 'absolute',\n            left:\n                interpolatedTrackValues.length === 1\n                    ? new Animated.Value(0)\n                    : Animated.add(minThumbValue, thumbSize.width / 2),\n            width:\n                interpolatedTrackValues.length === 1\n                    ? Animated.add(\n                          interpolatedTrackValues[0],\n                          thumbSize.width / 2,\n                      )\n                    : Animated.add(\n                          Animated.multiply(minThumbValue, -1),\n                          maxThumbValue,\n                      ),\n            backgroundColor: minimumTrackTintColor,\n            ...valueVisibleStyle,\n        } as ViewStyle;\n\n        const touchOverflowStyle = this._getTouchOverflowStyle();\n\n        return (\n            <>\n                {renderAboveThumbComponent && (\n                    <View style={styles.aboveThumbComponentsContainer}>\n                        {interpolatedThumbValues.map((value, i) => (\n                            <Animated.View\n                                key={`slider-above-thumb-${i}`}\n                                style={[\n                                    styles.renderThumbComponent, // eslint-disable-next-line react-native/no-inline-styles\n                                    {\n                                        bottom: 0,\n                                        transform: [\n                                            {\n                                                translateX: value,\n                                            },\n                                            {\n                                                translateY: 0,\n                                            },\n                                        ],\n                                        ...valueVisibleStyle,\n                                    },\n                                ]}>\n                                {renderAboveThumbComponent(i)}\n                            </Animated.View>\n                        ))}\n                    </View>\n                )}\n                <View\n                    {...other}\n                    style={[styles.container, vertical ? {transform: [{rotate: '-90deg' }]} : {}, containerStyle]}\n                    onLayout={this._measureContainer}>\n                    <View\n                        renderToHardwareTextureAndroid\n                        style={[\n                            styles.track,\n                            {\n                                backgroundColor: maximumTrackTintColor,\n                            },\n                            trackStyle,\n                        ]}\n                        onLayout={this._measureTrack}\n                    />\n                    <Animated.View\n                        renderToHardwareTextureAndroid\n                        style={[styles.track, trackStyle, minimumTrackStyle]}\n                    />\n                    {renderTrackMarkComponent &&\n                        interpolatedTrackMarksValues &&\n                        interpolatedTrackMarksValues.map((value, i) => (\n                            <Animated.View\n                                key={`track-mark-${i}`}\n                                style={[\n                                    styles.renderThumbComponent,\n                                    {\n                                        transform: [\n                                            {\n                                                translateX: value,\n                                            },\n                                            {\n                                                translateY: 0,\n                                            },\n                                        ],\n                                        ...valueVisibleStyle,\n                                    },\n                                ]}>\n                                {renderTrackMarkComponent(i)}\n                            </Animated.View>\n                        ))}\n                    {interpolatedThumbValues.map((value, i) => (\n                        <Animated.View\n                            key={`slider-thumb-${i}`}\n                            style={[\n                                renderThumbComponent\n                                    ? styles.renderThumbComponent\n                                    : styles.thumb,\n                                renderThumbComponent\n                                    ? {}\n                                    : {\n                                          backgroundColor: thumbTintColor,\n                                          ...thumbStyle,\n                                      },\n                                {\n                                    transform: [\n                                        {\n                                            translateX: value,\n                                        },\n                                        {\n                                            translateY: 0,\n                                        },\n                                    ],\n                                    ...valueVisibleStyle,\n                                },\n                            ]}\n                            onLayout={this._measureThumb}>\n                            {renderThumbComponent\n                                ? renderThumbComponent()\n                                : this._renderThumbImage(i)}\n                        </Animated.View>\n                    ))}\n                    <View\n                        style={[styles.touchArea, touchOverflowStyle]}\n                        {...this._panResponder.panHandlers}>\n                        {!!debugTouchArea &&\n                            interpolatedThumbValues.map((value, i) =>\n                                this._renderDebugThumbTouchRect(value, i),\n                            )}\n                    </View>\n                </View>\n            </>\n        );\n    }\n}\n", "id": "react-native-slider:src/index.tsx:c68f6576-00af-4320-8b28-b5ff54325c79"}
{"path": "client/src/store/history/types.ts", "project_name": "visflow", "text": "// tslint:disable no-any\n\nimport Node from '@/components/node/node';\nimport { DiagramEventType } from '@/store/dataflow/types';\n\nexport enum HistoryEventLevel {\n  DIAGRAM = 'diagram',\n  NODE = 'node',\n  INTERACTION = 'interaction',\n  COMPOSITE = 'compositie', // A comibnation of multiple events\n}\n\nexport type HistoryEventIcon = { isNodeIcon: true, nodeType: string } | { isNodeIcon?: false, value: string };\n\nexport interface HistoryEventBase {\n  level: HistoryEventLevel;\n  message: string;\n  icon?: HistoryEventIcon;\n}\n\nexport interface HistoryEvent extends HistoryEventBase {\n  type: string;\n  data: any;\n}\n\nexport interface HistoryNodeEvent extends HistoryEvent {\n  level: HistoryEventLevel.NODE;\n  nodeId: string;\n}\n\nexport interface HistoryInteractionEvent extends HistoryEvent {\n  level: HistoryEventLevel.INTERACTION;\n}\n\n/**\n * An event that sets an option value for a node. The settings typically happens in the node's option panel.\n * Undoing this event calls setter(prevValue).\n * Redoing this event calls setter(value).\n */\nexport interface HistoryNodeOptionEvent extends HistoryNodeEvent {\n  setter: (value: any) => void;\n  setterName: string;\n  data: {\n    value: any;\n    prevValue: any;\n  };\n}\n\nexport interface HistoryDiagramEvent extends HistoryEvent {\n  level: HistoryEventLevel.DIAGRAM;\n  type: DiagramEventType;\n}\n\n// Batch event that creates/removes multiple nodes/edges\nexport interface HistoryDiagramBatchEvent extends HistoryEvent {\n  level: HistoryEventLevel.DIAGRAM;\n  events: HistoryDiagramEvent[];\n}\n\nexport interface HistoryCompositeEvent extends HistoryEventBase {\n  events: HistoryEvent[];\n  data: any;\n}\n\nexport enum HistoryLogType {\n  UNDO = 'undo',\n  REDO = 'redo',\n  COMMIT = 'commit',\n  SAVE_DIAGRAM = 'save-diagram',\n  LOAD_DIAGRAM = 'load-diagram',\n  CLEAR_DIAGRAM = 'clear-diagram',\n}\nexport interface HistoryLog {\n  type: HistoryLogType;\n  data: any;\n  timestamp: number; // POSIX\n}\n\nexport interface HistoryState {\n  undoStack: HistoryEvent[];\n  redoStack: HistoryEvent[];\n  logs: HistoryLog[];\n  currentLogIndex: number;\n  isViewingLogs: boolean;\n}\n\nexport * from './util';\n", "id": "visflow:client/src/store/history/types.ts:27f27920-e4c9-4df3-aa2f-47187fcb5611"}
{"path": "components/crud-web-apps/volumes/frontend/src/app/pages/form/form-rok/utils.ts", "project_name": "kubeflow", "text": "import { ValidatorFn, FormControl } from '@angular/forms';\n\nexport function rokStorageClassValidator(\n  rokManagedClasses: string[],\n): ValidatorFn {\n  return (control: FormControl): { [key: string]: any } => {\n    const currentClass = control.value;\n    if (!rokManagedClasses.includes(currentClass)) {\n      return { notRokClass: true };\n    }\n\n    return null;\n  };\n}\n", "id": "kubeflow:components/crud-web-apps/volumes/frontend/src/app/pages/form/form-rok/utils.ts:426dcc31-4a6b-4b41-bd9e-6f35e7777b35"}
{"path": "client/project/sidebar/entriesTreeView/buttonCallbacks.ts", "project_name": "superpowers-core", "text": "import { socket, entries } from \"../../network\";\nimport * as tabsAssets from \"../../tabs/assets\";\nimport * as entriesTreeView from \"./\";\nimport CreateAssetDialog from \"./CreateAssetDialog\";\n\nlet autoOpenAsset = true;\nfunction onEntryAddedAck(err: string, id: string) {\n  if (err != null) { new SupClient.Dialogs.InfoDialog(err); return; }\n\n  entriesTreeView.widget.clearSelection();\n  let entry = entriesTreeView.widget.treeRoot.querySelector(`li[data-id='${id}']`) as HTMLLIElement;\n  entriesTreeView.widget.addToSelection(entry);\n  entriesTreeView.updateSelectedEntry();\n\n  if (autoOpenAsset) tabsAssets.open(id);\n  if (entries.byId[id].type == null) entry.classList.remove(\"collapsed\");\n}\n\nexport function onNewAssetClick() {\n  new CreateAssetDialog(autoOpenAsset, (result) => {\n    if (result == null) return;\n\n    if (result.name === \"\")\n      result.name = SupClient.i18n.t(`${tabsAssets.editorsByAssetType[result.type].pluginPath}:editors.${result.type}.title`);\n\n    autoOpenAsset = result.open;\n    socket.emit(\"add:entries\", result.name, result.type, SupClient.getTreeViewInsertionPoint(entriesTreeView.widget), onEntryAddedAck);\n  });\n}\n\nexport function onNewFolderClick() {\n  const options = {\n    header: SupClient.i18n.t(\"project:treeView.newFolder.title\"),\n    placeholder: SupClient.i18n.t(\"project:treeView.newFolder.placeholder\"),\n    initialValue: SupClient.i18n.t(\"project:treeView.newFolder.initialValue\"),\n    validationLabel: SupClient.i18n.t(\"common:actions.create\"),\n    pattern: SupClient.namePattern,\n    title: SupClient.i18n.t(\"common:namePatternDescription\")\n  };\n\n  new SupClient.Dialogs.PromptDialog(SupClient.i18n.t(\"project:treeView.newFolder.prompt\"), options, (name) => {\n    if (name == null) return;\n\n    socket.emit(\"add:entries\", name, null, SupClient.getTreeViewInsertionPoint(entriesTreeView.widget), onEntryAddedAck);\n  });\n}\n\nexport function onRenameEntryClick() {\n  if (entriesTreeView.widget.selectedNodes.length !== 1) return;\n\n  const selectedNode = entriesTreeView.widget.selectedNodes[0];\n  const entry = entries.byId[selectedNode.dataset[\"id\"]];\n\n  const options = {\n    header: SupClient.i18n.t(\"common:actions.rename\"),\n    initialValue: entry.name,\n    validationLabel: SupClient.i18n.t(\"common:actions.rename\"),\n    pattern: SupClient.namePattern,\n    title: SupClient.i18n.t(\"common:namePatternDescription\")\n  };\n\n  new SupClient.Dialogs.PromptDialog(SupClient.i18n.t(\"project:treeView.renamePrompt\"), options, (newName) => {\n    if (newName == null || newName === entry.name) return;\n\n    socket.emit(\"setProperty:entries\", entry.id, \"name\", newName, (err: string) => {\n      if (err != null) { new SupClient.Dialogs.InfoDialog(err); return; }\n    });\n  });\n}\n\nexport function onDuplicateEntryClick() {\n  if (entriesTreeView.widget.selectedNodes.length !== 1) return;\n\n  const selectedNode = entriesTreeView.widget.selectedNodes[0];\n  const entry = entries.byId[selectedNode.dataset[\"id\"]];\n\n  const options = {\n    header: SupClient.i18n.t(\"common:actions.duplicate\"),\n    initialValue: entry.name,\n    validationLabel: SupClient.i18n.t(\"common:actions.duplicate\"),\n    pattern: SupClient.namePattern,\n    title: SupClient.i18n.t(\"common:namePatternDescription\")\n  };\n\n  new SupClient.Dialogs.PromptDialog(SupClient.i18n.t(\"project:treeView.duplicatePrompt\"), options, (newName) => {\n    if (newName == null) return;\n\n    const insertionPoint = entry.type == null ? SupClient.getTreeViewSiblingInsertionPoint(entriesTreeView.widget) : SupClient.getTreeViewInsertionPoint(entriesTreeView.widget);\n    socket.emit(\"duplicate:entries\", newName, entry.id, insertionPoint, onEntryAddedAck);\n  });\n}\n\nexport function onTrashEntryClick() {\n  if (entriesTreeView.widget.selectedNodes.length === 0) return;\n\n  const selectedEntries: SupCore.Data.EntryNode[] = [];\n\n  function checkNextEntry() {\n    selectedEntries.splice(0, 1);\n    if (selectedEntries.length === 0) {\n      const confirmLabel = SupClient.i18n.t(\"project:treeView.trash.prompt\");\n\n      const options = {\n        header: SupClient.i18n.t(\"project:treeView.trash.title\"),\n        validationLabel: SupClient.i18n.t(\"project:treeView.trash.title\"),\n        checkboxLabel: SupClient.i18n.t(\"project:treeView.trash.checkbox\")\n      };\n\n      new SupClient.Dialogs.ConfirmDialog(confirmLabel, options, (confirm) => {\n        if (!confirm) return;\n\n        for (const selectedNode of entriesTreeView.widget.selectedNodes) {\n          const entry = entries.byId[selectedNode.dataset[\"id\"]];\n          socket.emit(\"trash:entries\", entry.id, (err: string) => {\n            if (err != null) { new SupClient.Dialogs.InfoDialog(err); return; }\n          });\n        }\n        entriesTreeView.widget.clearSelection();\n      });\n\n    } else warnBrokenDependency(selectedEntries[0]);\n  }\n\n  function warnBrokenDependency(entry: SupCore.Data.EntryNode) {\n    if (entry.type == null) for (const entryChild of entry.children) selectedEntries.push(entryChild);\n\n    if (entry.dependentAssetIds != null && entry.dependentAssetIds.length > 0) {\n      const dependentAssetNames: string[] = [];\n      for (const usingId of entry.dependentAssetIds) dependentAssetNames.push(entries.getPathFromId(usingId));\n      const infoLabel = SupClient.i18n.t(\"project:treeView.trash.warnBrokenDependency\", {\n        entryName: entries.getPathFromId(entry.id), dependentEntryNames: dependentAssetNames.join(\", \")\n      });\n      new SupClient.Dialogs.InfoDialog(infoLabel, null, () => { checkNextEntry(); });\n    } else checkNextEntry();\n  }\n\n  for (const selectedNode of entriesTreeView.widget.selectedNodes) selectedEntries.push(entries.byId[selectedNode.dataset[\"id\"]]);\n  warnBrokenDependency(selectedEntries[0]);\n}\n\nconst entriesFilterStrip = (document.querySelector(\".filter-buttons\") as HTMLElement);\nexport function setupFilterStrip() {\n  const filterElt = entriesFilterStrip;\n  filterElt.innerHTML = \"\";\n\n  const toggleAllElt = SupClient.html(\"img\", \"toggle-all\", { parent: filterElt, draggable: false });\n  toggleAllElt.addEventListener(\"click\", onToggleAllFilterClick);\n\n  for (const assetType of tabsAssets.assetTypes) {\n    const iconElt = SupClient.html(\"img\", { parent: filterElt, dataset: { assetType }, draggable: false });\n    iconElt.src = `/systems/${SupCore.system.id}/plugins/${tabsAssets.editorsByAssetType[assetType].pluginPath}/editors/${assetType}/icon.svg`;\n    iconElt.addEventListener(\"click\", onToggleAssetTypeFilterClick);\n  }\n}\n\nfunction onToggleAssetTypeFilterClick(event: MouseEvent) {\n  const filterElt = event.target as HTMLElement;\n  const filtered = filterElt.classList.toggle(\"filtered\");\n\n  const assetType = filterElt.dataset[\"assetType\"];\n  const entryElts = (entriesTreeView.widget.treeRoot.querySelectorAll(`[data-asset-type='${assetType}']`) as any as HTMLElement[]);\n\n  for (const entryElt of entryElts) entryElt.hidden = filtered;\n\n  let allAssetTypesFiltered = true;\n  for (const assetType of tabsAssets.assetTypes) {\n    const filtered = entriesFilterStrip.querySelector(`[data-asset-type='${assetType}']`).classList.contains(\"filtered\");\n    if (!filtered) { allAssetTypesFiltered = false; break; }\n  }\n\n  entriesFilterStrip.querySelector(`.toggle-all`).classList.toggle(\"filtered\", allAssetTypesFiltered);\n}\n\nfunction onToggleAllFilterClick() {\n  const enableAllFilters = !(entriesFilterStrip.querySelector(\".toggle-all\") as HTMLElement).classList.contains(\"filtered\");\n  const filterElts = entriesFilterStrip.querySelectorAll(\"img\") as any as HTMLImageElement[];\n\n  for (const filterElt of filterElts) {\n    filterElt.classList.toggle(\"filtered\", enableAllFilters);\n\n    const assetType = filterElt.dataset[\"assetType\"];\n    const entryElts = entriesTreeView.widget.treeRoot.querySelectorAll(`[data-asset-type='${assetType}']`) as any as HTMLElement[];\n    for (const entryElt of entryElts) entryElt.hidden = enableAllFilters;\n  }\n}\n\nexport function onToggleFilterStripClick() {\n  entriesFilterStrip.hidden = !entriesFilterStrip.hidden;\n\n  if (entriesFilterStrip.hidden) {\n    const hiddenEntryElts = entriesTreeView.widget.treeRoot.querySelectorAll(\"li.item[hidden]\") as any as HTMLLIElement[];\n    for (const hiddenEntryElt of hiddenEntryElts) hiddenEntryElt.hidden = false;\n  } else {\n    for (const assetType of tabsAssets.assetTypes) {\n      const filtered = entriesFilterStrip.querySelector(`[data-asset-type='${assetType}']`).classList.contains(\"filtered\");\n      const entryElts = (entriesTreeView.widget.treeRoot.querySelectorAll(`[data-asset-type='${assetType}']`) as any as HTMLElement[]);\n      for (const entryElt of entryElts) entryElt.hidden = filtered;\n    }\n  }\n}\n\nexport function onSearchEntryDialog() {\n  if (entries == null) return;\n\n  new SupClient.Dialogs.FindAssetDialog(entries, tabsAssets.editorsByAssetType, (entryId) => {\n    if (entryId == null) return;\n    tabsAssets.open(entryId);\n\n    entriesTreeView.widget.clearSelection();\n    const entryElt = entriesTreeView.widget.treeRoot.querySelector(`[data-id='${entryId}']`) as HTMLLIElement;\n    entriesTreeView.widget.addToSelection(entryElt);\n    entriesTreeView.widget.scrollIntoView(entryElt);\n  });\n}\n", "id": "superpowers-core:client/project/sidebar/entriesTreeView/buttonCallbacks.ts:ef7fb050-614a-4d1d-8c32-f355c856ebdb"}
{"path": "lib/components/canvas/index.test.ts", "project_name": "media-stream-library-js", "text": "import { CanvasSink } from '.'\nimport { runComponentTests } from '../../utils/validate-component'\n\ndescribe('Canvas component', () => {\n  describe('is a valid component', () => {\n    const fakeCanvas = document.createElement('canvas')\n    fakeCanvas.getContext = () => null\n    const canvasComponent = new CanvasSink(fakeCanvas)\n    runComponentTests(canvasComponent, 'Canvas component')\n  })\n})\n", "id": "media-stream-library-js:lib/components/canvas/index.test.ts:ee42a768-78ff-4d4d-b66c-37fed742458a"}
{"path": "packages/buttons/src/components/SubButton.tsx", "project_name": "draft-js-plugins", "text": "import React from 'react';\nimport createInlineStyleButton from '../utils/createInlineStyleButton';\n\nexport default createInlineStyleButton({\n  style: 'SUBSCRIPT',\n  children: (\n    <div>\n      x<sub>2</sub>\n    </div>\n  ),\n});\n", "id": "draft-js-plugins:packages/buttons/src/components/SubButton.tsx:cadfb8aa-fc6c-4531-a22c-e35c235c2336"}
{"path": "types/carbon__icons-react/lib/skip--forward--outline--solid/16.d.ts", "project_name": "DefinitelyTyped", "text": "import { SkipForwardOutlineSolid16 } from \"../../\";\n\nexport = SkipForwardOutlineSolid16;\n", "id": "DefinitelyTyped:types/carbon__icons-react/lib/skip--forward--outline--solid/16.d.ts:e2a8330a-7543-45a0-93fe-6d442184c21a"}
{"path": "node_modules/intl-list-format/locale-data/sr-Cyrl.d.ts", "project_name": "devtools-frontend", "text": "//# sourceMappingURL=sr-Cyrl.d.ts.map", "id": "devtools-frontend:node_modules/intl-list-format/locale-data/sr-Cyrl.d.ts:bac823ea-9dbc-4078-864a-0e00f4d1f300"}
{"path": "dist/previous releases/3.1/serializers/babylonjs.serializers.module.d.ts", "project_name": "SuperBabylon", "text": "/// <reference types=\"babylonjs\"/>\n\ndeclare module 'babylonjs-serializers' { \n    export = BABYLON; \n}\n\ndeclare module BABYLON {\n    class OBJExport {\n        static OBJ(mesh: Mesh[], materials?: boolean, matlibname?: string, globalposition?: boolean): string;\n        static MTL(mesh: Mesh): string;\n    }\n}\n", "id": "SuperBabylon:dist/previous releases/3.1/serializers/babylonjs.serializers.module.d.ts:cb1625bc-6bdb-4158-a278-9010ae6ff4d4"}
{"path": "example/src/components/UserListCached.tsx", "project_name": "react-request-hook", "text": "import React, {useEffect, useCallback} from 'react';\nimport {Box, InfiniteScroll, Text, Image} from 'grommet';\nimport {useResource} from '../react-request-hook';\nimport api, {User} from '../api';\nimport {Row} from '../styles';\nimport {useMappedState, useDispatch} from 'redux-react-hook';\nimport {State} from '../store';\n\nexport const UserListCached: React.FC = () => {\n  const dispatch = useDispatch();\n  const mapStateToProps = useCallback(\n    (state: State) => ({\n      usersList: state.usersListCached.data,\n      page: state.usersListCached.currentPage,\n    }),\n    [],\n  );\n\n  const [response, getUsers] = useResource(api.getUsers);\n  const {page, usersList} = useMappedState(mapStateToProps);\n\n  function onMore() {\n    if (page < 10) {\n      getUsers(page + 1);\n    }\n  }\n\n  useEffect(() => {\n    if (page === 0) {\n      getUsers(1);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (response.data) {\n      dispatch({type: 'CACHE_USERS', page: page + 1, data: response.data});\n    }\n  }, [response.data]);\n\n  return (\n    <Box flex overflow=\"auto\" pad=\"medium\">\n      <InfiniteScroll step={9} items={usersList} onMore={onMore}>\n        {(user: User, index: number) => (\n          <Row key={user.id} alpha={index + 1}>\n            <Image src={user.avatar} />\n            <Text size=\"large\">{user.name}</Text>\n          </Row>\n        )}\n      </InfiniteScroll>\n    </Box>\n  );\n};\n", "id": "react-request-hook:example/src/components/UserListCached.tsx:2c9f9009-1942-4bdf-87ce-5a7f688732ec"}
{"path": "public/app/client/ui/src/components/shared/auth/passphrase_input.tsx", "project_name": "envkey", "text": "import React, { useState, useRef, useEffect } from \"react\";\nimport { validatePassphrase } from \"@core/lib/crypto/utils\";\n\ntype Props = {\n  required?: true;\n  confirm?: true;\n  validateStrength?: true;\n  focus?: true;\n  placeholder?: string;\n  disabled?: boolean;\n  strengthInputs?: string[];\n  reset?: true;\n  onChange: (valid: boolean, val?: string) => void;\n};\n\nexport const PassphraseInput: React.FC<Props> = (props) => {\n  const [mainInputValid, setMainInputValid] = useState(false);\n  const [pending, setPending] = useState<string>(\"\");\n  const [confirmVal, setConfirmVal] = useState<string>(\"\");\n  const [invalidMsg, setInvalidMsg] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (props.reset) {\n      setPending(\"\");\n      setConfirmVal(\"\");\n      setMainInputValid(false);\n    }\n  }, [props.reset]);\n\n  const validateChange = () => {\n    let valid: boolean;\n\n    if ((!pending && !props.required) || !props.validateStrength) {\n      setMainInputValid(true);\n      setInvalidMsg(\"\");\n      valid = true;\n    } else {\n      const validRes = validatePassphrase(pending ?? \"\");\n      if (validRes !== true) {\n        setMainInputValid(false);\n        valid = false;\n        setInvalidMsg(validRes);\n      } else if (props.confirm && confirmVal !== pending) {\n        setMainInputValid(true);\n        valid = false;\n        if (confirmVal && confirmVal.length >= 10) {\n          setInvalidMsg(\"Confirmation doesn't match.\");\n        } else {\n          setInvalidMsg(\"\");\n        }\n      } else {\n        setMainInputValid(true);\n        setInvalidMsg(\"\");\n        valid = true;\n      }\n    }\n\n    props.onChange(valid, valid ? pending : undefined);\n  };\n\n  useEffect(validateChange, [pending, confirmVal, props.required]);\n\n  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPending(e.target.value);\n  };\n\n  const onConfirmChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setConfirmVal(e.target.value);\n  };\n\n  const mainInput = (\n    <input\n      value={pending}\n      onChange={onInputChange}\n      disabled={props.disabled}\n      type=\"password\"\n      placeholder={props.placeholder || \"Device passphrase (10-256 characters)\"}\n      pattern=\".{10,256}\"\n      required={props.required}\n      autoFocus={props.focus}\n    />\n  );\n\n  const renderConfirm = () => {\n    if (props.confirm) {\n      return (\n        <input\n          value={confirmVal}\n          onChange={onConfirmChange}\n          disabled={props.disabled || !mainInputValid}\n          type=\"password\"\n          placeholder=\"Confirm passphrase\"\n          pattern=\".{10,256}\"\n          required={props.required}\n        />\n      );\n    }\n  };\n\n  const renderInvalid = () => {\n    if (invalidMsg) {\n      return <p className=\"error\">{invalidMsg}</p>;\n    }\n  };\n\n  return (\n    <div>\n      {mainInput}\n      {renderConfirm()}\n      {renderInvalid()}\n    </div>\n  );\n};\n", "id": "envkey:public/app/client/ui/src/components/shared/auth/passphrase_input.tsx:e66cf998-e8ea-4bc8-a2e8-0ac755e3f48f"}
{"path": "packages/award/src/modules/MultiplePage/main/kernal/lifecycle/routerWillUpdate.ts", "project_name": "award", "text": "/**\n * 路由发生变化，根组件钩子函数处理中间件\n */\nimport { routerWillUpdate } from '../../utils/routerLifecycle';\nimport { ICtx, IKernal } from '../type';\n\nexport default function routerWillUpdateMiddleware(this: IKernal) {\n  return async (ctx: ICtx, next: any) => {\n    /**\n     * 执行路由跳转前routerWillUpdate生命周期钩子的触发\n     */\n    if (\n      !(await routerWillUpdate({\n        to: ctx.target,\n        from: ctx.lastTarget,\n        history: this.history,\n        data: this.getInitialState()\n      }))\n    ) {\n      return ctx.cb(false);\n    }\n    // 存储参数\n    this.setParam(ctx.targetLocation);\n\n    await next();\n  };\n}\n", "id": "award:packages/award/src/modules/MultiplePage/main/kernal/lifecycle/routerWillUpdate.ts:59a04b38-64f7-4cee-9f40-72eb41e5e271"}
{"path": "packages/automaton/src/Channel.ts", "project_name": "automaton", "text": "import { Automaton } from './Automaton';\nimport { ChannelItem } from './ChannelItem';\nimport { binarySearch } from './utils/binarySearch';\nimport type { ChannelUpdateEvent } from './types/ChannelUpdateEvent';\nimport type { SerializedChannel } from './types/SerializedChannel';\n\n/**\n * It represents a channel of Automaton.\n */\nexport class Channel {\n  /**\n   * The parent automaton.\n   */\n  protected __automaton: Automaton;\n\n  /**\n   * List of channel items.\n   */\n  protected __items: ChannelItem[] = [];\n\n  /**\n   * A cache of last calculated value.\n   */\n  protected __value: number = 0.0;\n\n  /**\n   * The time that was used for the calculation of [[__lastValue]].\n   */\n  protected __time: number = -Infinity;\n\n  /**\n   * The index of [[__items]] it should evaluate next.\n   */\n  protected __head: number = 0;\n\n  /**\n   * An array of listeners.\n   */\n  protected __listeners: Array<( event: ChannelUpdateEvent ) => void> = [];\n\n  /**\n   * Constructor of the [[Channel]].\n   * @param automaton Parent automaton\n   * @param data Data of the channel\n   */\n  public constructor( automaton: Automaton, data: SerializedChannel ) {\n    this.__automaton = automaton;\n\n    this.deserialize( data );\n  }\n\n  /**\n   * A cache of last calculated value.\n   */\n  public get currentValue(): number { return this.__value; }\n\n  /**\n   * The time that was used for the calculation of [[__lastValue]].\n   */\n  public get currentTime(): number { return this.__time; }\n\n  /**\n   * Load a serialized data of a channel.\n   * @param data Data of a channel\n   */\n  public deserialize( data: SerializedChannel ): void {\n    this.__items = data.items?.map( ( item ) => new ChannelItem( this.__automaton, item ) ) ?? [];\n  }\n\n  /**\n   * Reset the internal states.\n   * Call this method when you seek the time.\n   */\n  public reset(): void {\n    this.__time = -Infinity;\n    this.__value = 0;\n    this.__head = 0;\n  }\n\n  /**\n   * Add a new listener that receives a [[ChannelUpdateEvent]] when an update is happened.\n   * @param listener A subscribing listener\n   */\n  public subscribe( listener: ( event: ChannelUpdateEvent ) => void ): void {\n    this.__listeners.push( listener );\n  }\n\n  /**\n   * Return the value of specified time point.\n   * @param time Time at the point you want to grab the value.\n   * @returns Result value\n   */\n  public getValue( time: number ): number {\n    // no items??? damn\n    if ( this.__items.length === 0 ) {\n      return 0.0;\n    }\n\n    const next = binarySearch( this.__items, ( item ) => ( item.time < time ) );\n\n    // it's the first one!\n    if ( next === 0 ) {\n      return 0.0;\n    }\n\n    const item = this.__items[ next - 1 ];\n    if ( item.end < time ) {\n      return item.getValue( item.length );\n    } else {\n      return item.getValue( time - item.time );\n    }\n  }\n\n  /**\n   * This method is intended to be used by [[Automaton.update]].\n   * Consume and return items.\n   * @param time The current time of the parent [[Automaton]]\n   * @returns Array of tuples, [ timing of the event, a function that execute the event ]\n   */\n  public consume( time: number ): [ time: number, update: () => void ][] {\n    const ret: [ number, () => void ][] = [];\n\n    const prevTime = this.__time;\n\n    for ( let i = this.__head; i < this.__items.length; i ++ ) {\n      const item = this.__items[ i ];\n      const { time: begin, end, length } = item;\n      let elapsed = time - begin;\n\n      if ( elapsed < 0.0 ) {\n        break;\n      } else {\n        let progress: number;\n        let init: true | undefined;\n        let uninit: true | undefined;\n\n        if ( length <= elapsed ) {\n          elapsed = length;\n          progress = 1.0;\n          uninit = true;\n\n          if ( i === this.__head ) {\n            this.__head ++;\n          }\n        } else {\n          progress = length !== 0.0\n            ? elapsed / length\n            : 1.0;\n        }\n\n        if ( prevTime < begin ) {\n          init = true;\n        }\n\n        ret.push( [ begin + elapsed, () => {\n          this.__value = item.getValue( elapsed );\n\n          this.__listeners.forEach( ( listener ) => listener( {\n            time,\n            elapsed,\n            begin,\n            end,\n            length,\n            value: this.__value,\n            progress,\n            init,\n            uninit,\n          } ) );\n        } ] );\n      }\n    }\n\n    this.__time = time;\n\n    return ret;\n  }\n}\n", "id": "automaton:packages/automaton/src/Channel.ts:aa22c9d1-89db-4ed4-872a-a6c33b02db5e"}
{"path": "src/components/cards.tsx", "project_name": "chakra-next", "text": "import React from 'react'\nimport PseudoBox, { PseudoBoxProps } from '@chakra-ui/core/dist/PseudoBox'\nimport Flex, { FlexProps } from '@chakra-ui/core/dist/Flex'\nimport Stack, { StackProps } from '@chakra-ui/core/dist/Stack'\nimport { useColorMode } from '@chakra-ui/core/dist/ColorModeProvider'\n\n// --\n\nexport const cardBackgroundColors = {\n  light: 'white',\n  dark: 'gray.900',\n}\n\nexport const cardProps: PseudoBoxProps = {\n  p: 4,\n  borderRadius: 4,\n  shadow: 'md',\n}\n\nexport interface CardProps extends PseudoBoxProps {}\n\nexport const Card: React.FC<CardProps> = ({ ...props }) => {\n  const { colorMode } = useColorMode()\n  return (\n    <PseudoBox {...cardProps} bg={cardBackgroundColors[colorMode]} {...props} />\n  )\n}\n\n// --\n\nexport interface FlexCardProps extends FlexProps {}\n\nexport const FlexCard: React.FC<FlexCardProps> = ({ ...props }) => {\n  const { colorMode } = useColorMode()\n  return <Flex {...cardProps} bg={cardBackgroundColors[colorMode]} {...props} />\n}\n\n// --\n\nexport interface StackCardProps extends StackProps {}\n\nexport const StackCard: React.FC<StackCardProps> = ({ ...props }) => {\n  const { colorMode } = useColorMode()\n  return (\n    <Stack {...cardProps} bg={cardBackgroundColors[colorMode]} {...props} />\n  )\n}\n", "id": "chakra-next:src/components/cards.tsx:373e0af2-b57d-476c-8c31-04bd2ebaf3e1"}
{"path": "packages/expo-local-authentication/src/ExpoLocalAuthentication.web.ts", "project_name": "expo", "text": "import { AuthenticationType, SecurityLevel } from './LocalAuthentication.types';\n\nexport default {\n  get name(): string {\n    return 'ExpoLocalAuthentication';\n  },\n  async hasHardwareAsync(): Promise<boolean> {\n    return false;\n  },\n  async isEnrolledAsync(): Promise<boolean> {\n    return false;\n  },\n  async getEnrolledLevelAsync(): Promise<SecurityLevel> {\n    return SecurityLevel.NONE;\n  },\n  async supportedAuthenticationTypesAsync(): Promise<AuthenticationType[]> {\n    return [];\n  },\n};\n", "id": "expo:packages/expo-local-authentication/src/ExpoLocalAuthentication.web.ts:a5304659-92b7-4626-b82e-464840173d18"}
{"path": "sample-projects/node_modules/merkle-patricia-tree/src/readStream.ts", "project_name": "hardhat-network", "text": "import { nibblesToBuffer } from './util/nibbles'\nimport { Trie as BaseTrie } from './baseTrie'\nconst Readable = require('readable-stream').Readable\n\nexport class TrieReadStream extends Readable {\n  private trie: BaseTrie\n  private _started: boolean\n\n  constructor(trie: BaseTrie) {\n    super({ objectMode: true })\n\n    this.trie = trie\n    this._started = false\n  }\n\n  async _read() {\n    if (this._started) {\n      return\n    }\n    this._started = true\n    try {\n      await this.trie._findValueNodes(async (nodeRef, node, key, walkController) => {\n        if (node !== null) {\n          this.push({\n            key: nibblesToBuffer(key),\n            value: node.value,\n          })\n          walkController.allChildren(node, key)\n        }\n      })\n    } catch (error: any) {\n      if (error.message == 'Missing node in DB') {\n        // pass\n      } else {\n        throw error\n      }\n    }\n    this.push(null)\n  }\n}\n", "id": "hardhat-network:sample-projects/node_modules/merkle-patricia-tree/src/readStream.ts:faa55b91-d8ca-4e0a-a054-a0ed84418142"}
{"path": "src/app/core/odk/ow-clipboard.ts", "project_name": "PoE-Overlay", "text": "import { from, Observable } from 'rxjs';\nimport { mergeMap, shareReplay } from 'rxjs/operators';\n\ninterface Result {\n    success: boolean;\n    error?: string;\n}\n\ninterface GetFromClipboardResult extends Result {\n    content?: string;\n}\n\ninterface ClipboardExtension {\n    placeOnClipboard: (content: string, callback: (result: Result) => void) => void;\n    getFromClipboard: (callback: (result: GetFromClipboardResult) => void) => void;\n}\n\nexport class OWClipboard {\n    private static extension$: Observable<ClipboardExtension>;\n\n    public static placeOnClipboard(content: string): Observable<void> {\n        return this.getExtension().pipe(\n            mergeMap(extension => {\n                const promise = new Promise<void>((resolve, reject) => {\n                    extension.placeOnClipboard(content, result => {\n                        if (result.success) {\n                            resolve();\n                        } else {\n                            reject(result.error);\n                        }\n                    });\n                });\n                return from(promise);\n            })\n        );\n    }\n\n    public static getFromClipboard(): Observable<string> {\n        return this.getExtension().pipe(\n            mergeMap(extension => {\n                const promise = new Promise<string>((resolve, reject) => {\n                    extension.getFromClipboard(result => {\n                        if (result.success) {\n                            resolve(result.content);\n                        } else {\n                            reject(result.error);\n                        }\n                    });\n                });\n                return from(promise);\n            })\n        );\n    }\n\n    private static getExtension(): Observable<ClipboardExtension> {\n        if (!this.extension$) {\n            const promise = new Promise<ClipboardExtension>((resolve, reject) => {\n                overwolf.extensions.current.getExtraObject('clipboard-plugin', result => {\n                    if (result.success) {\n                        resolve(result.object);\n                    } else {\n                        reject(result.error);\n                    }\n                });\n            });\n            this.extension$ = from(promise).pipe(\n                shareReplay(1)\n            );\n        }\n        return this.extension$;\n    }\n}\n", "id": "PoE-Overlay:src/app/core/odk/ow-clipboard.ts:7ad068c9-fb0b-4c39-8e05-4dba3e349576"}
{"path": "src/docker/compose-build.ts", "project_name": "autocomplete", "text": "const getServices: Fig.Generator = {\n  script: (context) => {\n    if (context.includes(\"-f\")) {\n      const index = context.indexOf(\"-f\");\n      return `docker-compose -f ${context[index + 1]} config --services`;\n    }\n    return \"docker-compose config --services\";\n  },\n  splitOn: \"\\n\",\n};\n\nconst completionSpec: Fig.Spec = {\n  name: \"build\",\n  description: \"Build or rebuild services\",\n  args: { generators: getServices },\n  options: [\n    {\n      name: \"--build-arg\",\n      description: \"Set build-time variables for services\",\n      args: {\n        name: \"key=val\",\n      },\n    },\n    {\n      name: \"--compress\",\n      description: \"Compress the build context using gzip\",\n    },\n    {\n      name: \"--force-rm\",\n      description: \"Always remove intermediate containers\",\n    },\n    {\n      name: [\"-m\", \"--memory\"],\n      description: \"Set memory limit for the build container\",\n      args: {\n        name: \"MEM\",\n      },\n    },\n    {\n      name: \"--no-cache\",\n      description: \"Do not use cache when building the image\",\n    },\n    {\n      name: \"--no-rm\",\n      description:\n        \"Do not remove intermediate containers after a successful build\",\n    },\n    {\n      name: \"--parallel\",\n      description: \"Build images in parallel\",\n    },\n    {\n      name: \"--progress\",\n      description: \"Set type of progress output (auto, plain, tty)\",\n      args: {\n        name: \"string\",\n      },\n    },\n    {\n      name: \"--pull\",\n      description: \"Always attempt to pull a newer version of the image\",\n    },\n    {\n      name: [\"-q\", \"--quiet\"],\n      description: \"Don't print anything to STDOUT\",\n    },\n  ],\n};\n\nexport default completionSpec;\n", "id": "autocomplete:src/docker/compose-build.ts:dee3ca8b-94cb-41a5-9f2f-495268aa5612"}
{"path": "aio/content/examples/pipes/src/app/app.component.ts", "project_name": "angular", "text": "// #docregion\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styles: ['a[href] {display: block; padding: 10px 0;}', 'a:hover {text-decoration: none;}', 'h2 {margin: 0;}']\n})\nexport class AppComponent {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- since month parameter is zero-based\n}\n", "id": "angular:aio/content/examples/pipes/src/app/app.component.ts:9865422e-59a8-4646-8f3d-88aaf44f424d"}
{"path": "11-redux/04-toolkit/src/containers/molecules/ColorfulBeads.tsx", "project_name": "Riakuto-StartingReact-ja3.0", "text": "import React, { FC } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport ColorfulBeads from 'components/molecules/ColorfulBeads';\nimport { CounterState } from 'features/counter';\n\nconst EnhancedColorfulBeads: FC = () => {\n  const count = useSelector<CounterState, number>((state) => state.count);\n\n  return <ColorfulBeads count={count} />;\n};\n\nexport default EnhancedColorfulBeads;\n", "id": "Riakuto-StartingReact-ja3.0:11-redux/04-toolkit/src/containers/molecules/ColorfulBeads.tsx:fb3cfd0e-8e37-4804-93a2-919b1b12ea04"}
{"path": "services/authoring/src/routes/keys.ts", "project_name": "tweek", "text": "import * as R from 'ramda';\nimport {\n  GET,\n  Path,\n  DELETE,\n  ServiceContext,\n  Context,\n  PUT,\n  QueryParam,\n  Errors,\n} from 'typescript-rest';\nimport { OnlyInstantiableByContainer, Inject } from 'typescript-ioc';\nimport { Tags } from 'typescript-rest-swagger';\nimport searchIndex from '../search-index';\nimport { Authorize } from '../security/authorize';\nimport { PERMISSIONS } from '../security/permissions/consts';\nimport KeysRepository from '../repositories/keys-repository';\nimport { addOid } from '../utils/response-utils';\nimport logger from '../utils/logger';\n\nexport type KeyUpdateModel = {\n  implementation: any;\n  manifest: any;\n};\n\n@OnlyInstantiableByContainer\n@Tags('keys')\n@Path('/')\nexport class KeysController {\n  @Inject\n  keysRepository: KeysRepository;\n\n  @Context\n  context: ServiceContext;\n\n  @Authorize({ permission: PERMISSIONS.KEYS_LIST })\n  @GET\n  @Path('/keys')\n  async getAllKeys(): Promise<string[]> {\n    const manifests = await searchIndex.manifests;\n    return manifests.map(R.prop('key_path'));\n  }\n\n  @Authorize({ permission: PERMISSIONS.KEYS_READ })\n  @GET\n  @Path('/key')\n  async getKey(\n    @QueryParam('keyPath') keyPath: string,\n    @QueryParam('revision') revision?: string,\n  ): Promise<any> {\n    try {\n      return await this.keysRepository.getKeyDetails(keyPath, { revision });\n    } catch (err) {\n      logger.error({ err, keyPath }, 'Error retrieving key');\n      throw new Errors.NotFoundError();\n    }\n  }\n\n  @Authorize({ permission: PERMISSIONS.KEYS_WRITE })\n  @PUT\n  @Path('/key')\n  async updateKey(\n    @QueryParam('keyPath') keyPath: string,\n    @QueryParam('author.name') name: string,\n    @QueryParam('author.email') email: string,\n    newKeyModel: KeyUpdateModel,\n  ): Promise<string> {\n    const { implementation } = newKeyModel;\n    let { manifest } = newKeyModel;\n    manifest = Object.assign({ key_path: keyPath }, manifest);\n    const oid = await this.keysRepository.updateKey(keyPath, manifest, implementation, {\n      name,\n      email,\n    });\n    addOid(this.context.response, oid);\n\n    return 'OK';\n  }\n\n  @Authorize({ permission: PERMISSIONS.KEYS_WRITE })\n  @DELETE\n  @Path('/key')\n  async deleteKey(\n    @QueryParam('keyPath') keyPath: string,\n    @QueryParam('author.name') name: string,\n    @QueryParam('author.email') email: string,\n    additionalKeys?: string[],\n  ): Promise<string> {\n    let keysToDelete = [keyPath];\n    if (additionalKeys && Array.isArray(additionalKeys)) {\n      keysToDelete = keysToDelete.concat(additionalKeys);\n    }\n    const oid = await this.keysRepository.deleteKeys(keysToDelete, { name, email });\n    addOid(this.context.response, oid);\n\n    return 'OK';\n  }\n\n  @Authorize({ permission: PERMISSIONS.HISTORY })\n  @GET\n  @Path('/revision-history')\n  async getKeyRevisionHistory(\n    @QueryParam('keyPath') keyPath: string,\n    @QueryParam('since') since: string,\n  ): Promise<any[]> {\n    return await this.keysRepository.getKeyRevisionHistory(keyPath, { since });\n  }\n\n  @Authorize({ permission: PERMISSIONS.KEYS_LIST })\n  @GET\n  @Path('/manifests')\n  async getAllManifests(): Promise<any[]> {\n    return await searchIndex.manifests;\n  }\n\n  @Authorize({ permission: PERMISSIONS.KEYS_READ })\n  @GET\n  @Path('/manifest')\n  async getManifest(\n    @QueryParam('keyPath') keyPath: string,\n    @QueryParam('revision') revision?: string,\n  ): Promise<any> {\n    try {\n      return await this.keysRepository.getKeyManifest(keyPath, { revision });\n    } catch (exp) {\n      throw new Errors.NotFoundError();\n    }\n  }\n\n  @Authorize({ permission: PERMISSIONS.KEYS_READ })\n  @GET\n  @Path('/dependent')\n  async getDependents(@QueryParam('keyPath') keyPath: string): Promise<any> {\n    return await searchIndex.dependents(keyPath);\n  }\n}\n", "id": "tweek:services/authoring/src/routes/keys.ts:4c83f5c8-bf93-4155-ba76-3f43e71b4c5e"}
{"path": "Viewer/src/configuration/interfaces/templateConfiguration.ts", "project_name": "Babylon.js", "text": "/**\r\n * A single template configuration object\r\n */\r\nexport interface ITemplateConfiguration {\r\n    /**\r\n     * can be either the id of the template's html element or a URL.\r\n     * See - https://doc.babylonjs.com/extensions/the_templating_system#location-vs-html\r\n     */\r\n    location?: string; // #template-id OR http://example.com/loading.html\r\n    /**\r\n     * If no location is provided you can provide here the raw html of this template.\r\n     * See https://doc.babylonjs.com/extensions/the_templating_system#location-vs-html\r\n     */\r\n    html?: string; // raw html string\r\n    id?: string;\r\n    /**\r\n     * Parameters that will be delivered to the template and will render it accordingly.\r\n     */\r\n    params?: { [key: string]: string | number | boolean | object };\r\n    /**\r\n     * Events to attach to this template.\r\n     * event name is the key. the value can either be a boolean (attach to the parent element)\r\n     * or a map of html id elements.\r\n     *\r\n     * See - https://doc.babylonjs.com/extensions/the_templating_system#event-binding\r\n     */\r\n    events?: {\r\n        // pointer events\r\n        pointerdown?: boolean | { [id: string]: boolean; };\r\n        pointerup?: boolean | { [id: string]: boolean; };\r\n        pointermove?: boolean | { [id: string]: boolean; };\r\n        pointerover?: boolean | { [id: string]: boolean; };\r\n        pointerout?: boolean | { [id: string]: boolean; };\r\n        pointerenter?: boolean | { [id: string]: boolean; };\r\n        pointerleave?: boolean | { [id: string]: boolean; };\r\n        pointercancel?: boolean | { [id: string]: boolean; };\r\n        //click, just in case\r\n        click?: boolean | { [id: string]: boolean; };\r\n        // drag and drop\r\n        dragstart?: boolean | { [id: string]: boolean; };\r\n        drop?: boolean | { [id: string]: boolean; };\r\n\r\n        [key: string]: boolean | { [id: string]: boolean; } | undefined;\r\n    };\r\n}", "id": "Babylon.js:Viewer/src/configuration/interfaces/templateConfiguration.ts:388f38f5-79ee-4b30-b1c6-44ee192ad2b6"}
{"path": "src/components/Box.ts", "project_name": "Malysh", "text": "/**\n* \n* @module Kiwi\n* @submodule Components \n* \n*/\n\nmodule Kiwi.Components {\n\n\t/**\n\t* The Box Component is used to handle the various 'bounds' that each GameObject has. \n\t* There are two main different types of bounds (Bounds and Hitbox) with each one having three variants (each one is a rectangle) depending on what you are wanting:\n\t*\n\t* RawBounds: The bounding box of the GameObject before rotation/scale.\n\t* \n\t* RawHitbox: The hitbox of the GameObject before rotation/scale. This can be modified to be different than the normal bounds but if not specified it will be the same as the raw bounds.\n\t*\n\t* Bounds: The bounding box of the GameObject after rotation/scale.\n\t*\n\t* Hitbox: The hitbox of the GameObject after rotation/scale. If you modified the raw hitbox then this one will be modified as well, otherwise it will be the same as the normal bounds.\n\t*\n\t* WorldBounds: The bounding box of the Entity using its world coordinates and after rotation/scale.\n\t*\n\t* WorldHitbox: The hitbox of the Entity using its world coordinates and after rotation/scale.\n\t*\n\t* @class Box\n\t* @extends Kiwi.Component\n\t* @namespace Kiwi.Components\n\t* @constructor\n\t* @param parent {Kiwi.Entity} The entity that this box belongs to.\n\t* @param [x=0] {Number} Its position on the x axis\n\t* @param [y=0] {Number} Its position on the y axis\n\t* @param [width=0] {Number} The width of the box.\n\t* @param [height=0] {Number} The height of the box.\n\t* @return {Kiwi.Components.Box}\n\t*/\n\texport class Box extends Component {\n\n\t\tconstructor(parent: Entity, x: number = 0, y: number = 0, width: number = 0, height: number = 0) {\n\t\t\t\n\t\t\tsuper(parent, 'Box');\n\t\t\t\n\t\t\tthis.entity = parent;\n\n\t\t\tthis._rawBounds = new Kiwi.Geom.Rectangle(x,y,width,height);\n\t\t\tthis._rawCenter = new Kiwi.Geom.Point(x + width / 2, y + height / 2);\n\t\t\tthis._rawHitbox = new Kiwi.Geom.Rectangle();\n\n\t\t\tthis._hitboxOffset = new Kiwi.Geom.Point();\n\n\t\t\tthis.hitbox = new Kiwi.Geom.Rectangle(0, 0, width, height); \n\t\t\tthis.autoUpdate = true;\n\n\t\t\tthis._scratchMatrix = new Kiwi.Geom.Matrix();\n\t\t}\n\n\n\t\t/**\n\t\t* The entity that this box belongs to.\n\t\t* @property entity\n\t\t* @type Kiwi.Entity\n\t\t* @public\n\t\t*/\n\t\tpublic entity: Kiwi.Entity;\n\n\n\t\t/**\n\t\t* The type of object that this is.\n\t\t* @method objType\n\t\t* @return {string} \"Box\"\n\t\t* @public\n\t\t*/\n\t\tpublic objType() {\n\t\t\treturn \"Box\";\n\t\t}\n\n\n\t\t/**\n\t\t* Controls whether the hitbox should update automatically to match the hitbox of the current cell on the entity this Box component is attached to (default behaviour).\n\t\t* Or if the hitbox shouldn't auto update. Which will mean it will stay the same as the last value it had. \n\t\t* This property is automatically set to 'false' when you override the hitboxes width/height, but you can set this to true afterwards. \n\t\t* \n\t\t* @property autoUpdate\n\t\t* @type boolean\n\t\t* @default true\n\t\t* @private\n\t\t*/\n\t\tpublic autoUpdate: boolean = true;\n\n\n\t\t/**\n\t\t* Indicates whether or not this component needs re-rendering/updating or not.\n\t\t* @property dirty\n\t\t* @type boolean\n\t\t* @public\n\t\t* @deprecated in version 1.1.0 because the box always needed updating\n\t\t*/\n\t\tpublic dirty: boolean;\n\n\n\n\t\t/**\n\t\t* Contains offset point for the hitbox \n\t\t* @property _hitboxOffset\n\t\t* @type Kiwi.Geom.Point\n\t\t* @private\n\t\t*/\n\t\tprivate _hitboxOffset: Kiwi.Geom.Point;\n\n\n\n\t\t/**\n\t\t* Returns the offset value of the hitbox as a point for the X/Y axis for the developer to use.\n\t\t* This is without rotation or scaling.\n\t\t* This is a READ ONLY property.\n\t\t* @property hitboxOffset\n\t\t* @type Kiwi.Geom.Point\n\t\t* @public\n\t\t*/\n\t\tpublic get hitboxOffset(): Kiwi.Geom.Point {\n\n\t\t\tif ( this.autoUpdate == true && this.entity.atlas !== null && this.entity.atlas.cells && this.entity.atlas.cells[ 0 ].hitboxes ) {\n\t\t\t\tthis._hitboxOffset.x =\n\t\t\t\t\tthis.entity.atlas.cells[this.entity.cellIndex].hitboxes[0].x || 0;\n\t\t\t\tthis._hitboxOffset.y =\n\t\t\t\t\tthis.entity.atlas.cells[this.entity.cellIndex].hitboxes[0].y || 0;\n\n\t\t\t}\n\n\t\t\treturn this._hitboxOffset;\n\t\t}\n\n\n\n\t\t/**\n\t\t* Contains the offset rectangle for the raw hitbox. \n\t\t* @property _rawHitbox\n\t\t* @type Kiwi.Geom.Rectangle\n\t\t* @private\n\t\t*/\n\t\tprivate _rawHitbox: Kiwi.Geom.Rectangle;\n\n\n\t\t/**\n\t\t* Returns the raw hitbox rectangle for the developer to use. \n\t\t* 'Raw' means where it would be without rotation or scaling.\n\t\t* This is READ ONLY.\n\t\t* @property rawHitbox\n\t\t* @type Kiwi.Geom.Rectangle\n\t\t* @public\n\t\t*/\n\t\tpublic get rawHitbox(): Kiwi.Geom.Rectangle {\n\n\t\t\tthis._rawHitbox.x = this.rawBounds.x + this.hitboxOffset.x;\n\t\t\tthis._rawHitbox.y = this.rawBounds.y + this.hitboxOffset.y;\n\n\t\t\t//If the hitbox has not already been set, then update the width/height based upon the current cell that the entity has.\n\t\t\tif (this.autoUpdate == true) {\n\t\t\t\tvar atlas = this.entity.atlas;\n\n\t\t\t\tif ( atlas !== null && atlas.cells && atlas.cells[ 0 ].hitboxes ) {\n\t\t\t\t\tthis._rawHitbox.width = atlas.cells[ this.entity.cellIndex ].hitboxes[ 0 ].w;\n\t\t\t\t\tthis._rawHitbox.height = atlas.cells[ this.entity.cellIndex ].hitboxes[ 0 ].h;\n\t\t\t\t} else {\n\t\t\t\t\tthis._rawHitbox.width = this.entity.width;\n\t\t\t\t\tthis._rawHitbox.height = this.entity.height;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this._rawHitbox;\n\t\t}\n\n\n\n\t\t/**\n\t\t* The transformed or 'normal' hitbox for the entity. This is its box after rotation/scale.\n\t\t* @property _transformedHitbox\n\t\t* @type Kiwi.Geom.Rectangle\n\t\t* @private\n\t\t*/\n\t\tprivate _transformedHitbox: Kiwi.Geom.Rectangle;\n\n\n\t\t/** \n\t\t* The transformed 'world' hitbox for the entity. This is its box after rotation/scale.\n\t\t* @property _worldHitbox\n\t\t* @type Kiwi.Geom.Rectangle\n\t\t* @private\n\t\t*/\n\t\tprivate _worldHitbox: Kiwi.Geom.Rectangle;\n\n\n\t\t/**\n\t\t* The 'normal' or transformed hitbox for the entity. This is its box after rotation/Kiwi.Geom.Rectangle. \n\t\t* @property hitbox\n\t\t* @type Kiwi.Geom.Rectangle\n\t\t* @public\n\t\t*/\n\t\tpublic get hitbox(): Kiwi.Geom.Rectangle {\n\t\t\tthis._transformedHitbox = this._rotateHitbox(this.rawHitbox.clone());\n\n\t\t\treturn this._transformedHitbox;\n\t\t}\n\t\tpublic set hitbox(value: Kiwi.Geom.Rectangle) {\n\n\t\t\t//Use custom hitbox defined by user.\n\n\t\t\tthis._hitboxOffset.x = value.x;\n\t\t\tthis._hitboxOffset.y = value.y;\n\n\t\t\tthis._rawHitbox = value;\n\n\t\t\tthis._rawHitbox.x += this._rawBounds.x;\n\t\t\tthis._rawHitbox.y += this._rawBounds.y;\n\n\t\t\tthis.autoUpdate = false;\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Returns the transformed hitbox for the entity using its 'world' coordinates.\n\t\t* This is READ ONLY.\n\t\t* @property worldHitbox\n\t\t* @type Kiwi.Geom.Rectangle\n\t\t* @public\n\t\t*/\n\t\tpublic get worldHitbox(): Kiwi.Geom.Rectangle {\n\t\t\tthis._worldHitbox = this._rotateHitbox(this.rawHitbox.clone(), true);\n\n\t\t\treturn this._worldHitbox;\n\t\t}\n\n\n\n\t\t/**\n\t\t* The 'raw' bounds of entity. This is its bounds before rotation/scale.\n\t\t* This for property is only for storage of the values and should be accessed via the getter 'rawBounds' so that it can update.\n\t\t* \n\t\t* @property _rawBounds\n\t\t* @type Kiwi.Geom.Rectangle\n\t\t* @private\n\t\t*/\n\t\tprivate _rawBounds: Kiwi.Geom.Rectangle;\n\n\n\n\t\t/**\n\t\t* Returns the 'raw' bounds for this entity.\n\t\t* This is READ ONLY.\n\t\t* @property rawBounds\n\t\t* @type Kiwi.Geom.Rectangle\n\t\t* @public\n\t\t*/\n\t\tpublic get rawBounds(): Kiwi.Geom.Rectangle {\n\t\t\tthis._rawBounds.x = this.entity.x;\n\t\t\tthis._rawBounds.y = this.entity.y;\n\t\t\tthis._rawBounds.width = this.entity.width;\n\t\t\tthis._rawBounds.height = this.entity.height;\n\n\t\t\treturn this._rawBounds;\n\t\t}\n\n\n\n\t\t/**\n\t\t* Contains the 'raw' center point for the bounds.\n\t\t* @property Kiwi.Geom.Point\n\t\t* @type Kiwi.Geom.Point\n\t\t* @private\n\t\t*/\n\t\tprivate _rawCenter: Kiwi.Geom.Point;\n\n\n\t\t/**\n\t\t* Returns the raw center point of the box.\n\t\t* This is READ ONLY.\n\t\t* @property rawCenter\n\t\t* @type Kiwi.Geom.Point\n\t\t* @public\n\t\t*/\n\t\tpublic get rawCenter(): Kiwi.Geom.Point {\n\t\t\tthis._rawCenter.x = this.rawBounds.x + this.rawBounds.width / 2;\n\t\t\tthis._rawCenter.y = this.rawBounds.y + this.rawBounds.height / 2;\n\n\t\t\treturn this._rawCenter;\n\t\t}\n\n\t\t/**\n\t\t* Scratch matrix used in geometry calculations\n\t\t*\n\t\t* @property _scratchMatrix\n\t\t* @type Kiwi.Geom.Matrix\n\t\t* @private\n\t\t* @since 1.3.1\n\t\t*/\n\t\tprivate _scratchMatrix: Kiwi.Geom.Matrix;\n\n\n\t\t/**\n\t\t* Contains the center point after the box has been transformed.\n\t\t* @property _transformedCenter\n\t\t* @type Kiwi.Geom.Point\n\t\t* @private\n\t\t*/\n\t\tprivate _transformedCenter: Kiwi.Geom.Point;\n\n\n\t\t/**\n\t\t* Returns the center point for the box after it has been transformed.\n\t\t* World coordinates.\n\t\t* This is READ ONLY.\n\t\t* @property center\n\t\t* @type Kiwi.Geom.Point\n\t\t* @public\n\t\t*/\n\t\tpublic get center(): Kiwi.Geom.Point {\n\t\t\tvar m: Kiwi.Geom.Matrix = this.entity.transform.getConcatenatedMatrix();\n\n\t\t\tthis._transformedCenter = m.transformPoint(\n\t\t\t\tnew Kiwi.Geom.Point(\n\t\t\t\t\tthis.entity.width / 2 - this.entity.anchorPointX,\n\t\t\t\t\tthis.entity.height / 2 - this.entity.anchorPointY ) );\n\n\t\t\treturn this._transformedCenter;\n\t\t}\n\n\n\n\t\t/**\n\t\t* Contains the transformed or 'normal' bounds for this entity.\n\t\t* @property _transformedBounds\n\t\t* @type Kiwi.Geom.Rectangle\n\t\t* @private\n\t\t*/\n\t\tprivate _transformedBounds: Kiwi.Geom.Rectangle;\n\n\n\t\t/**\n\t\t* The 'world' transformed bounds for this entity. \n\t\t* @property _worldBounds\n\t\t* @type Kiwi.Geom.Rectangle\n\t\t* @private\n\t\t*/\n\t\tprivate _worldBounds: Kiwi.Geom.Rectangle;\n\n\n\t\t/**\n\t\t* Returns the 'transformed' or 'normal' bounds for this box. \n\t\t* This is READ ONLY.\n\t\t* @property bounds\n\t\t* @type Kiwi.Geom.Rectangle\n\t\t* @public\n\t\t*/\n\t\tpublic get bounds(): Kiwi.Geom.Rectangle {\n\t\t\tthis._transformedBounds = this._rotateRect(this.rawBounds.clone()); \n\n\t\t\treturn this._transformedBounds;\n\t\t}\n\n\t\t/**\n\t\t* Returns the 'transformed' bounds for this entity using the world coodinates.\n\t\t* This is READ ONLY.\n\t\t* @property worldBounds\n\t\t* @type Kiwi.Geom.Rectangle\n\t\t* @public\n\t\t*/\n\t\tpublic get worldBounds(): Kiwi.Geom.Rectangle {\n\t\t\tthis._worldBounds = this._rotateRect(this.rawBounds.clone(), true);\n\n\t\t\treturn this._worldBounds;\n\t\t}\n\n\t\t/**\n\t\t* Private internal method only. Used to calculate the transformed bounds after rotation/scale.\n\t\t* @method _rotateRect\n\t\t* @param rect {Kiwi.Geom.Rectangle}\n\t\t* @param [useWorldCoords=false] {Boolean}\n\t\t* @return {Kiwi.Geom.Rectangle}\n\t\t* @private\n\t\t*/\n\t\tprivate _rotateRect(rect: Kiwi.Geom.Rectangle, useWorldCoords: boolean=false): Kiwi.Geom.Rectangle {\n\t\t\tvar out: Kiwi.Geom.Rectangle = new Kiwi.Geom.Rectangle();\n\t\t\tvar t: Kiwi.Geom.Transform = this.entity.transform;\n\t\t\tvar m: Kiwi.Geom.Matrix = this._scratchMatrix.copyFrom(\n\t\t\t\tt.getConcatenatedMatrix() );\n\n\t\t\t// Use world coordinates?\n\t\t\tif( !useWorldCoords )\n\t\t\t{\n\t\t\t\tm.setTo(m.a, m.b, m.c, m.d, t.x + t.rotPointX, t.y + t.rotPointY);\n\t\t\t}\n\n\t\t\tout = this.extents(\n\t\t\t\tm.transformPoint({ x: - t.rotPointX, y: - t.rotPointY }),\n\t\t\t\tm.transformPoint({ x: - t.rotPointX + rect.width, y: - t.rotPointY }),\n\t\t\t\tm.transformPoint({ x: - t.rotPointX + rect.width, y: - t.rotPointY + rect.height }),\n\t\t\t\tm.transformPoint({ x: - t.rotPointX, y: - t.rotPointY + rect.height })\n\t\t\t\t);\n\t\t\treturn out;\n\t\t}\n\n\n\n\t\t/**\n\t\t* A private method that is used to calculate the transformed hitbox's coordinates after rotation. \n\t\t* @method _rotateHitbox\n\t\t* @param rect {Kiwi.Geom.Rectangle} \n\t\t* @param [useWorldCoords=false] {Boolean}\n\t\t* @return {Kiwi.Geom.Rectangle}\n\t\t* @private\n\t\t*/\n\t\tprivate _rotateHitbox(rect: Kiwi.Geom.Rectangle, useWorldCoords: boolean=false): Kiwi.Geom.Rectangle {\n\t\t\tvar out: Kiwi.Geom.Rectangle = new Kiwi.Geom.Rectangle();\n\t\t\tvar t: Kiwi.Geom.Transform = this.entity.transform;\n\t\t\tvar m: Kiwi.Geom.Matrix = this._scratchMatrix.copyFrom(\n\t\t\t\tt.getConcatenatedMatrix() );\n\n\t\t\t//Use world coordinates?\n\t\t\tif( !useWorldCoords )\n\t\t\t{\n\t\t\t\tm.setTo(m.a, m.b, m.c, m.d, t.x + t.rotPointX, t.y + t.rotPointY);\n\t\t\t}\n\n\t\t\tout = this.extents(\n\t\t\t\tm.transformPoint({ x: - t.rotPointX + this._hitboxOffset.x,              y: - t.rotPointY + this._hitboxOffset.y }),\n\t\t\t\tm.transformPoint({ x: - t.rotPointX + rect.width + this._hitboxOffset.x, y: - t.rotPointY +  this._hitboxOffset.y }),\n\t\t\t\tm.transformPoint({ x: - t.rotPointX + rect.width + this._hitboxOffset.x, y: - t.rotPointY + rect.height + this._hitboxOffset.y}),\n\t\t\t\tm.transformPoint({ x: - t.rotPointX + this._hitboxOffset.x,              y: - t.rotPointY + rect.height + this._hitboxOffset.y })\n\t\t\t\t);\n\n\t\t\treturn out;\n\t\t}\n\n\n\n\t\t/**\n\t\t* Draws the various bounds on a context that is passed. Useful for debugging and using in combination with the debug canvas.\n\t\t* @method draw\n\t\t* @param ctx {CanvasRenderingContext2D} Context of the canvas that this box component is to be rendered on top of.\n\t\t* @param [camera] {Kiwi.Camera} A camera that should be taken into account before rendered. This is the default camera by default.\n\t\t* @public\n\t\t*/\n\t\tpublic draw(ctx: CanvasRenderingContext2D, camera: Kiwi.Camera = this.game.cameras.defaultCamera) {\n\t\t\tvar t: Kiwi.Geom.Transform = this.entity.transform;\n\t\t\tvar ct: Kiwi.Geom.Transform = camera.transform;\n\n\t\t\t// Draw raw bounds and raw center\n\t\t\tctx.strokeStyle = \"red\";\n\t\t\tctx.fillRect(this.rawCenter.x + ct.x - 1, this.rawCenter.y + ct.y - 1, 3, 3);\n\t\t\tctx.strokeRect(t.x + ct.x + t.rotPointX - 3, t.y + ct.y + t.rotPointY - 3, 7, 7);\n\n\t\t\t// Draw bounds\n\t\t\tctx.strokeStyle = \"blue\";\n\t\t\tctx.strokeRect(this.bounds.x + ct.x, this.bounds.y + ct.y, this.bounds.width, this.bounds.height);\n\n\t\t\t// Draw hitbox\n\t\t\tctx.strokeStyle = \"green\";\n\t\t\tctx.strokeRect(this.hitbox.x + ct.x, this.hitbox.y + ct.y, this.hitbox.width, this.hitbox.height);\n\n\t\t\t// Draw raw hitbox\n\t\t\tctx.strokeStyle = \"white\";\n\t\t\tctx.strokeRect(this.rawHitbox.x + ct.x, this.rawHitbox.y + ct.y, this.rawHitbox.width, this.rawHitbox.height);\n\n\t\t\t// Draw world bounds\n\t\t\tctx.strokeStyle = \"purple\";\n\t\t\tctx.strokeRect(this.worldBounds.x, this.worldBounds.y, this.worldBounds.width, this.worldBounds.height);\n\n\t\t\t// Draw world hitbox\n\t\t\tctx.strokeStyle = \"cyan\";\n\t\t\tctx.strokeRect(this.worldHitbox.x, this.worldHitbox.y, this.worldHitbox.width, this.worldHitbox.height);\n\t\t}\n\n\n\n\t\t/** \n\t\t* Method which takes four Points and then converts it into a Rectangle, which represents the area those points covered.\n\t\t* The points passed can be maybe in any order, as the are checked for validity first. \n\t\t*\n\t\t* @method extents\n\t\t* @param topLeftPoint {Kiwi.Geom.Point} The top left Point that the Rectangle should have.\n\t\t* @param topRightPoint {Kiwi.Geom.Point} The top right Point that the Rectangle should have.\n\t\t* @param bottomRightPoint {Kiwi.Geom.Point} The bottom right Point that the Rectangle should have.\n\t\t* @param bottomLeftPoint {Kiwi.Geom.Point} The bottom left Point that the Rectangle should have.\n\t\t* @return {Kiwi.Geom.Rectangle} The new Rectangle that represents the area the points covered.\n\t\t* @return Rectangle\n\t\t*/\n\t\tpublic extents(topLeftPoint:Kiwi.Geom.Point, topRightPoint:Kiwi.Geom.Point, bottomRightPoint:Kiwi.Geom.Point, bottomLeftPoint:Kiwi.Geom.Point):Kiwi.Geom.Rectangle {\n\t\t\tvar left: number = Math.min(topLeftPoint.x, topRightPoint.x, bottomRightPoint.x, bottomLeftPoint.x);\n\t\t\tvar right: number = Math.max(topLeftPoint.x, topRightPoint.x, bottomRightPoint.x, bottomLeftPoint.x);\n\t\t\tvar top: number = Math.min(topLeftPoint.y, topRightPoint.y, bottomRightPoint.y, bottomLeftPoint.y);\n\t\t\tvar bottom: number = Math.max(topLeftPoint.y, topRightPoint.y, bottomRightPoint.y, bottomLeftPoint.y);\n\n\t\t\treturn new Kiwi.Geom.Rectangle(left, top, right - left, bottom - top);\n\n\t\t}\n\n\n\n\t\t/**\n\t\t* Destroys this component and all of the links it may have to other objects.\n\t\t* @method destroy\n\t\t* @public\n\t\t*/\n\t\tpublic destroy() {\n\t\t\tsuper.destroy();\n\t\t\tdelete this.entity;\n\t\t}\n\n\t}\n\n}\n", "id": "Malysh:src/components/Box.ts:ecb63573-03b6-4c42-aa35-7582da289838"}
{"path": "extension/utils/api.ts", "project_name": "Steward", "text": "import $ from 'jquery';\n\nfunction handleParams(api, data, method) {\n  return Promise.resolve({\n    url: api,\n    method,\n    data,\n  });\n}\n\nexport function url(root = '', path = '/') {\n  return root + path;\n}\n\nexport function fetch(api, data = {}, rawMethod = 'GET') {\n  return handleParams(api, data, rawMethod).then(options => {\n    return new Promise((resolve, reject) => {\n      $.ajax({\n        url: options.url,\n        method: options.method,\n        data: options.data,\n      })\n        .done(resp => {\n          if (typeof resp.code === 'undefined') {\n            resolve(resp);\n          } else if (resp.code === 200) {\n            resolve(resp.data);\n          } else {\n            reject(resp);\n          }\n        })\n        .fail(resp => reject(resp));\n    });\n  });\n}\n", "id": "Steward:extension/utils/api.ts:d2184685-6278-49fb-8066-35e9fc2693cd"}
{"path": "types/carbon__icons-react/lib/api/16.d.ts", "project_name": "DefinitelyTyped", "text": "import { Api16 } from \"../../\";\n\nexport = Api16;\n", "id": "DefinitelyTyped:types/carbon__icons-react/lib/api/16.d.ts:ec959b2f-1f51-42c4-9e6e-63073f6386c8"}
{"path": "packages/core/src/utils/utils.spec.ts", "project_name": "design-system", "text": "import {\n  applySizes,\n  applyVariations,\n  borders,\n  color,\n  createTheme,\n  decomposeColor,\n  deprecatedColorValue,\n  deprecatedPropType,\n  getBreakpointSize,\n  getByPalette,\n  getContrastRatio,\n  getLuminance,\n  getPaletteColor,\n  getTextColorOn,\n  hasPaletteColor,\n  hexToRgb,\n} from '.'\n\ndescribe('utils', () => {\n  describe('deprecatedPropType', () => {\n    test('returns an error when using a deprecated prop', () => {\n      const err = deprecatedPropType('newProp')(\n        {\n          oldProp: true,\n        },\n        'oldProp'\n      )\n      expect(err).toBeTruthy()\n    })\n\n    test('returns undefined when using a valid prop', () => {\n      const err = deprecatedPropType('newProp')(\n        {\n          newProp: true,\n        },\n        'oldProp'\n      )\n      expect(err).toBeUndefined()\n    })\n  })\n\n  describe('deprecatedColorValue', () => {\n    test('returns an error when when using a deprecated color prop value', () => {\n      expect(\n        deprecatedColorValue()(\n          {\n            color: 'blue',\n            theme: createTheme(),\n          },\n          'color',\n          'Component'\n        )\n      ).toBeTruthy()\n    })\n\n    test('returns undefined when using a valid palette color', () => {\n      expect(\n        deprecatedColorValue()(\n          {\n            color: 'primary',\n            theme: createTheme(),\n          },\n          'color',\n          'Component'\n        )\n      ).toBeUndefined()\n      expect(\n        deprecatedColorValue()(\n          {\n            color: 'primary.base',\n            theme: createTheme(),\n          },\n          'color',\n          'Component'\n        )\n      ).toBeUndefined()\n    })\n  })\n\n  describe('hexToRgb', () => {\n    test('converts hex to rgb', () => {\n      expect(hexToRgb('#0068EF')).toBe('rgb(0, 104, 239)')\n      expect(hexToRgb('#000')).toBe('rgb(0, 0, 0)')\n    })\n\n    test('returns empty if invalid hex', () => {\n      expect(hexToRgb('#00')).toBe('')\n    })\n  })\n\n  describe('decomposeColor', () => {\n    test('decomposes a hex or rgb', () => {\n      expect(decomposeColor('#0068EF')).toEqual([0, 104, 239])\n      expect(decomposeColor('#000')).toEqual([0, 0, 0])\n      expect(decomposeColor('rgb(0, 104, 239)')).toEqual([0, 104, 239])\n    })\n  })\n\n  describe('getLuminance', () => {\n    test('returns the luminance of a color', () => {\n      expect(getLuminance('#0068EF')).toBeCloseTo(0.16132624188259573)\n      expect(getLuminance('#000')).toBeCloseTo(0)\n      expect(getLuminance('#fff')).toBeCloseTo(1)\n    })\n  })\n\n  describe('getContrastRatio', () => {\n    test('returns the contrast ratio between two colors', () => {\n      expect(getContrastRatio('#0068EF', '#000000')).toBeCloseTo(4.2265248376519144)\n      expect(getContrastRatio('#0068EF', '#ffffff')).toBeCloseTo(4.968620984531288)\n    })\n  })\n\n  describe('applyVariations', () => {\n    test('applies component style overrides', () => {\n      const props = {\n        theme: createTheme({\n          componentStyles: { Button: { primary: 'color: red;' } },\n        }),\n        color: 'primary',\n      }\n      const override = applyVariations('Button')(props)\n\n      expect(override[0](props)).toEqual(props.theme.componentStyles.Button.primary)\n    })\n\n    test('applies component style overrides with color and shade', () => {\n      const props = {\n        theme: createTheme({\n          componentStyles: { Button: { primary: { dark: 'color: red;' } } },\n        }),\n        color: 'primary.dark',\n      }\n      const override = applyVariations('Button')(props)\n\n      expect(override[0](props)).toEqual(props.theme.componentStyles.Button.primary.dark)\n    })\n\n    test('applies variations with component style overrides', () => {\n      const props = {\n        theme: createTheme({\n          componentStyles: { Button: { outline: { primary: 'color: red;' } } },\n        }),\n        color: 'primary',\n        variation: 'outline',\n      }\n      const variations = { outline: 'color: blue;' }\n      const override = applyVariations('Button', variations)(props)\n      expect(override[0]).toEqual(variations.outline)\n      expect(override[2](props)).toEqual(props.theme.componentStyles.Button.outline.primary)\n    })\n\n    test('application variations with component style overrides with color and shade', () => {\n      const props = {\n        theme: createTheme({\n          componentStyles: {\n            Button: { outline: { primary: { dark: 'color: red;' } } },\n          },\n        }),\n        color: 'primary.dark',\n        variation: 'outline',\n      }\n      const variations = { outline: 'color: blue;' }\n      const override = applyVariations('Button', variations)(props)\n      expect(override[0]).toEqual(variations.outline)\n      expect(override[2](props)).toEqual(props.theme.componentStyles.Button.outline.primary.dark)\n    })\n  })\n\n  describe('getPaletteColor', () => {\n    const props = {\n      theme: createTheme(),\n    }\n\n    test('returns a palette shade', () => {\n      expect(getPaletteColor('primary.base')(props)).toEqual(props.theme.palette.primary.base)\n      expect(getPaletteColor('primary', 'base')(props)).toEqual(props.theme.palette.primary.base)\n      expect(getPaletteColor('primary.dark', 'base')(props)).toEqual(props.theme.palette.primary.dark)\n\n      // legacy support\n      expect(getPaletteColor('orange', 'base')(props)).toEqual(props.theme.colors.orange)\n      expect(getPaletteColor('#ffffff', 'base')(props)).toBe('#ffffff')\n    })\n\n    test('returns a palette shade when provided a color prop', () => {\n      expect(getPaletteColor('base')({ ...props, color: 'primary' })).toEqual(\n        props.theme.palette.primary.base\n      )\n      expect(getPaletteColor('base')({ ...props, color: 'primary.dark' })).toEqual(\n        props.theme.palette.primary.dark\n      )\n\n      // legacy support\n      expect(getPaletteColor('base')({ ...props, color: 'orange' })).toEqual(props.theme.colors.orange)\n      expect(getPaletteColor('base')({ ...props, color: '#ffffff' })).toBe('#ffffff')\n    })\n  })\n\n  describe('hasPaletteColor', () => {\n    test('returns true if palette color', () => {\n      expect(hasPaletteColor({ theme: createTheme(), color: 'primary' })).toBeTruthy()\n      expect(hasPaletteColor({ theme: createTheme(), color: 'primary.dark' })).toBeTruthy()\n    })\n\n    test('returns false if not a palette color', () => {\n      expect(hasPaletteColor({ theme: createTheme(), color: 'orange' })).toBeFalsy()\n    })\n  })\n\n  describe('getTextColorOn', () => {\n    const props = { theme: createTheme() }\n\n    test('returns correct text color', () => {\n      expect(getTextColorOn('test')({ theme: {} })).toBe('')\n      expect(getTextColorOn('abcde')(props)).toEqual(props.theme.palette.text.base)\n      expect(getTextColorOn('primary.light')(props)).toEqual(props.theme.palette.text.base)\n      expect(getTextColorOn('primary.base')(props)).toEqual(props.theme.palette.text.lightest)\n    })\n\n    test('returns correct text color with custom contrast ratio', () => {\n      expect(\n        getTextColorOn('primary.dark')({\n          theme: { ...props.theme, contrastRatio: 9.2 },\n        })\n      ).toEqual(props.theme.palette.text.base)\n    })\n\n    test('can be driven by a color prop', () => {\n      expect(getTextColorOn('light')({ ...props, color: 'primary' })).toEqual(props.theme.palette.text.base)\n      expect(getTextColorOn('dark')({ ...props, color: 'primary' })).toEqual(\n        props.theme.palette.text.lightest\n      )\n    })\n  })\n\n  describe('getByPalette', () => {\n    test('returns the correct style', () => {\n      const props = { theme: createTheme(), bg: 'background', color: 'primary' }\n      expect(getByPalette(props)).toEqual(\n        expect.arrayContaining([\n          'background-color: ',\n          props.theme.palette.background.base,\n          ';color: ',\n          props.theme.palette.primary.base,\n          ';',\n        ])\n      )\n    })\n  })\n\n  describe('color', () => {\n    const props = { theme: createTheme() }\n\n    test('returns empty string if missing props', () => {\n      expect(color({})).toBe('')\n      expect(color({ color: 'primary', bg: 'background' })).toBe('')\n      expect(color({ bg: 'background' })).toBe('')\n    })\n\n    test('returns the correct style', () => {\n      expect(color({ ...props, bg: 'background' })).toEqual(\n        expect.arrayContaining(['background-color: ', props.theme.palette.background.base, ';'])\n      )\n      expect(color({ ...props, color: 'primary' })).toEqual(\n        expect.arrayContaining([\n          'background-color: ',\n          props.theme.palette.primary.base,\n          ';\\ncolor: ',\n          props.theme.palette.text.lightest,\n          ';',\n        ])\n      )\n      expect(color({ ...props, color: 'notify' })).toEqual(\n        expect.arrayContaining([\n          'background-color: ',\n          props.theme.palette.notify.base,\n          ';\\ncolor: ',\n          props.theme.palette.text.base,\n          ';',\n        ])\n      )\n      expect(color({ ...props, bg: 'background', color: 'primary' })).toEqual(\n        expect.arrayContaining([\n          'background-color: ',\n          props.theme.palette.background.base,\n          ';color: ',\n          props.theme.palette.primary.base,\n          ';',\n        ])\n      )\n\n      // legacy support\n      expect(color({ ...props, color: 'text' })).toEqual(\n        expect.arrayContaining(['color: ', props.theme.colors.text, ';'])\n      )\n      expect(color({ ...props, color: 'blue' })).toEqual(\n        expect.arrayContaining(['color: ', props.theme.colors.blue, ';'])\n      )\n      expect(color({ ...props, color: 'blue', bg: 'green' })).toEqual(\n        expect.arrayContaining([\n          'background-color: ',\n          props.theme.colors.green,\n          ';color: ',\n          props.theme.colors.blue,\n          ';',\n        ])\n      )\n    })\n  })\n\n  describe('borders', () => {\n    test('returns the correct style', () => {\n      const props = { theme: createTheme() }\n      expect(borders(props)).toEqual({\n        'border-color': props.theme.palette.border.base,\n        ':focus': {\n          outline: 0,\n          'border-color': props.theme.palette.primary.base,\n          'box-shadow': `0 0 0 2px ${props.theme.palette.primary.base}`,\n        },\n      })\n      expect(borders({ ...props, color: 'primary' })).toEqual({\n        'border-color': props.theme.palette.primary.base,\n        ':focus': {\n          outline: 0,\n          'border-color': props.theme.palette.primary.base,\n          'box-shadow': `0 0 0 2px ${props.theme.palette.primary.base}`,\n        },\n      })\n    })\n  })\n\n  describe('getBreakpointSize', () => {\n    test('returns the expected result', () => {\n      const testArray1 = ['small', 'medium', null, null, null, null]\n      const testArray2 = [null, 'small', null, null, 'medium', null]\n      expect(getBreakpointSize(testArray1, 2)).toBe('medium')\n      expect(getBreakpointSize(testArray1, 1)).toBe('small')\n      expect(getBreakpointSize(testArray2, 2)).toBe('small')\n      expect(getBreakpointSize(testArray2, 4)).toBe('small')\n      expect(getBreakpointSize(testArray2, 5)).toBe('medium')\n    })\n  })\n\n  describe('applySizes', () => {\n    const sizesCss = {\n      small: 'smaaaallll css',\n      medium: 'medium css',\n    }\n\n    test('returns the expected result when size is an array', () => {\n      const sizeArray1 = ['small', 'medium', null, null, null, null]\n      const sizeArray2 = ['medium', null, null, null, 'small', null]\n\n      const result1 = applySizes(sizesCss)({ size: sizeArray1 })\n      expect(result1[0]).toBe('smaaaallll css')\n      const result2 = applySizes(sizesCss)({ size: sizeArray2 })\n      expect(result2[0]).toBe('medium css')\n    })\n    test('expected result when size is a string', () => {\n      const result1 = applySizes(sizesCss)({ size: 'medium' })\n      const result2 = applySizes(sizesCss)({ size: 'small' })\n      expect(result1).toEqual(['medium css'])\n      expect(result2).toEqual(['smaaaallll css'])\n    })\n  })\n})\n", "id": "design-system:packages/core/src/utils/utils.spec.ts:542fc7b1-6eb9-40a4-924e-0db4e59062f0"}
{"path": "src/Website/SimpleIdServer.Website/src/app/stores/workflows/models/activitystatehistory.model.ts", "project_name": "SimpleIdServer", "text": "\nexport class ActivityStateHistory {\n  state: string;\n  executionDateTime: Date;\n  message: string;\n}\n", "id": "SimpleIdServer:src/Website/SimpleIdServer.Website/src/app/stores/workflows/models/activitystatehistory.model.ts:1fb966f7-018d-4036-a55c-60e3af7149f0"}
{"path": "app/components/HUD.tsx", "project_name": "battle-city", "text": "import React from 'react'\nimport { connect } from 'react-redux'\nimport { State } from '../types'\nimport PlayerRecord from '../types/PlayerRecord'\nimport { BLOCK_SIZE as B, FIELD_SIZE } from '../utils/constants'\nimport * as selectors from '../utils/selectors'\nimport BotCountIndicator from './BotCountIndicator'\nimport { PlayerTankThumbnail } from './icons'\nimport Text from './Text'\n\ninterface HUDContentProps {\n  x?: number\n  y?: number\n  remainingBotCount: number\n  player1: PlayerRecord\n  player2: PlayerRecord\n  show: boolean\n  inMultiPlayersMode: boolean\n}\n\nexport class HUDContent extends React.PureComponent<HUDContentProps> {\n  renderPlayer1Info() {\n    const { player1 } = this.props\n    return (\n      <g className=\"player-1-info\">\n        <Text x={0} y={0} content={'\\u2160P'} fill=\"#000000\" />\n        <PlayerTankThumbnail x={0} y={0.5 * B} />\n        <Text x={0.5 * B} y={0.5 * B} content={String(player1.lives)} fill=\"#000000\" />\n      </g>\n    )\n  }\n\n  renderPlayer2Info() {\n    const { player2 } = this.props\n    const transform = `translate(0, ${B})`\n    return (\n      <g className=\"player-2-info\" transform={transform}>\n        <Text x={0} y={0} content={'\\u2161P'} fill=\"#000000\" />\n        <PlayerTankThumbnail x={0} y={0.5 * B} />\n        <Text x={0.5 * B} y={0.5 * B} content={String(player2.lives)} fill=\"#000000\" />\n      </g>\n    )\n  }\n\n  render() {\n    const { remainingBotCount, show, x = 0, y = 0, inMultiPlayersMode } = this.props\n\n    return (\n      <g className=\"HUD\" display={show ? 'inline' : 'none'} transform={`translate(${x}, ${y})`}>\n        <BotCountIndicator count={remainingBotCount} />\n        <g transform={`translate(0, ${6 * B})`}>\n          {this.renderPlayer1Info()}\n          {inMultiPlayersMode && this.renderPlayer2Info()}\n        </g>\n      </g>\n    )\n  }\n}\n\nfunction mapStateToProps(state: State) {\n  return {\n    remainingBotCount: state.game.remainingBots.size,\n    player1: state.player1,\n    player2: state.player2,\n    show: state.game.showHUD,\n    inMultiPlayersMode: selectors.isInMultiPlayersMode(state),\n  }\n}\n\nexport default connect(mapStateToProps)((props: HUDContentProps) => (\n  <HUDContent x={FIELD_SIZE + 1.5 * B} y={1.5 * B} {...props} />\n))\n", "id": "battle-city:app/components/HUD.tsx:2da0989d-258a-46e2-8038-928f1184d8bc"}
{"path": "src/reducers/customer.ts", "project_name": "react_crm", "text": "import {\n  CustomerState, CustomerActionTypes,\n  CREATE_CUSTOMER,\n  UPDATE_CUSTOMER,\n  DELETE_CUSTOMER,\n  GET_CUSTOMER,\n  LIST_CUSTOMER,\n  NEW_CUSTOMER\n} from '../store/types';\nimport { Customer, CustomerModel } from '../types';\n\nexport function customerReducer(\n  state: CustomerState = {\n    isFetching: true,\n    customer: new CustomerModel() as Customer, \n    customerList: [],\n    deleted: false,\n    updated: false,\n  },\n  action: CustomerActionTypes\n) {\n  \n  switch (action.type) {\n    case LIST_CUSTOMER:\n      return Object.assign({}, state, {\n        isFetching: false,\n        customerList: action.payload,\n        errorMessage: \"\",\n        deleted: false\n\n      });\n    case NEW_CUSTOMER:\n      return Object.assign({}, state, {\n        isFetching: false,\n        customer: action.payload, \n        errorMessage: action.error,\n        deleted: false,\n        updated: false,\n      });\n    case GET_CUSTOMER:\n      return Object.assign({}, state, {\n        isFetching: false,\n        customer: action.payload,\n        errorMessage: action.error,\n        deleted: false,\n        updated: false\n      });\n    case CREATE_CUSTOMER:\n    case UPDATE_CUSTOMER:\n      return Object.assign({}, state, {\n        isFetching: false,\n        customer: action.payload,\n        errorMessage: action.error,\n        deleted: false,\n        updated: true\n      });\n    case DELETE_CUSTOMER:\n      return Object.assign({}, state, {\n        isFetching: false,\n        errorMessage: action.error,\n        deleted: !action.error && action.payload ? true : false,\n        updated: false\n      });\n\n    default:\n      return state;\n  }\n}\n", "id": "react_crm:src/reducers/customer.ts:fec5155e-772d-4c59-91b8-ba7c1d92bf77"}
{"path": "src/useMutations.ts", "project_name": "vue-hooks", "text": "import createVuexHelper, { Helper, useMutations } from './helpers/vuex';\n\nexport default createVuexHelper<useMutations>(Helper.Mutations);\n", "id": "vue-hooks:src/useMutations.ts:b5199080-065e-4cdb-9054-bc252f6cea6e"}
{"path": "src/illustration/ChangeOrder56.tsx", "project_name": "box-ui-elements", "text": "/* eslint-disable react/jsx-sort-props */\nimport * as React from 'react';\nimport * as vars from '../styles/variables';\nimport AccessibleSVG, { SVGProps } from '../components/accessible-svg/AccessibleSVG';\n\n/**\n * This is an auto-generated component and should not be edited\n * manually in contributor pull requests.\n *\n * If you have problems with this component:\n * - https://github.com/box/box-ui-elements/issues/new?template=Bug_report.md\n *\n * If there are missing features in this component:\n * - https://github.com/box/box-ui-elements/issues/new?template=Feature_request.md\n */\n\nconst ChangeOrder56 = (props: SVGProps) => (\n    <AccessibleSVG width={56} height={56} viewBox=\"0 0 56 56\" {...props}>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n                fill={vars.bdlBoxBlue10}\n                d=\"M10 32a6 6 0 110 12 6 6 0 010-12zm38-12c2.21 0 4 1.79 4 4s-1.79 4-4 4-4-1.79-4-4 1.79-4 4-4z\"\n            />\n            <path\n                fill={vars.bdlBoxBlue10}\n                fillRule=\"nonzero\"\n                d=\"M46 8H10a4 4 0 00-.2 7.995L10 16h36a4 4 0 00.2-7.995L46 8z\"\n            />\n            <path\n                fill={vars.bdlBoxBlue}\n                fillRule=\"nonzero\"\n                d=\"M46 6a6 6 0 110 12H10a6 6 0 110-12h36zm0 2H10a4 4 0 00-.2 7.995L10 16h36a4 4 0 00.2-7.995L46 8z\"\n            />\n            <path\n                fill={vars.bdlBoxBlue}\n                d=\"M46 11a1 1 0 010 2h-1v28h3c1.054 0 1.918.816 1.995 1.85L50 43v2.5a4.5 4.5 0 01-4.288 4.495L45.5 50H15v-.029l-.128-.014a4.502 4.502 0 01-3.867-4.245L11 45.5V13h-1a1 1 0 010-2h36zm-3 2H13v32.5a2.5 2.5 0 004.995.164L18 45.5V43c0-1.054.816-1.918 1.85-1.995L20 41h23V13zm5 30H20v2.5c0 .83-.225 1.609-.618 2.277l-.141.223H45.5a2.501 2.501 0 002.495-2.336L48 45.5V43z\"\n            />\n            <path\n                fill={vars.white}\n                fillRule=\"nonzero\"\n                d=\"M13 45.5a2.5 2.5 0 004.995.164L18 45.5V43c0-1.054.816-1.918 1.85-1.995L20 41h23V13H13v32.5z\"\n            />\n            <path\n                fill={vars.bdlBoxBlue10}\n                fillRule=\"nonzero\"\n                d=\"M48 45.5V43H20v2.5c0 .83-.225 1.609-.618 2.277l-.141.223H45.5a2.501 2.501 0 002.495-2.336L48 45.5z\"\n            />\n            <g transform=\"translate(17 20)\">\n                <path fill={vars.bdlBoxBlue10} fillRule=\"nonzero\" d=\"M3 10a2 2 0 10-.001 3.999A2 2 0 003 10z\" />\n                <path\n                    fill={vars.bdlBoxBlue}\n                    fillRule=\"nonzero\"\n                    d=\"M3 9a3 3 0 110 6 3 3 0 010-6zm0 1a2 2 0 10-.001 3.999A2 2 0 003 10z\"\n                />\n                <path fill={vars.bdlBoxBlue10} fillRule=\"nonzero\" d=\"M11 10a2 2 0 10-.001 3.999A2 2 0 0011 10z\" />\n                <path\n                    fill={vars.bdlBoxBlue}\n                    fillRule=\"nonzero\"\n                    d=\"M11 9a3 3 0 110 6 3 3 0 010-6zm0 1a2 2 0 10-.001 3.999A2 2 0 0011 10z\"\n                />\n                <rect width={6} height={6} x={16} y={9} fill={vars.bdlBoxBlue} rx={3} />\n                <path\n                    fill={vars.bdlBoxBlue}\n                    fillRule=\"nonzero\"\n                    d=\"M11 0c3.798 0 6.713 2.186 7.964 5.314a.5.5 0 11-.928.372C16.93 2.92 14.369 1 11 1 7.918 1 5.511 2.608 4.277 5H7.5a.5.5 0 01.492.41L8 5.5a.5.5 0 01-.41.492L7.5 6H3.49a.483.483 0 01-.144-.024l-.025-.009-.007-.003-.038-.017-.034-.018.072.035a.504.504 0 01-.114-.063l-.029-.024-.032-.03-.028-.032-.034-.048-.012-.02a.385.385 0 01-.024-.05l-.013-.03c-.006-.017-.01-.035-.015-.052l-.005-.025A.602.602 0 013 5.525V1.5a.5.5 0 01.992-.09L4 1.5v2.032C5.51 1.387 7.975 0 11 0z\"\n                />\n            </g>\n        </g>\n    </AccessibleSVG>\n);\n\nexport default ChangeOrder56;\n", "id": "box-ui-elements:src/illustration/ChangeOrder56.tsx:a7ca4528-9125-4dd9-b5c9-bd083c75218a"}
{"path": "types/carbon__icons-react/es/skip--forward--outline/16.d.ts", "project_name": "DefinitelyTyped", "text": "export { SkipForwardOutline16 as default } from \"../../\";\n", "id": "DefinitelyTyped:types/carbon__icons-react/es/skip--forward--outline/16.d.ts:25927c7e-55f5-4091-b7a0-0d687bb1a904"}
